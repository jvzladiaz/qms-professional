
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ProcessFlow
 * 
 */
export type ProcessFlow = $Result.DefaultSelection<Prisma.$ProcessFlowPayload>
/**
 * Model Process
 * 
 */
export type Process = $Result.DefaultSelection<Prisma.$ProcessPayload>
/**
 * Model Fmea
 * 
 */
export type Fmea = $Result.DefaultSelection<Prisma.$FmeaPayload>
/**
 * Model FailureMode
 * 
 */
export type FailureMode = $Result.DefaultSelection<Prisma.$FailureModePayload>
/**
 * Model ControlPlan
 * 
 */
export type ControlPlan = $Result.DefaultSelection<Prisma.$ControlPlanPayload>
/**
 * Model ActionItem
 * 
 */
export type ActionItem = $Result.DefaultSelection<Prisma.$ActionItemPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model ChangeEvent
 * 
 */
export type ChangeEvent = $Result.DefaultSelection<Prisma.$ChangeEventPayload>
/**
 * Model ComplianceReport
 * 
 */
export type ComplianceReport = $Result.DefaultSelection<Prisma.$ComplianceReportPayload>
/**
 * Model RiskAnalytics
 * 
 */
export type RiskAnalytics = $Result.DefaultSelection<Prisma.$RiskAnalyticsPayload>
/**
 * Model AuditTrail
 * 
 */
export type AuditTrail = $Result.DefaultSelection<Prisma.$AuditTrailPayload>
/**
 * Model ProjectMember
 * 
 */
export type ProjectMember = $Result.DefaultSelection<Prisma.$ProjectMemberPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  USER: 'USER',
  VIEWER: 'VIEWER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Industry: {
  AUTOMOTIVE: 'AUTOMOTIVE',
  AEROSPACE: 'AEROSPACE',
  MEDICAL: 'MEDICAL',
  MANUFACTURING: 'MANUFACTURING',
  OTHER: 'OTHER'
};

export type Industry = (typeof Industry)[keyof typeof Industry]


export const ProjectStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  ARCHIVED: 'ARCHIVED',
  ON_HOLD: 'ON_HOLD'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const FmeaType: {
  PROCESS: 'PROCESS',
  DESIGN: 'DESIGN',
  SYSTEM: 'SYSTEM',
  SERVICE: 'SERVICE'
};

export type FmeaType = (typeof FmeaType)[keyof typeof FmeaType]


export const FmeaStatus: {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  APPROVED: 'APPROVED',
  ARCHIVED: 'ARCHIVED'
};

export type FmeaStatus = (typeof FmeaStatus)[keyof typeof FmeaStatus]


export const ControlMethodType: {
  PREVENTION: 'PREVENTION',
  DETECTION: 'DETECTION',
  REACTION: 'REACTION'
};

export type ControlMethodType = (typeof ControlMethodType)[keyof typeof ControlMethodType]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const ActionStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ON_HOLD: 'ON_HOLD'
};

export type ActionStatus = (typeof ActionStatus)[keyof typeof ActionStatus]


export const NotificationType: {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  REMINDER: 'REMINDER'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ChangeType: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  ARCHIVE: 'ARCHIVE',
  RESTORE: 'RESTORE'
};

export type ChangeType = (typeof ChangeType)[keyof typeof ChangeType]


export const ComplianceStandard: {
  IATF_16949: 'IATF_16949',
  ISO_9001: 'ISO_9001',
  AS9100: 'AS9100',
  ISO_13485: 'ISO_13485',
  CUSTOM: 'CUSTOM'
};

export type ComplianceStandard = (typeof ComplianceStandard)[keyof typeof ComplianceStandard]


export const ComplianceStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLIANT: 'COMPLIANT',
  NON_COMPLIANT: 'NON_COMPLIANT',
  NEEDS_REVIEW: 'NEEDS_REVIEW'
};

export type ComplianceStatus = (typeof ComplianceStatus)[keyof typeof ComplianceStatus]


export const ProjectRole: {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  MEMBER: 'MEMBER',
  VIEWER: 'VIEWER'
};

export type ProjectRole = (typeof ProjectRole)[keyof typeof ProjectRole]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Industry = $Enums.Industry

export const Industry: typeof $Enums.Industry

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type FmeaType = $Enums.FmeaType

export const FmeaType: typeof $Enums.FmeaType

export type FmeaStatus = $Enums.FmeaStatus

export const FmeaStatus: typeof $Enums.FmeaStatus

export type ControlMethodType = $Enums.ControlMethodType

export const ControlMethodType: typeof $Enums.ControlMethodType

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type ActionStatus = $Enums.ActionStatus

export const ActionStatus: typeof $Enums.ActionStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ChangeType = $Enums.ChangeType

export const ChangeType: typeof $Enums.ChangeType

export type ComplianceStandard = $Enums.ComplianceStandard

export const ComplianceStandard: typeof $Enums.ComplianceStandard

export type ComplianceStatus = $Enums.ComplianceStatus

export const ComplianceStatus: typeof $Enums.ComplianceStatus

export type ProjectRole = $Enums.ProjectRole

export const ProjectRole: typeof $Enums.ProjectRole

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.processFlow`: Exposes CRUD operations for the **ProcessFlow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcessFlows
    * const processFlows = await prisma.processFlow.findMany()
    * ```
    */
  get processFlow(): Prisma.ProcessFlowDelegate<ExtArgs>;

  /**
   * `prisma.process`: Exposes CRUD operations for the **Process** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Processes
    * const processes = await prisma.process.findMany()
    * ```
    */
  get process(): Prisma.ProcessDelegate<ExtArgs>;

  /**
   * `prisma.fmea`: Exposes CRUD operations for the **Fmea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fmeas
    * const fmeas = await prisma.fmea.findMany()
    * ```
    */
  get fmea(): Prisma.FmeaDelegate<ExtArgs>;

  /**
   * `prisma.failureMode`: Exposes CRUD operations for the **FailureMode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FailureModes
    * const failureModes = await prisma.failureMode.findMany()
    * ```
    */
  get failureMode(): Prisma.FailureModeDelegate<ExtArgs>;

  /**
   * `prisma.controlPlan`: Exposes CRUD operations for the **ControlPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ControlPlans
    * const controlPlans = await prisma.controlPlan.findMany()
    * ```
    */
  get controlPlan(): Prisma.ControlPlanDelegate<ExtArgs>;

  /**
   * `prisma.actionItem`: Exposes CRUD operations for the **ActionItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActionItems
    * const actionItems = await prisma.actionItem.findMany()
    * ```
    */
  get actionItem(): Prisma.ActionItemDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.changeEvent`: Exposes CRUD operations for the **ChangeEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChangeEvents
    * const changeEvents = await prisma.changeEvent.findMany()
    * ```
    */
  get changeEvent(): Prisma.ChangeEventDelegate<ExtArgs>;

  /**
   * `prisma.complianceReport`: Exposes CRUD operations for the **ComplianceReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComplianceReports
    * const complianceReports = await prisma.complianceReport.findMany()
    * ```
    */
  get complianceReport(): Prisma.ComplianceReportDelegate<ExtArgs>;

  /**
   * `prisma.riskAnalytics`: Exposes CRUD operations for the **RiskAnalytics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RiskAnalytics
    * const riskAnalytics = await prisma.riskAnalytics.findMany()
    * ```
    */
  get riskAnalytics(): Prisma.RiskAnalyticsDelegate<ExtArgs>;

  /**
   * `prisma.auditTrail`: Exposes CRUD operations for the **AuditTrail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditTrails
    * const auditTrails = await prisma.auditTrail.findMany()
    * ```
    */
  get auditTrail(): Prisma.AuditTrailDelegate<ExtArgs>;

  /**
   * `prisma.projectMember`: Exposes CRUD operations for the **ProjectMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectMembers
    * const projectMembers = await prisma.projectMember.findMany()
    * ```
    */
  get projectMember(): Prisma.ProjectMemberDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    ProcessFlow: 'ProcessFlow',
    Process: 'Process',
    Fmea: 'Fmea',
    FailureMode: 'FailureMode',
    ControlPlan: 'ControlPlan',
    ActionItem: 'ActionItem',
    Comment: 'Comment',
    Notification: 'Notification',
    ChangeEvent: 'ChangeEvent',
    ComplianceReport: 'ComplianceReport',
    RiskAnalytics: 'RiskAnalytics',
    AuditTrail: 'AuditTrail',
    ProjectMember: 'ProjectMember'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "processFlow" | "process" | "fmea" | "failureMode" | "controlPlan" | "actionItem" | "comment" | "notification" | "changeEvent" | "complianceReport" | "riskAnalytics" | "auditTrail" | "projectMember"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProcessFlow: {
        payload: Prisma.$ProcessFlowPayload<ExtArgs>
        fields: Prisma.ProcessFlowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessFlowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessFlowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          findFirst: {
            args: Prisma.ProcessFlowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessFlowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          findMany: {
            args: Prisma.ProcessFlowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>[]
          }
          create: {
            args: Prisma.ProcessFlowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          createMany: {
            args: Prisma.ProcessFlowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessFlowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>[]
          }
          delete: {
            args: Prisma.ProcessFlowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          update: {
            args: Prisma.ProcessFlowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          deleteMany: {
            args: Prisma.ProcessFlowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessFlowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessFlowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessFlowPayload>
          }
          aggregate: {
            args: Prisma.ProcessFlowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcessFlow>
          }
          groupBy: {
            args: Prisma.ProcessFlowGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessFlowGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessFlowCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessFlowCountAggregateOutputType> | number
          }
        }
      }
      Process: {
        payload: Prisma.$ProcessPayload<ExtArgs>
        fields: Prisma.ProcessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findFirst: {
            args: Prisma.ProcessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          findMany: {
            args: Prisma.ProcessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          create: {
            args: Prisma.ProcessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          createMany: {
            args: Prisma.ProcessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProcessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>[]
          }
          delete: {
            args: Prisma.ProcessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          update: {
            args: Prisma.ProcessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          deleteMany: {
            args: Prisma.ProcessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProcessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProcessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProcessPayload>
          }
          aggregate: {
            args: Prisma.ProcessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProcess>
          }
          groupBy: {
            args: Prisma.ProcessGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProcessGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcessCountArgs<ExtArgs>
            result: $Utils.Optional<ProcessCountAggregateOutputType> | number
          }
        }
      }
      Fmea: {
        payload: Prisma.$FmeaPayload<ExtArgs>
        fields: Prisma.FmeaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FmeaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FmeaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          findFirst: {
            args: Prisma.FmeaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FmeaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          findMany: {
            args: Prisma.FmeaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>[]
          }
          create: {
            args: Prisma.FmeaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          createMany: {
            args: Prisma.FmeaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FmeaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>[]
          }
          delete: {
            args: Prisma.FmeaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          update: {
            args: Prisma.FmeaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          deleteMany: {
            args: Prisma.FmeaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FmeaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FmeaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FmeaPayload>
          }
          aggregate: {
            args: Prisma.FmeaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFmea>
          }
          groupBy: {
            args: Prisma.FmeaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FmeaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FmeaCountArgs<ExtArgs>
            result: $Utils.Optional<FmeaCountAggregateOutputType> | number
          }
        }
      }
      FailureMode: {
        payload: Prisma.$FailureModePayload<ExtArgs>
        fields: Prisma.FailureModeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FailureModeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FailureModeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          findFirst: {
            args: Prisma.FailureModeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FailureModeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          findMany: {
            args: Prisma.FailureModeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>[]
          }
          create: {
            args: Prisma.FailureModeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          createMany: {
            args: Prisma.FailureModeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FailureModeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>[]
          }
          delete: {
            args: Prisma.FailureModeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          update: {
            args: Prisma.FailureModeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          deleteMany: {
            args: Prisma.FailureModeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FailureModeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FailureModeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FailureModePayload>
          }
          aggregate: {
            args: Prisma.FailureModeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFailureMode>
          }
          groupBy: {
            args: Prisma.FailureModeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FailureModeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FailureModeCountArgs<ExtArgs>
            result: $Utils.Optional<FailureModeCountAggregateOutputType> | number
          }
        }
      }
      ControlPlan: {
        payload: Prisma.$ControlPlanPayload<ExtArgs>
        fields: Prisma.ControlPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ControlPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ControlPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          findFirst: {
            args: Prisma.ControlPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ControlPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          findMany: {
            args: Prisma.ControlPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>[]
          }
          create: {
            args: Prisma.ControlPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          createMany: {
            args: Prisma.ControlPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ControlPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>[]
          }
          delete: {
            args: Prisma.ControlPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          update: {
            args: Prisma.ControlPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          deleteMany: {
            args: Prisma.ControlPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ControlPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ControlPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPlanPayload>
          }
          aggregate: {
            args: Prisma.ControlPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControlPlan>
          }
          groupBy: {
            args: Prisma.ControlPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ControlPlanCountArgs<ExtArgs>
            result: $Utils.Optional<ControlPlanCountAggregateOutputType> | number
          }
        }
      }
      ActionItem: {
        payload: Prisma.$ActionItemPayload<ExtArgs>
        fields: Prisma.ActionItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActionItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActionItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          findFirst: {
            args: Prisma.ActionItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActionItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          findMany: {
            args: Prisma.ActionItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>[]
          }
          create: {
            args: Prisma.ActionItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          createMany: {
            args: Prisma.ActionItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActionItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>[]
          }
          delete: {
            args: Prisma.ActionItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          update: {
            args: Prisma.ActionItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          deleteMany: {
            args: Prisma.ActionItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActionItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ActionItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActionItemPayload>
          }
          aggregate: {
            args: Prisma.ActionItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActionItem>
          }
          groupBy: {
            args: Prisma.ActionItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActionItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActionItemCountArgs<ExtArgs>
            result: $Utils.Optional<ActionItemCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      ChangeEvent: {
        payload: Prisma.$ChangeEventPayload<ExtArgs>
        fields: Prisma.ChangeEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChangeEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChangeEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          findFirst: {
            args: Prisma.ChangeEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChangeEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          findMany: {
            args: Prisma.ChangeEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>[]
          }
          create: {
            args: Prisma.ChangeEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          createMany: {
            args: Prisma.ChangeEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChangeEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>[]
          }
          delete: {
            args: Prisma.ChangeEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          update: {
            args: Prisma.ChangeEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          deleteMany: {
            args: Prisma.ChangeEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChangeEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChangeEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChangeEventPayload>
          }
          aggregate: {
            args: Prisma.ChangeEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChangeEvent>
          }
          groupBy: {
            args: Prisma.ChangeEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChangeEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChangeEventCountArgs<ExtArgs>
            result: $Utils.Optional<ChangeEventCountAggregateOutputType> | number
          }
        }
      }
      ComplianceReport: {
        payload: Prisma.$ComplianceReportPayload<ExtArgs>
        fields: Prisma.ComplianceReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplianceReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplianceReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          findFirst: {
            args: Prisma.ComplianceReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplianceReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          findMany: {
            args: Prisma.ComplianceReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>[]
          }
          create: {
            args: Prisma.ComplianceReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          createMany: {
            args: Prisma.ComplianceReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComplianceReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>[]
          }
          delete: {
            args: Prisma.ComplianceReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          update: {
            args: Prisma.ComplianceReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          deleteMany: {
            args: Prisma.ComplianceReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplianceReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComplianceReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplianceReportPayload>
          }
          aggregate: {
            args: Prisma.ComplianceReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplianceReport>
          }
          groupBy: {
            args: Prisma.ComplianceReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplianceReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComplianceReportCountArgs<ExtArgs>
            result: $Utils.Optional<ComplianceReportCountAggregateOutputType> | number
          }
        }
      }
      RiskAnalytics: {
        payload: Prisma.$RiskAnalyticsPayload<ExtArgs>
        fields: Prisma.RiskAnalyticsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RiskAnalyticsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RiskAnalyticsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          findFirst: {
            args: Prisma.RiskAnalyticsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RiskAnalyticsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          findMany: {
            args: Prisma.RiskAnalyticsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>[]
          }
          create: {
            args: Prisma.RiskAnalyticsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          createMany: {
            args: Prisma.RiskAnalyticsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RiskAnalyticsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>[]
          }
          delete: {
            args: Prisma.RiskAnalyticsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          update: {
            args: Prisma.RiskAnalyticsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          deleteMany: {
            args: Prisma.RiskAnalyticsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RiskAnalyticsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RiskAnalyticsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RiskAnalyticsPayload>
          }
          aggregate: {
            args: Prisma.RiskAnalyticsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRiskAnalytics>
          }
          groupBy: {
            args: Prisma.RiskAnalyticsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RiskAnalyticsGroupByOutputType>[]
          }
          count: {
            args: Prisma.RiskAnalyticsCountArgs<ExtArgs>
            result: $Utils.Optional<RiskAnalyticsCountAggregateOutputType> | number
          }
        }
      }
      AuditTrail: {
        payload: Prisma.$AuditTrailPayload<ExtArgs>
        fields: Prisma.AuditTrailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditTrailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditTrailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          findFirst: {
            args: Prisma.AuditTrailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditTrailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          findMany: {
            args: Prisma.AuditTrailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>[]
          }
          create: {
            args: Prisma.AuditTrailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          createMany: {
            args: Prisma.AuditTrailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditTrailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>[]
          }
          delete: {
            args: Prisma.AuditTrailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          update: {
            args: Prisma.AuditTrailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          deleteMany: {
            args: Prisma.AuditTrailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditTrailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditTrailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditTrailPayload>
          }
          aggregate: {
            args: Prisma.AuditTrailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditTrail>
          }
          groupBy: {
            args: Prisma.AuditTrailGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditTrailGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditTrailCountArgs<ExtArgs>
            result: $Utils.Optional<AuditTrailCountAggregateOutputType> | number
          }
        }
      }
      ProjectMember: {
        payload: Prisma.$ProjectMemberPayload<ExtArgs>
        fields: Prisma.ProjectMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findFirst: {
            args: Prisma.ProjectMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          findMany: {
            args: Prisma.ProjectMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          create: {
            args: Prisma.ProjectMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          createMany: {
            args: Prisma.ProjectMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>[]
          }
          delete: {
            args: Prisma.ProjectMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          update: {
            args: Prisma.ProjectMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          deleteMany: {
            args: Prisma.ProjectMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectMemberPayload>
          }
          aggregate: {
            args: Prisma.ProjectMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectMember>
          }
          groupBy: {
            args: Prisma.ProjectMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectMemberCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectMemberCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdProjects: number
    assignedProjects: number
    createdFmeas: number
    assignedActions: number
    createdActions: number
    comments: number
    notifications: number
    changeEvents: number
    complianceReports: number
    auditTrail: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdProjects?: boolean | UserCountOutputTypeCountCreatedProjectsArgs
    assignedProjects?: boolean | UserCountOutputTypeCountAssignedProjectsArgs
    createdFmeas?: boolean | UserCountOutputTypeCountCreatedFmeasArgs
    assignedActions?: boolean | UserCountOutputTypeCountAssignedActionsArgs
    createdActions?: boolean | UserCountOutputTypeCountCreatedActionsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    changeEvents?: boolean | UserCountOutputTypeCountChangeEventsArgs
    complianceReports?: boolean | UserCountOutputTypeCountComplianceReportsArgs
    auditTrail?: boolean | UserCountOutputTypeCountAuditTrailArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedFmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FmeaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChangeEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChangeEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComplianceReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplianceReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditTrailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditTrailWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    members: number
    processFlows: number
    fmeas: number
    controlPlans: number
    actionItems: number
    comments: number
    notifications: number
    changeEvents: number
    complianceReports: number
    riskAnalytics: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | ProjectCountOutputTypeCountMembersArgs
    processFlows?: boolean | ProjectCountOutputTypeCountProcessFlowsArgs
    fmeas?: boolean | ProjectCountOutputTypeCountFmeasArgs
    controlPlans?: boolean | ProjectCountOutputTypeCountControlPlansArgs
    actionItems?: boolean | ProjectCountOutputTypeCountActionItemsArgs
    comments?: boolean | ProjectCountOutputTypeCountCommentsArgs
    notifications?: boolean | ProjectCountOutputTypeCountNotificationsArgs
    changeEvents?: boolean | ProjectCountOutputTypeCountChangeEventsArgs
    complianceReports?: boolean | ProjectCountOutputTypeCountComplianceReportsArgs
    riskAnalytics?: boolean | ProjectCountOutputTypeCountRiskAnalyticsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountProcessFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessFlowWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountFmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FmeaWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountControlPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlPlanWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountActionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionItemWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountChangeEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChangeEventWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountComplianceReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplianceReportWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountRiskAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskAnalyticsWhereInput
  }


  /**
   * Count Type ProcessFlowCountOutputType
   */

  export type ProcessFlowCountOutputType = {
    processes: number
    fmeas: number
  }

  export type ProcessFlowCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processes?: boolean | ProcessFlowCountOutputTypeCountProcessesArgs
    fmeas?: boolean | ProcessFlowCountOutputTypeCountFmeasArgs
  }

  // Custom InputTypes
  /**
   * ProcessFlowCountOutputType without action
   */
  export type ProcessFlowCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlowCountOutputType
     */
    select?: ProcessFlowCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessFlowCountOutputType without action
   */
  export type ProcessFlowCountOutputTypeCountProcessesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
  }

  /**
   * ProcessFlowCountOutputType without action
   */
  export type ProcessFlowCountOutputTypeCountFmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FmeaWhereInput
  }


  /**
   * Count Type ProcessCountOutputType
   */

  export type ProcessCountOutputType = {
    failureModes: number
  }

  export type ProcessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    failureModes?: boolean | ProcessCountOutputTypeCountFailureModesArgs
  }

  // Custom InputTypes
  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessCountOutputType
     */
    select?: ProcessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProcessCountOutputType without action
   */
  export type ProcessCountOutputTypeCountFailureModesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailureModeWhereInput
  }


  /**
   * Count Type FmeaCountOutputType
   */

  export type FmeaCountOutputType = {
    failureModes: number
    controlPlans: number
    comments: number
    riskAnalytics: number
  }

  export type FmeaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    failureModes?: boolean | FmeaCountOutputTypeCountFailureModesArgs
    controlPlans?: boolean | FmeaCountOutputTypeCountControlPlansArgs
    comments?: boolean | FmeaCountOutputTypeCountCommentsArgs
    riskAnalytics?: boolean | FmeaCountOutputTypeCountRiskAnalyticsArgs
  }

  // Custom InputTypes
  /**
   * FmeaCountOutputType without action
   */
  export type FmeaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FmeaCountOutputType
     */
    select?: FmeaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FmeaCountOutputType without action
   */
  export type FmeaCountOutputTypeCountFailureModesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailureModeWhereInput
  }

  /**
   * FmeaCountOutputType without action
   */
  export type FmeaCountOutputTypeCountControlPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlPlanWhereInput
  }

  /**
   * FmeaCountOutputType without action
   */
  export type FmeaCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * FmeaCountOutputType without action
   */
  export type FmeaCountOutputTypeCountRiskAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskAnalyticsWhereInput
  }


  /**
   * Count Type FailureModeCountOutputType
   */

  export type FailureModeCountOutputType = {
    actionItems: number
    comments: number
  }

  export type FailureModeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actionItems?: boolean | FailureModeCountOutputTypeCountActionItemsArgs
    comments?: boolean | FailureModeCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * FailureModeCountOutputType without action
   */
  export type FailureModeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureModeCountOutputType
     */
    select?: FailureModeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FailureModeCountOutputType without action
   */
  export type FailureModeCountOutputTypeCountActionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionItemWhereInput
  }

  /**
   * FailureModeCountOutputType without action
   */
  export type FailureModeCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ActionItemCountOutputType
   */

  export type ActionItemCountOutputType = {
    comments: number
    notifications: number
  }

  export type ActionItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ActionItemCountOutputTypeCountCommentsArgs
    notifications?: boolean | ActionItemCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * ActionItemCountOutputType without action
   */
  export type ActionItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItemCountOutputType
     */
    select?: ActionItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActionItemCountOutputType without action
   */
  export type ActionItemCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ActionItemCountOutputType without action
   */
  export type ActionItemCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    replies: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    replies?: boolean | CommentCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    assignedProjects?: boolean | User$assignedProjectsArgs<ExtArgs>
    createdFmeas?: boolean | User$createdFmeasArgs<ExtArgs>
    assignedActions?: boolean | User$assignedActionsArgs<ExtArgs>
    createdActions?: boolean | User$createdActionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    changeEvents?: boolean | User$changeEventsArgs<ExtArgs>
    complianceReports?: boolean | User$complianceReportsArgs<ExtArgs>
    auditTrail?: boolean | User$auditTrailArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdProjects?: boolean | User$createdProjectsArgs<ExtArgs>
    assignedProjects?: boolean | User$assignedProjectsArgs<ExtArgs>
    createdFmeas?: boolean | User$createdFmeasArgs<ExtArgs>
    assignedActions?: boolean | User$assignedActionsArgs<ExtArgs>
    createdActions?: boolean | User$createdActionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    changeEvents?: boolean | User$changeEventsArgs<ExtArgs>
    complianceReports?: boolean | User$complianceReportsArgs<ExtArgs>
    auditTrail?: boolean | User$auditTrailArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdProjects: Prisma.$ProjectPayload<ExtArgs>[]
      assignedProjects: Prisma.$ProjectMemberPayload<ExtArgs>[]
      createdFmeas: Prisma.$FmeaPayload<ExtArgs>[]
      assignedActions: Prisma.$ActionItemPayload<ExtArgs>[]
      createdActions: Prisma.$ActionItemPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      changeEvents: Prisma.$ChangeEventPayload<ExtArgs>[]
      complianceReports: Prisma.$ComplianceReportPayload<ExtArgs>[]
      auditTrail: Prisma.$AuditTrailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: $Enums.Role
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdProjects<T extends User$createdProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    assignedProjects<T extends User$assignedProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    createdFmeas<T extends User$createdFmeasArgs<ExtArgs> = {}>(args?: Subset<T, User$createdFmeasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findMany"> | Null>
    assignedActions<T extends User$assignedActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdActions<T extends User$createdActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    changeEvents<T extends User$changeEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$changeEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findMany"> | Null>
    complianceReports<T extends User$complianceReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$complianceReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findMany"> | Null>
    auditTrail<T extends User$auditTrailArgs<ExtArgs> = {}>(args?: Subset<T, User$auditTrailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.createdProjects
   */
  export type User$createdProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.assignedProjects
   */
  export type User$assignedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * User.createdFmeas
   */
  export type User$createdFmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    cursor?: FmeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * User.assignedActions
   */
  export type User$assignedActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    cursor?: ActionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * User.createdActions
   */
  export type User$createdActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    cursor?: ActionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.changeEvents
   */
  export type User$changeEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    where?: ChangeEventWhereInput
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    cursor?: ChangeEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChangeEventScalarFieldEnum | ChangeEventScalarFieldEnum[]
  }

  /**
   * User.complianceReports
   */
  export type User$complianceReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    where?: ComplianceReportWhereInput
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    cursor?: ComplianceReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplianceReportScalarFieldEnum | ComplianceReportScalarFieldEnum[]
  }

  /**
   * User.auditTrail
   */
  export type User$auditTrailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    where?: AuditTrailWhereInput
    orderBy?: AuditTrailOrderByWithRelationInput | AuditTrailOrderByWithRelationInput[]
    cursor?: AuditTrailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditTrailScalarFieldEnum | AuditTrailScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    department: string | null
    industry: $Enums.Industry | null
    status: $Enums.ProjectStatus | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
    archivedAt: Date | null
    createdById: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    department: string | null
    industry: $Enums.Industry | null
    status: $Enums.ProjectStatus | null
    version: string | null
    createdAt: Date | null
    updatedAt: Date | null
    archivedAt: Date | null
    createdById: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    description: number
    department: number
    industry: number
    status: number
    version: number
    createdAt: number
    updatedAt: number
    archivedAt: number
    createdById: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    department?: true
    industry?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
    createdById?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    department?: true
    industry?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
    createdById?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    department?: true
    industry?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    archivedAt?: true
    createdById?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    description: string | null
    department: string | null
    industry: $Enums.Industry
    status: $Enums.ProjectStatus
    version: string
    createdAt: Date
    updatedAt: Date
    archivedAt: Date | null
    createdById: string
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    department?: boolean
    industry?: boolean
    status?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    processFlows?: boolean | Project$processFlowsArgs<ExtArgs>
    fmeas?: boolean | Project$fmeasArgs<ExtArgs>
    controlPlans?: boolean | Project$controlPlansArgs<ExtArgs>
    actionItems?: boolean | Project$actionItemsArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    notifications?: boolean | Project$notificationsArgs<ExtArgs>
    changeEvents?: boolean | Project$changeEventsArgs<ExtArgs>
    complianceReports?: boolean | Project$complianceReportsArgs<ExtArgs>
    riskAnalytics?: boolean | Project$riskAnalyticsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    department?: boolean
    industry?: boolean
    status?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    department?: boolean
    industry?: boolean
    status?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    archivedAt?: boolean
    createdById?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Project$membersArgs<ExtArgs>
    processFlows?: boolean | Project$processFlowsArgs<ExtArgs>
    fmeas?: boolean | Project$fmeasArgs<ExtArgs>
    controlPlans?: boolean | Project$controlPlansArgs<ExtArgs>
    actionItems?: boolean | Project$actionItemsArgs<ExtArgs>
    comments?: boolean | Project$commentsArgs<ExtArgs>
    notifications?: boolean | Project$notificationsArgs<ExtArgs>
    changeEvents?: boolean | Project$changeEventsArgs<ExtArgs>
    complianceReports?: boolean | Project$complianceReportsArgs<ExtArgs>
    riskAnalytics?: boolean | Project$riskAnalyticsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      members: Prisma.$ProjectMemberPayload<ExtArgs>[]
      processFlows: Prisma.$ProcessFlowPayload<ExtArgs>[]
      fmeas: Prisma.$FmeaPayload<ExtArgs>[]
      controlPlans: Prisma.$ControlPlanPayload<ExtArgs>[]
      actionItems: Prisma.$ActionItemPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      changeEvents: Prisma.$ChangeEventPayload<ExtArgs>[]
      complianceReports: Prisma.$ComplianceReportPayload<ExtArgs>[]
      riskAnalytics: Prisma.$RiskAnalyticsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      department: string | null
      industry: $Enums.Industry
      status: $Enums.ProjectStatus
      version: string
      createdAt: Date
      updatedAt: Date
      archivedAt: Date | null
      createdById: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    members<T extends Project$membersArgs<ExtArgs> = {}>(args?: Subset<T, Project$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany"> | Null>
    processFlows<T extends Project$processFlowsArgs<ExtArgs> = {}>(args?: Subset<T, Project$processFlowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findMany"> | Null>
    fmeas<T extends Project$fmeasArgs<ExtArgs> = {}>(args?: Subset<T, Project$fmeasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findMany"> | Null>
    controlPlans<T extends Project$controlPlansArgs<ExtArgs> = {}>(args?: Subset<T, Project$controlPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findMany"> | Null>
    actionItems<T extends Project$actionItemsArgs<ExtArgs> = {}>(args?: Subset<T, Project$actionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Project$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Project$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Project$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    changeEvents<T extends Project$changeEventsArgs<ExtArgs> = {}>(args?: Subset<T, Project$changeEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findMany"> | Null>
    complianceReports<T extends Project$complianceReportsArgs<ExtArgs> = {}>(args?: Subset<T, Project$complianceReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findMany"> | Null>
    riskAnalytics<T extends Project$riskAnalyticsArgs<ExtArgs> = {}>(args?: Subset<T, Project$riskAnalyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly department: FieldRef<"Project", 'String'>
    readonly industry: FieldRef<"Project", 'Industry'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly version: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly archivedAt: FieldRef<"Project", 'DateTime'>
    readonly createdById: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.members
   */
  export type Project$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    cursor?: ProjectMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * Project.processFlows
   */
  export type Project$processFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    where?: ProcessFlowWhereInput
    orderBy?: ProcessFlowOrderByWithRelationInput | ProcessFlowOrderByWithRelationInput[]
    cursor?: ProcessFlowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessFlowScalarFieldEnum | ProcessFlowScalarFieldEnum[]
  }

  /**
   * Project.fmeas
   */
  export type Project$fmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    cursor?: FmeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * Project.controlPlans
   */
  export type Project$controlPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    where?: ControlPlanWhereInput
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    cursor?: ControlPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlPlanScalarFieldEnum | ControlPlanScalarFieldEnum[]
  }

  /**
   * Project.actionItems
   */
  export type Project$actionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    cursor?: ActionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * Project.comments
   */
  export type Project$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Project.notifications
   */
  export type Project$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Project.changeEvents
   */
  export type Project$changeEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    where?: ChangeEventWhereInput
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    cursor?: ChangeEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChangeEventScalarFieldEnum | ChangeEventScalarFieldEnum[]
  }

  /**
   * Project.complianceReports
   */
  export type Project$complianceReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    where?: ComplianceReportWhereInput
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    cursor?: ComplianceReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplianceReportScalarFieldEnum | ComplianceReportScalarFieldEnum[]
  }

  /**
   * Project.riskAnalytics
   */
  export type Project$riskAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    where?: RiskAnalyticsWhereInput
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    cursor?: RiskAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RiskAnalyticsScalarFieldEnum | RiskAnalyticsScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ProcessFlow
   */

  export type AggregateProcessFlow = {
    _count: ProcessFlowCountAggregateOutputType | null
    _avg: ProcessFlowAvgAggregateOutputType | null
    _sum: ProcessFlowSumAggregateOutputType | null
    _min: ProcessFlowMinAggregateOutputType | null
    _max: ProcessFlowMaxAggregateOutputType | null
  }

  export type ProcessFlowAvgAggregateOutputType = {
    sequence: number | null
  }

  export type ProcessFlowSumAggregateOutputType = {
    sequence: number | null
  }

  export type ProcessFlowMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sequence: number | null
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ProcessFlowMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sequence: number | null
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type ProcessFlowCountAggregateOutputType = {
    id: number
    name: number
    description: number
    sequence: number
    input: number
    output: number
    resources: number
    controls: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type ProcessFlowAvgAggregateInputType = {
    sequence?: true
  }

  export type ProcessFlowSumAggregateInputType = {
    sequence?: true
  }

  export type ProcessFlowMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ProcessFlowMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type ProcessFlowCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type ProcessFlowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessFlow to aggregate.
     */
    where?: ProcessFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessFlows to fetch.
     */
    orderBy?: ProcessFlowOrderByWithRelationInput | ProcessFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcessFlows
    **/
    _count?: true | ProcessFlowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessFlowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessFlowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessFlowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessFlowMaxAggregateInputType
  }

  export type GetProcessFlowAggregateType<T extends ProcessFlowAggregateArgs> = {
        [P in keyof T & keyof AggregateProcessFlow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcessFlow[P]>
      : GetScalarType<T[P], AggregateProcessFlow[P]>
  }




  export type ProcessFlowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessFlowWhereInput
    orderBy?: ProcessFlowOrderByWithAggregationInput | ProcessFlowOrderByWithAggregationInput[]
    by: ProcessFlowScalarFieldEnum[] | ProcessFlowScalarFieldEnum
    having?: ProcessFlowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessFlowCountAggregateInputType | true
    _avg?: ProcessFlowAvgAggregateInputType
    _sum?: ProcessFlowSumAggregateInputType
    _min?: ProcessFlowMinAggregateInputType
    _max?: ProcessFlowMaxAggregateInputType
  }

  export type ProcessFlowGroupByOutputType = {
    id: string
    name: string
    description: string | null
    sequence: number
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    _count: ProcessFlowCountAggregateOutputType | null
    _avg: ProcessFlowAvgAggregateOutputType | null
    _sum: ProcessFlowSumAggregateOutputType | null
    _min: ProcessFlowMinAggregateOutputType | null
    _max: ProcessFlowMaxAggregateOutputType | null
  }

  type GetProcessFlowGroupByPayload<T extends ProcessFlowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessFlowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessFlowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessFlowGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessFlowGroupByOutputType[P]>
        }
      >
    >


  export type ProcessFlowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processes?: boolean | ProcessFlow$processesArgs<ExtArgs>
    fmeas?: boolean | ProcessFlow$fmeasArgs<ExtArgs>
    _count?: boolean | ProcessFlowCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processFlow"]>

  export type ProcessFlowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["processFlow"]>

  export type ProcessFlowSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }

  export type ProcessFlowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processes?: boolean | ProcessFlow$processesArgs<ExtArgs>
    fmeas?: boolean | ProcessFlow$fmeasArgs<ExtArgs>
    _count?: boolean | ProcessFlowCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcessFlowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProcessFlowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcessFlow"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      processes: Prisma.$ProcessPayload<ExtArgs>[]
      fmeas: Prisma.$FmeaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      sequence: number
      input: string | null
      output: string | null
      resources: string | null
      controls: string | null
      createdAt: Date
      updatedAt: Date
      projectId: string
    }, ExtArgs["result"]["processFlow"]>
    composites: {}
  }

  type ProcessFlowGetPayload<S extends boolean | null | undefined | ProcessFlowDefaultArgs> = $Result.GetResult<Prisma.$ProcessFlowPayload, S>

  type ProcessFlowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessFlowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessFlowCountAggregateInputType | true
    }

  export interface ProcessFlowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcessFlow'], meta: { name: 'ProcessFlow' } }
    /**
     * Find zero or one ProcessFlow that matches the filter.
     * @param {ProcessFlowFindUniqueArgs} args - Arguments to find a ProcessFlow
     * @example
     * // Get one ProcessFlow
     * const processFlow = await prisma.processFlow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessFlowFindUniqueArgs>(args: SelectSubset<T, ProcessFlowFindUniqueArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProcessFlow that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessFlowFindUniqueOrThrowArgs} args - Arguments to find a ProcessFlow
     * @example
     * // Get one ProcessFlow
     * const processFlow = await prisma.processFlow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessFlowFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessFlowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProcessFlow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowFindFirstArgs} args - Arguments to find a ProcessFlow
     * @example
     * // Get one ProcessFlow
     * const processFlow = await prisma.processFlow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessFlowFindFirstArgs>(args?: SelectSubset<T, ProcessFlowFindFirstArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProcessFlow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowFindFirstOrThrowArgs} args - Arguments to find a ProcessFlow
     * @example
     * // Get one ProcessFlow
     * const processFlow = await prisma.processFlow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessFlowFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessFlowFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProcessFlows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcessFlows
     * const processFlows = await prisma.processFlow.findMany()
     * 
     * // Get first 10 ProcessFlows
     * const processFlows = await prisma.processFlow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processFlowWithIdOnly = await prisma.processFlow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessFlowFindManyArgs>(args?: SelectSubset<T, ProcessFlowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProcessFlow.
     * @param {ProcessFlowCreateArgs} args - Arguments to create a ProcessFlow.
     * @example
     * // Create one ProcessFlow
     * const ProcessFlow = await prisma.processFlow.create({
     *   data: {
     *     // ... data to create a ProcessFlow
     *   }
     * })
     * 
     */
    create<T extends ProcessFlowCreateArgs>(args: SelectSubset<T, ProcessFlowCreateArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProcessFlows.
     * @param {ProcessFlowCreateManyArgs} args - Arguments to create many ProcessFlows.
     * @example
     * // Create many ProcessFlows
     * const processFlow = await prisma.processFlow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessFlowCreateManyArgs>(args?: SelectSubset<T, ProcessFlowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProcessFlows and returns the data saved in the database.
     * @param {ProcessFlowCreateManyAndReturnArgs} args - Arguments to create many ProcessFlows.
     * @example
     * // Create many ProcessFlows
     * const processFlow = await prisma.processFlow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProcessFlows and only return the `id`
     * const processFlowWithIdOnly = await prisma.processFlow.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessFlowCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessFlowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProcessFlow.
     * @param {ProcessFlowDeleteArgs} args - Arguments to delete one ProcessFlow.
     * @example
     * // Delete one ProcessFlow
     * const ProcessFlow = await prisma.processFlow.delete({
     *   where: {
     *     // ... filter to delete one ProcessFlow
     *   }
     * })
     * 
     */
    delete<T extends ProcessFlowDeleteArgs>(args: SelectSubset<T, ProcessFlowDeleteArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProcessFlow.
     * @param {ProcessFlowUpdateArgs} args - Arguments to update one ProcessFlow.
     * @example
     * // Update one ProcessFlow
     * const processFlow = await prisma.processFlow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessFlowUpdateArgs>(args: SelectSubset<T, ProcessFlowUpdateArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProcessFlows.
     * @param {ProcessFlowDeleteManyArgs} args - Arguments to filter ProcessFlows to delete.
     * @example
     * // Delete a few ProcessFlows
     * const { count } = await prisma.processFlow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessFlowDeleteManyArgs>(args?: SelectSubset<T, ProcessFlowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcessFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcessFlows
     * const processFlow = await prisma.processFlow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessFlowUpdateManyArgs>(args: SelectSubset<T, ProcessFlowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProcessFlow.
     * @param {ProcessFlowUpsertArgs} args - Arguments to update or create a ProcessFlow.
     * @example
     * // Update or create a ProcessFlow
     * const processFlow = await prisma.processFlow.upsert({
     *   create: {
     *     // ... data to create a ProcessFlow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcessFlow we want to update
     *   }
     * })
     */
    upsert<T extends ProcessFlowUpsertArgs>(args: SelectSubset<T, ProcessFlowUpsertArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProcessFlows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowCountArgs} args - Arguments to filter ProcessFlows to count.
     * @example
     * // Count the number of ProcessFlows
     * const count = await prisma.processFlow.count({
     *   where: {
     *     // ... the filter for the ProcessFlows we want to count
     *   }
     * })
    **/
    count<T extends ProcessFlowCountArgs>(
      args?: Subset<T, ProcessFlowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessFlowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcessFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessFlowAggregateArgs>(args: Subset<T, ProcessFlowAggregateArgs>): Prisma.PrismaPromise<GetProcessFlowAggregateType<T>>

    /**
     * Group by ProcessFlow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFlowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessFlowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessFlowGroupByArgs['orderBy'] }
        : { orderBy?: ProcessFlowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessFlowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessFlowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcessFlow model
   */
  readonly fields: ProcessFlowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcessFlow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessFlowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    processes<T extends ProcessFlow$processesArgs<ExtArgs> = {}>(args?: Subset<T, ProcessFlow$processesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany"> | Null>
    fmeas<T extends ProcessFlow$fmeasArgs<ExtArgs> = {}>(args?: Subset<T, ProcessFlow$fmeasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProcessFlow model
   */ 
  interface ProcessFlowFieldRefs {
    readonly id: FieldRef<"ProcessFlow", 'String'>
    readonly name: FieldRef<"ProcessFlow", 'String'>
    readonly description: FieldRef<"ProcessFlow", 'String'>
    readonly sequence: FieldRef<"ProcessFlow", 'Int'>
    readonly input: FieldRef<"ProcessFlow", 'String'>
    readonly output: FieldRef<"ProcessFlow", 'String'>
    readonly resources: FieldRef<"ProcessFlow", 'String'>
    readonly controls: FieldRef<"ProcessFlow", 'String'>
    readonly createdAt: FieldRef<"ProcessFlow", 'DateTime'>
    readonly updatedAt: FieldRef<"ProcessFlow", 'DateTime'>
    readonly projectId: FieldRef<"ProcessFlow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProcessFlow findUnique
   */
  export type ProcessFlowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter, which ProcessFlow to fetch.
     */
    where: ProcessFlowWhereUniqueInput
  }

  /**
   * ProcessFlow findUniqueOrThrow
   */
  export type ProcessFlowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter, which ProcessFlow to fetch.
     */
    where: ProcessFlowWhereUniqueInput
  }

  /**
   * ProcessFlow findFirst
   */
  export type ProcessFlowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter, which ProcessFlow to fetch.
     */
    where?: ProcessFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessFlows to fetch.
     */
    orderBy?: ProcessFlowOrderByWithRelationInput | ProcessFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessFlows.
     */
    cursor?: ProcessFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessFlows.
     */
    distinct?: ProcessFlowScalarFieldEnum | ProcessFlowScalarFieldEnum[]
  }

  /**
   * ProcessFlow findFirstOrThrow
   */
  export type ProcessFlowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter, which ProcessFlow to fetch.
     */
    where?: ProcessFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessFlows to fetch.
     */
    orderBy?: ProcessFlowOrderByWithRelationInput | ProcessFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcessFlows.
     */
    cursor?: ProcessFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessFlows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcessFlows.
     */
    distinct?: ProcessFlowScalarFieldEnum | ProcessFlowScalarFieldEnum[]
  }

  /**
   * ProcessFlow findMany
   */
  export type ProcessFlowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter, which ProcessFlows to fetch.
     */
    where?: ProcessFlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcessFlows to fetch.
     */
    orderBy?: ProcessFlowOrderByWithRelationInput | ProcessFlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcessFlows.
     */
    cursor?: ProcessFlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcessFlows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcessFlows.
     */
    skip?: number
    distinct?: ProcessFlowScalarFieldEnum | ProcessFlowScalarFieldEnum[]
  }

  /**
   * ProcessFlow create
   */
  export type ProcessFlowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcessFlow.
     */
    data: XOR<ProcessFlowCreateInput, ProcessFlowUncheckedCreateInput>
  }

  /**
   * ProcessFlow createMany
   */
  export type ProcessFlowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProcessFlows.
     */
    data: ProcessFlowCreateManyInput | ProcessFlowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProcessFlow createManyAndReturn
   */
  export type ProcessFlowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProcessFlows.
     */
    data: ProcessFlowCreateManyInput | ProcessFlowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProcessFlow update
   */
  export type ProcessFlowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcessFlow.
     */
    data: XOR<ProcessFlowUpdateInput, ProcessFlowUncheckedUpdateInput>
    /**
     * Choose, which ProcessFlow to update.
     */
    where: ProcessFlowWhereUniqueInput
  }

  /**
   * ProcessFlow updateMany
   */
  export type ProcessFlowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcessFlows.
     */
    data: XOR<ProcessFlowUpdateManyMutationInput, ProcessFlowUncheckedUpdateManyInput>
    /**
     * Filter which ProcessFlows to update
     */
    where?: ProcessFlowWhereInput
  }

  /**
   * ProcessFlow upsert
   */
  export type ProcessFlowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcessFlow to update in case it exists.
     */
    where: ProcessFlowWhereUniqueInput
    /**
     * In case the ProcessFlow found by the `where` argument doesn't exist, create a new ProcessFlow with this data.
     */
    create: XOR<ProcessFlowCreateInput, ProcessFlowUncheckedCreateInput>
    /**
     * In case the ProcessFlow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessFlowUpdateInput, ProcessFlowUncheckedUpdateInput>
  }

  /**
   * ProcessFlow delete
   */
  export type ProcessFlowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    /**
     * Filter which ProcessFlow to delete.
     */
    where: ProcessFlowWhereUniqueInput
  }

  /**
   * ProcessFlow deleteMany
   */
  export type ProcessFlowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcessFlows to delete
     */
    where?: ProcessFlowWhereInput
  }

  /**
   * ProcessFlow.processes
   */
  export type ProcessFlow$processesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    cursor?: ProcessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * ProcessFlow.fmeas
   */
  export type ProcessFlow$fmeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    cursor?: FmeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * ProcessFlow without action
   */
  export type ProcessFlowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
  }


  /**
   * Model Process
   */

  export type AggregateProcess = {
    _count: ProcessCountAggregateOutputType | null
    _avg: ProcessAvgAggregateOutputType | null
    _sum: ProcessSumAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  export type ProcessAvgAggregateOutputType = {
    sequence: number | null
  }

  export type ProcessSumAggregateOutputType = {
    sequence: number | null
  }

  export type ProcessMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sequence: number | null
    processType: string | null
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date | null
    updatedAt: Date | null
    processFlowId: string | null
  }

  export type ProcessMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    sequence: number | null
    processType: string | null
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date | null
    updatedAt: Date | null
    processFlowId: string | null
  }

  export type ProcessCountAggregateOutputType = {
    id: number
    name: number
    description: number
    sequence: number
    processType: number
    input: number
    output: number
    resources: number
    controls: number
    createdAt: number
    updatedAt: number
    processFlowId: number
    _all: number
  }


  export type ProcessAvgAggregateInputType = {
    sequence?: true
  }

  export type ProcessSumAggregateInputType = {
    sequence?: true
  }

  export type ProcessMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    processType?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    processFlowId?: true
  }

  export type ProcessMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    processType?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    processFlowId?: true
  }

  export type ProcessCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    sequence?: true
    processType?: true
    input?: true
    output?: true
    resources?: true
    controls?: true
    createdAt?: true
    updatedAt?: true
    processFlowId?: true
    _all?: true
  }

  export type ProcessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Process to aggregate.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Processes
    **/
    _count?: true | ProcessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcessMaxAggregateInputType
  }

  export type GetProcessAggregateType<T extends ProcessAggregateArgs> = {
        [P in keyof T & keyof AggregateProcess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcess[P]>
      : GetScalarType<T[P], AggregateProcess[P]>
  }




  export type ProcessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcessWhereInput
    orderBy?: ProcessOrderByWithAggregationInput | ProcessOrderByWithAggregationInput[]
    by: ProcessScalarFieldEnum[] | ProcessScalarFieldEnum
    having?: ProcessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcessCountAggregateInputType | true
    _avg?: ProcessAvgAggregateInputType
    _sum?: ProcessSumAggregateInputType
    _min?: ProcessMinAggregateInputType
    _max?: ProcessMaxAggregateInputType
  }

  export type ProcessGroupByOutputType = {
    id: string
    name: string
    description: string | null
    sequence: number
    processType: string | null
    input: string | null
    output: string | null
    resources: string | null
    controls: string | null
    createdAt: Date
    updatedAt: Date
    processFlowId: string
    _count: ProcessCountAggregateOutputType | null
    _avg: ProcessAvgAggregateOutputType | null
    _sum: ProcessSumAggregateOutputType | null
    _min: ProcessMinAggregateOutputType | null
    _max: ProcessMaxAggregateOutputType | null
  }

  type GetProcessGroupByPayload<T extends ProcessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcessGroupByOutputType[P]>
            : GetScalarType<T[P], ProcessGroupByOutputType[P]>
        }
      >
    >


  export type ProcessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    processType?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    processFlowId?: boolean
    processFlow?: boolean | ProcessFlowDefaultArgs<ExtArgs>
    failureModes?: boolean | Process$failureModesArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    processType?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    processFlowId?: boolean
    processFlow?: boolean | ProcessFlowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["process"]>

  export type ProcessSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    sequence?: boolean
    processType?: boolean
    input?: boolean
    output?: boolean
    resources?: boolean
    controls?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    processFlowId?: boolean
  }

  export type ProcessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processFlow?: boolean | ProcessFlowDefaultArgs<ExtArgs>
    failureModes?: boolean | Process$failureModesArgs<ExtArgs>
    _count?: boolean | ProcessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProcessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    processFlow?: boolean | ProcessFlowDefaultArgs<ExtArgs>
  }

  export type $ProcessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Process"
    objects: {
      processFlow: Prisma.$ProcessFlowPayload<ExtArgs>
      failureModes: Prisma.$FailureModePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      sequence: number
      processType: string | null
      input: string | null
      output: string | null
      resources: string | null
      controls: string | null
      createdAt: Date
      updatedAt: Date
      processFlowId: string
    }, ExtArgs["result"]["process"]>
    composites: {}
  }

  type ProcessGetPayload<S extends boolean | null | undefined | ProcessDefaultArgs> = $Result.GetResult<Prisma.$ProcessPayload, S>

  type ProcessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcessCountAggregateInputType | true
    }

  export interface ProcessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Process'], meta: { name: 'Process' } }
    /**
     * Find zero or one Process that matches the filter.
     * @param {ProcessFindUniqueArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProcessFindUniqueArgs>(args: SelectSubset<T, ProcessFindUniqueArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Process that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProcessFindUniqueOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProcessFindUniqueOrThrowArgs>(args: SelectSubset<T, ProcessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Process that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProcessFindFirstArgs>(args?: SelectSubset<T, ProcessFindFirstArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Process that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindFirstOrThrowArgs} args - Arguments to find a Process
     * @example
     * // Get one Process
     * const process = await prisma.process.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProcessFindFirstOrThrowArgs>(args?: SelectSubset<T, ProcessFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Processes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Processes
     * const processes = await prisma.process.findMany()
     * 
     * // Get first 10 Processes
     * const processes = await prisma.process.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const processWithIdOnly = await prisma.process.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProcessFindManyArgs>(args?: SelectSubset<T, ProcessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Process.
     * @param {ProcessCreateArgs} args - Arguments to create a Process.
     * @example
     * // Create one Process
     * const Process = await prisma.process.create({
     *   data: {
     *     // ... data to create a Process
     *   }
     * })
     * 
     */
    create<T extends ProcessCreateArgs>(args: SelectSubset<T, ProcessCreateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Processes.
     * @param {ProcessCreateManyArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProcessCreateManyArgs>(args?: SelectSubset<T, ProcessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Processes and returns the data saved in the database.
     * @param {ProcessCreateManyAndReturnArgs} args - Arguments to create many Processes.
     * @example
     * // Create many Processes
     * const process = await prisma.process.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Processes and only return the `id`
     * const processWithIdOnly = await prisma.process.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProcessCreateManyAndReturnArgs>(args?: SelectSubset<T, ProcessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Process.
     * @param {ProcessDeleteArgs} args - Arguments to delete one Process.
     * @example
     * // Delete one Process
     * const Process = await prisma.process.delete({
     *   where: {
     *     // ... filter to delete one Process
     *   }
     * })
     * 
     */
    delete<T extends ProcessDeleteArgs>(args: SelectSubset<T, ProcessDeleteArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Process.
     * @param {ProcessUpdateArgs} args - Arguments to update one Process.
     * @example
     * // Update one Process
     * const process = await prisma.process.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProcessUpdateArgs>(args: SelectSubset<T, ProcessUpdateArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Processes.
     * @param {ProcessDeleteManyArgs} args - Arguments to filter Processes to delete.
     * @example
     * // Delete a few Processes
     * const { count } = await prisma.process.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProcessDeleteManyArgs>(args?: SelectSubset<T, ProcessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Processes
     * const process = await prisma.process.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProcessUpdateManyArgs>(args: SelectSubset<T, ProcessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Process.
     * @param {ProcessUpsertArgs} args - Arguments to update or create a Process.
     * @example
     * // Update or create a Process
     * const process = await prisma.process.upsert({
     *   create: {
     *     // ... data to create a Process
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Process we want to update
     *   }
     * })
     */
    upsert<T extends ProcessUpsertArgs>(args: SelectSubset<T, ProcessUpsertArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Processes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessCountArgs} args - Arguments to filter Processes to count.
     * @example
     * // Count the number of Processes
     * const count = await prisma.process.count({
     *   where: {
     *     // ... the filter for the Processes we want to count
     *   }
     * })
    **/
    count<T extends ProcessCountArgs>(
      args?: Subset<T, ProcessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcessAggregateArgs>(args: Subset<T, ProcessAggregateArgs>): Prisma.PrismaPromise<GetProcessAggregateType<T>>

    /**
     * Group by Process.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcessGroupByArgs['orderBy'] }
        : { orderBy?: ProcessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Process model
   */
  readonly fields: ProcessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Process.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    processFlow<T extends ProcessFlowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcessFlowDefaultArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    failureModes<T extends Process$failureModesArgs<ExtArgs> = {}>(args?: Subset<T, Process$failureModesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Process model
   */ 
  interface ProcessFieldRefs {
    readonly id: FieldRef<"Process", 'String'>
    readonly name: FieldRef<"Process", 'String'>
    readonly description: FieldRef<"Process", 'String'>
    readonly sequence: FieldRef<"Process", 'Int'>
    readonly processType: FieldRef<"Process", 'String'>
    readonly input: FieldRef<"Process", 'String'>
    readonly output: FieldRef<"Process", 'String'>
    readonly resources: FieldRef<"Process", 'String'>
    readonly controls: FieldRef<"Process", 'String'>
    readonly createdAt: FieldRef<"Process", 'DateTime'>
    readonly updatedAt: FieldRef<"Process", 'DateTime'>
    readonly processFlowId: FieldRef<"Process", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Process findUnique
   */
  export type ProcessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findUniqueOrThrow
   */
  export type ProcessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process findFirst
   */
  export type ProcessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findFirstOrThrow
   */
  export type ProcessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Process to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Processes.
     */
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process findMany
   */
  export type ProcessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter, which Processes to fetch.
     */
    where?: ProcessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Processes to fetch.
     */
    orderBy?: ProcessOrderByWithRelationInput | ProcessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Processes.
     */
    cursor?: ProcessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Processes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Processes.
     */
    skip?: number
    distinct?: ProcessScalarFieldEnum | ProcessScalarFieldEnum[]
  }

  /**
   * Process create
   */
  export type ProcessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to create a Process.
     */
    data: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
  }

  /**
   * Process createMany
   */
  export type ProcessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Process createManyAndReturn
   */
  export type ProcessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Processes.
     */
    data: ProcessCreateManyInput | ProcessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Process update
   */
  export type ProcessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The data needed to update a Process.
     */
    data: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
    /**
     * Choose, which Process to update.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process updateMany
   */
  export type ProcessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Processes.
     */
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyInput>
    /**
     * Filter which Processes to update
     */
    where?: ProcessWhereInput
  }

  /**
   * Process upsert
   */
  export type ProcessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * The filter to search for the Process to update in case it exists.
     */
    where: ProcessWhereUniqueInput
    /**
     * In case the Process found by the `where` argument doesn't exist, create a new Process with this data.
     */
    create: XOR<ProcessCreateInput, ProcessUncheckedCreateInput>
    /**
     * In case the Process was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcessUpdateInput, ProcessUncheckedUpdateInput>
  }

  /**
   * Process delete
   */
  export type ProcessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    /**
     * Filter which Process to delete.
     */
    where: ProcessWhereUniqueInput
  }

  /**
   * Process deleteMany
   */
  export type ProcessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Processes to delete
     */
    where?: ProcessWhereInput
  }

  /**
   * Process.failureModes
   */
  export type Process$failureModesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    where?: FailureModeWhereInput
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    cursor?: FailureModeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FailureModeScalarFieldEnum | FailureModeScalarFieldEnum[]
  }

  /**
   * Process without action
   */
  export type ProcessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
  }


  /**
   * Model Fmea
   */

  export type AggregateFmea = {
    _count: FmeaCountAggregateOutputType | null
    _min: FmeaMinAggregateOutputType | null
    _max: FmeaMaxAggregateOutputType | null
  }

  export type FmeaMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    fmeaType: $Enums.FmeaType | null
    status: $Enums.FmeaStatus | null
    version: string | null
    approvalDate: Date | null
    nextReviewDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    processFlowId: string | null
    createdById: string | null
  }

  export type FmeaMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    fmeaType: $Enums.FmeaType | null
    status: $Enums.FmeaStatus | null
    version: string | null
    approvalDate: Date | null
    nextReviewDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    processFlowId: string | null
    createdById: string | null
  }

  export type FmeaCountAggregateOutputType = {
    id: number
    name: number
    description: number
    fmeaType: number
    status: number
    version: number
    approvalDate: number
    nextReviewDate: number
    createdAt: number
    updatedAt: number
    projectId: number
    processFlowId: number
    createdById: number
    _all: number
  }


  export type FmeaMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fmeaType?: true
    status?: true
    version?: true
    approvalDate?: true
    nextReviewDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    processFlowId?: true
    createdById?: true
  }

  export type FmeaMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fmeaType?: true
    status?: true
    version?: true
    approvalDate?: true
    nextReviewDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    processFlowId?: true
    createdById?: true
  }

  export type FmeaCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    fmeaType?: true
    status?: true
    version?: true
    approvalDate?: true
    nextReviewDate?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    processFlowId?: true
    createdById?: true
    _all?: true
  }

  export type FmeaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fmea to aggregate.
     */
    where?: FmeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fmeas to fetch.
     */
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FmeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fmeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fmeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fmeas
    **/
    _count?: true | FmeaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FmeaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FmeaMaxAggregateInputType
  }

  export type GetFmeaAggregateType<T extends FmeaAggregateArgs> = {
        [P in keyof T & keyof AggregateFmea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFmea[P]>
      : GetScalarType<T[P], AggregateFmea[P]>
  }




  export type FmeaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FmeaWhereInput
    orderBy?: FmeaOrderByWithAggregationInput | FmeaOrderByWithAggregationInput[]
    by: FmeaScalarFieldEnum[] | FmeaScalarFieldEnum
    having?: FmeaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FmeaCountAggregateInputType | true
    _min?: FmeaMinAggregateInputType
    _max?: FmeaMaxAggregateInputType
  }

  export type FmeaGroupByOutputType = {
    id: string
    name: string
    description: string | null
    fmeaType: $Enums.FmeaType
    status: $Enums.FmeaStatus
    version: string
    approvalDate: Date | null
    nextReviewDate: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    processFlowId: string | null
    createdById: string
    _count: FmeaCountAggregateOutputType | null
    _min: FmeaMinAggregateOutputType | null
    _max: FmeaMaxAggregateOutputType | null
  }

  type GetFmeaGroupByPayload<T extends FmeaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FmeaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FmeaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FmeaGroupByOutputType[P]>
            : GetScalarType<T[P], FmeaGroupByOutputType[P]>
        }
      >
    >


  export type FmeaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fmeaType?: boolean
    status?: boolean
    version?: boolean
    approvalDate?: boolean
    nextReviewDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    processFlowId?: boolean
    createdById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processFlow?: boolean | Fmea$processFlowArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    failureModes?: boolean | Fmea$failureModesArgs<ExtArgs>
    controlPlans?: boolean | Fmea$controlPlansArgs<ExtArgs>
    comments?: boolean | Fmea$commentsArgs<ExtArgs>
    riskAnalytics?: boolean | Fmea$riskAnalyticsArgs<ExtArgs>
    _count?: boolean | FmeaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fmea"]>

  export type FmeaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    fmeaType?: boolean
    status?: boolean
    version?: boolean
    approvalDate?: boolean
    nextReviewDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    processFlowId?: boolean
    createdById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processFlow?: boolean | Fmea$processFlowArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fmea"]>

  export type FmeaSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    fmeaType?: boolean
    status?: boolean
    version?: boolean
    approvalDate?: boolean
    nextReviewDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    processFlowId?: boolean
    createdById?: boolean
  }

  export type FmeaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processFlow?: boolean | Fmea$processFlowArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    failureModes?: boolean | Fmea$failureModesArgs<ExtArgs>
    controlPlans?: boolean | Fmea$controlPlansArgs<ExtArgs>
    comments?: boolean | Fmea$commentsArgs<ExtArgs>
    riskAnalytics?: boolean | Fmea$riskAnalyticsArgs<ExtArgs>
    _count?: boolean | FmeaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FmeaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    processFlow?: boolean | Fmea$processFlowArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FmeaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fmea"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      processFlow: Prisma.$ProcessFlowPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      failureModes: Prisma.$FailureModePayload<ExtArgs>[]
      controlPlans: Prisma.$ControlPlanPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      riskAnalytics: Prisma.$RiskAnalyticsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      fmeaType: $Enums.FmeaType
      status: $Enums.FmeaStatus
      version: string
      approvalDate: Date | null
      nextReviewDate: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      processFlowId: string | null
      createdById: string
    }, ExtArgs["result"]["fmea"]>
    composites: {}
  }

  type FmeaGetPayload<S extends boolean | null | undefined | FmeaDefaultArgs> = $Result.GetResult<Prisma.$FmeaPayload, S>

  type FmeaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FmeaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FmeaCountAggregateInputType | true
    }

  export interface FmeaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fmea'], meta: { name: 'Fmea' } }
    /**
     * Find zero or one Fmea that matches the filter.
     * @param {FmeaFindUniqueArgs} args - Arguments to find a Fmea
     * @example
     * // Get one Fmea
     * const fmea = await prisma.fmea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FmeaFindUniqueArgs>(args: SelectSubset<T, FmeaFindUniqueArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fmea that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FmeaFindUniqueOrThrowArgs} args - Arguments to find a Fmea
     * @example
     * // Get one Fmea
     * const fmea = await prisma.fmea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FmeaFindUniqueOrThrowArgs>(args: SelectSubset<T, FmeaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fmea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaFindFirstArgs} args - Arguments to find a Fmea
     * @example
     * // Get one Fmea
     * const fmea = await prisma.fmea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FmeaFindFirstArgs>(args?: SelectSubset<T, FmeaFindFirstArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fmea that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaFindFirstOrThrowArgs} args - Arguments to find a Fmea
     * @example
     * // Get one Fmea
     * const fmea = await prisma.fmea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FmeaFindFirstOrThrowArgs>(args?: SelectSubset<T, FmeaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Fmeas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fmeas
     * const fmeas = await prisma.fmea.findMany()
     * 
     * // Get first 10 Fmeas
     * const fmeas = await prisma.fmea.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fmeaWithIdOnly = await prisma.fmea.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FmeaFindManyArgs>(args?: SelectSubset<T, FmeaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fmea.
     * @param {FmeaCreateArgs} args - Arguments to create a Fmea.
     * @example
     * // Create one Fmea
     * const Fmea = await prisma.fmea.create({
     *   data: {
     *     // ... data to create a Fmea
     *   }
     * })
     * 
     */
    create<T extends FmeaCreateArgs>(args: SelectSubset<T, FmeaCreateArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Fmeas.
     * @param {FmeaCreateManyArgs} args - Arguments to create many Fmeas.
     * @example
     * // Create many Fmeas
     * const fmea = await prisma.fmea.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FmeaCreateManyArgs>(args?: SelectSubset<T, FmeaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fmeas and returns the data saved in the database.
     * @param {FmeaCreateManyAndReturnArgs} args - Arguments to create many Fmeas.
     * @example
     * // Create many Fmeas
     * const fmea = await prisma.fmea.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fmeas and only return the `id`
     * const fmeaWithIdOnly = await prisma.fmea.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FmeaCreateManyAndReturnArgs>(args?: SelectSubset<T, FmeaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fmea.
     * @param {FmeaDeleteArgs} args - Arguments to delete one Fmea.
     * @example
     * // Delete one Fmea
     * const Fmea = await prisma.fmea.delete({
     *   where: {
     *     // ... filter to delete one Fmea
     *   }
     * })
     * 
     */
    delete<T extends FmeaDeleteArgs>(args: SelectSubset<T, FmeaDeleteArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fmea.
     * @param {FmeaUpdateArgs} args - Arguments to update one Fmea.
     * @example
     * // Update one Fmea
     * const fmea = await prisma.fmea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FmeaUpdateArgs>(args: SelectSubset<T, FmeaUpdateArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Fmeas.
     * @param {FmeaDeleteManyArgs} args - Arguments to filter Fmeas to delete.
     * @example
     * // Delete a few Fmeas
     * const { count } = await prisma.fmea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FmeaDeleteManyArgs>(args?: SelectSubset<T, FmeaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fmeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fmeas
     * const fmea = await prisma.fmea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FmeaUpdateManyArgs>(args: SelectSubset<T, FmeaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fmea.
     * @param {FmeaUpsertArgs} args - Arguments to update or create a Fmea.
     * @example
     * // Update or create a Fmea
     * const fmea = await prisma.fmea.upsert({
     *   create: {
     *     // ... data to create a Fmea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fmea we want to update
     *   }
     * })
     */
    upsert<T extends FmeaUpsertArgs>(args: SelectSubset<T, FmeaUpsertArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Fmeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaCountArgs} args - Arguments to filter Fmeas to count.
     * @example
     * // Count the number of Fmeas
     * const count = await prisma.fmea.count({
     *   where: {
     *     // ... the filter for the Fmeas we want to count
     *   }
     * })
    **/
    count<T extends FmeaCountArgs>(
      args?: Subset<T, FmeaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FmeaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fmea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FmeaAggregateArgs>(args: Subset<T, FmeaAggregateArgs>): Prisma.PrismaPromise<GetFmeaAggregateType<T>>

    /**
     * Group by Fmea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FmeaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FmeaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FmeaGroupByArgs['orderBy'] }
        : { orderBy?: FmeaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FmeaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFmeaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fmea model
   */
  readonly fields: FmeaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fmea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FmeaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    processFlow<T extends Fmea$processFlowArgs<ExtArgs> = {}>(args?: Subset<T, Fmea$processFlowArgs<ExtArgs>>): Prisma__ProcessFlowClient<$Result.GetResult<Prisma.$ProcessFlowPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    failureModes<T extends Fmea$failureModesArgs<ExtArgs> = {}>(args?: Subset<T, Fmea$failureModesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findMany"> | Null>
    controlPlans<T extends Fmea$controlPlansArgs<ExtArgs> = {}>(args?: Subset<T, Fmea$controlPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends Fmea$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Fmea$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    riskAnalytics<T extends Fmea$riskAnalyticsArgs<ExtArgs> = {}>(args?: Subset<T, Fmea$riskAnalyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fmea model
   */ 
  interface FmeaFieldRefs {
    readonly id: FieldRef<"Fmea", 'String'>
    readonly name: FieldRef<"Fmea", 'String'>
    readonly description: FieldRef<"Fmea", 'String'>
    readonly fmeaType: FieldRef<"Fmea", 'FmeaType'>
    readonly status: FieldRef<"Fmea", 'FmeaStatus'>
    readonly version: FieldRef<"Fmea", 'String'>
    readonly approvalDate: FieldRef<"Fmea", 'DateTime'>
    readonly nextReviewDate: FieldRef<"Fmea", 'DateTime'>
    readonly createdAt: FieldRef<"Fmea", 'DateTime'>
    readonly updatedAt: FieldRef<"Fmea", 'DateTime'>
    readonly projectId: FieldRef<"Fmea", 'String'>
    readonly processFlowId: FieldRef<"Fmea", 'String'>
    readonly createdById: FieldRef<"Fmea", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Fmea findUnique
   */
  export type FmeaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter, which Fmea to fetch.
     */
    where: FmeaWhereUniqueInput
  }

  /**
   * Fmea findUniqueOrThrow
   */
  export type FmeaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter, which Fmea to fetch.
     */
    where: FmeaWhereUniqueInput
  }

  /**
   * Fmea findFirst
   */
  export type FmeaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter, which Fmea to fetch.
     */
    where?: FmeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fmeas to fetch.
     */
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fmeas.
     */
    cursor?: FmeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fmeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fmeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fmeas.
     */
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * Fmea findFirstOrThrow
   */
  export type FmeaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter, which Fmea to fetch.
     */
    where?: FmeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fmeas to fetch.
     */
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fmeas.
     */
    cursor?: FmeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fmeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fmeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fmeas.
     */
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * Fmea findMany
   */
  export type FmeaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter, which Fmeas to fetch.
     */
    where?: FmeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fmeas to fetch.
     */
    orderBy?: FmeaOrderByWithRelationInput | FmeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fmeas.
     */
    cursor?: FmeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fmeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fmeas.
     */
    skip?: number
    distinct?: FmeaScalarFieldEnum | FmeaScalarFieldEnum[]
  }

  /**
   * Fmea create
   */
  export type FmeaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * The data needed to create a Fmea.
     */
    data: XOR<FmeaCreateInput, FmeaUncheckedCreateInput>
  }

  /**
   * Fmea createMany
   */
  export type FmeaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fmeas.
     */
    data: FmeaCreateManyInput | FmeaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fmea createManyAndReturn
   */
  export type FmeaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Fmeas.
     */
    data: FmeaCreateManyInput | FmeaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Fmea update
   */
  export type FmeaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * The data needed to update a Fmea.
     */
    data: XOR<FmeaUpdateInput, FmeaUncheckedUpdateInput>
    /**
     * Choose, which Fmea to update.
     */
    where: FmeaWhereUniqueInput
  }

  /**
   * Fmea updateMany
   */
  export type FmeaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fmeas.
     */
    data: XOR<FmeaUpdateManyMutationInput, FmeaUncheckedUpdateManyInput>
    /**
     * Filter which Fmeas to update
     */
    where?: FmeaWhereInput
  }

  /**
   * Fmea upsert
   */
  export type FmeaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * The filter to search for the Fmea to update in case it exists.
     */
    where: FmeaWhereUniqueInput
    /**
     * In case the Fmea found by the `where` argument doesn't exist, create a new Fmea with this data.
     */
    create: XOR<FmeaCreateInput, FmeaUncheckedCreateInput>
    /**
     * In case the Fmea was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FmeaUpdateInput, FmeaUncheckedUpdateInput>
  }

  /**
   * Fmea delete
   */
  export type FmeaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    /**
     * Filter which Fmea to delete.
     */
    where: FmeaWhereUniqueInput
  }

  /**
   * Fmea deleteMany
   */
  export type FmeaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fmeas to delete
     */
    where?: FmeaWhereInput
  }

  /**
   * Fmea.processFlow
   */
  export type Fmea$processFlowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcessFlow
     */
    select?: ProcessFlowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessFlowInclude<ExtArgs> | null
    where?: ProcessFlowWhereInput
  }

  /**
   * Fmea.failureModes
   */
  export type Fmea$failureModesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    where?: FailureModeWhereInput
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    cursor?: FailureModeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FailureModeScalarFieldEnum | FailureModeScalarFieldEnum[]
  }

  /**
   * Fmea.controlPlans
   */
  export type Fmea$controlPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    where?: ControlPlanWhereInput
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    cursor?: ControlPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlPlanScalarFieldEnum | ControlPlanScalarFieldEnum[]
  }

  /**
   * Fmea.comments
   */
  export type Fmea$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Fmea.riskAnalytics
   */
  export type Fmea$riskAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    where?: RiskAnalyticsWhereInput
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    cursor?: RiskAnalyticsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RiskAnalyticsScalarFieldEnum | RiskAnalyticsScalarFieldEnum[]
  }

  /**
   * Fmea without action
   */
  export type FmeaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
  }


  /**
   * Model FailureMode
   */

  export type AggregateFailureMode = {
    _count: FailureModeCountAggregateOutputType | null
    _avg: FailureModeAvgAggregateOutputType | null
    _sum: FailureModeSumAggregateOutputType | null
    _min: FailureModeMinAggregateOutputType | null
    _max: FailureModeMaxAggregateOutputType | null
  }

  export type FailureModeAvgAggregateOutputType = {
    severity: number | null
    occurrence: number | null
    detection: number | null
    rpn: number | null
    revised_severity: number | null
    revised_occurrence: number | null
    revised_detection: number | null
    revised_rpn: number | null
  }

  export type FailureModeSumAggregateOutputType = {
    severity: number | null
    occurrence: number | null
    detection: number | null
    rpn: number | null
    revised_severity: number | null
    revised_occurrence: number | null
    revised_detection: number | null
    revised_rpn: number | null
  }

  export type FailureModeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    potential_failure: string | null
    potential_effects: string | null
    severity: number | null
    potential_causes: string | null
    occurrence: number | null
    current_controls: string | null
    detection: number | null
    rpn: number | null
    recommended_actions: string | null
    responsibility: string | null
    target_date: Date | null
    actions_taken: string | null
    revised_severity: number | null
    revised_occurrence: number | null
    revised_detection: number | null
    revised_rpn: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fmeaId: string | null
    processId: string | null
  }

  export type FailureModeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    potential_failure: string | null
    potential_effects: string | null
    severity: number | null
    potential_causes: string | null
    occurrence: number | null
    current_controls: string | null
    detection: number | null
    rpn: number | null
    recommended_actions: string | null
    responsibility: string | null
    target_date: Date | null
    actions_taken: string | null
    revised_severity: number | null
    revised_occurrence: number | null
    revised_detection: number | null
    revised_rpn: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fmeaId: string | null
    processId: string | null
  }

  export type FailureModeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    potential_failure: number
    potential_effects: number
    severity: number
    potential_causes: number
    occurrence: number
    current_controls: number
    detection: number
    rpn: number
    recommended_actions: number
    responsibility: number
    target_date: number
    actions_taken: number
    revised_severity: number
    revised_occurrence: number
    revised_detection: number
    revised_rpn: number
    createdAt: number
    updatedAt: number
    fmeaId: number
    processId: number
    _all: number
  }


  export type FailureModeAvgAggregateInputType = {
    severity?: true
    occurrence?: true
    detection?: true
    rpn?: true
    revised_severity?: true
    revised_occurrence?: true
    revised_detection?: true
    revised_rpn?: true
  }

  export type FailureModeSumAggregateInputType = {
    severity?: true
    occurrence?: true
    detection?: true
    rpn?: true
    revised_severity?: true
    revised_occurrence?: true
    revised_detection?: true
    revised_rpn?: true
  }

  export type FailureModeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    potential_failure?: true
    potential_effects?: true
    severity?: true
    potential_causes?: true
    occurrence?: true
    current_controls?: true
    detection?: true
    rpn?: true
    recommended_actions?: true
    responsibility?: true
    target_date?: true
    actions_taken?: true
    revised_severity?: true
    revised_occurrence?: true
    revised_detection?: true
    revised_rpn?: true
    createdAt?: true
    updatedAt?: true
    fmeaId?: true
    processId?: true
  }

  export type FailureModeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    potential_failure?: true
    potential_effects?: true
    severity?: true
    potential_causes?: true
    occurrence?: true
    current_controls?: true
    detection?: true
    rpn?: true
    recommended_actions?: true
    responsibility?: true
    target_date?: true
    actions_taken?: true
    revised_severity?: true
    revised_occurrence?: true
    revised_detection?: true
    revised_rpn?: true
    createdAt?: true
    updatedAt?: true
    fmeaId?: true
    processId?: true
  }

  export type FailureModeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    potential_failure?: true
    potential_effects?: true
    severity?: true
    potential_causes?: true
    occurrence?: true
    current_controls?: true
    detection?: true
    rpn?: true
    recommended_actions?: true
    responsibility?: true
    target_date?: true
    actions_taken?: true
    revised_severity?: true
    revised_occurrence?: true
    revised_detection?: true
    revised_rpn?: true
    createdAt?: true
    updatedAt?: true
    fmeaId?: true
    processId?: true
    _all?: true
  }

  export type FailureModeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailureMode to aggregate.
     */
    where?: FailureModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailureModes to fetch.
     */
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FailureModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailureModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailureModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FailureModes
    **/
    _count?: true | FailureModeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FailureModeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FailureModeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FailureModeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FailureModeMaxAggregateInputType
  }

  export type GetFailureModeAggregateType<T extends FailureModeAggregateArgs> = {
        [P in keyof T & keyof AggregateFailureMode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFailureMode[P]>
      : GetScalarType<T[P], AggregateFailureMode[P]>
  }




  export type FailureModeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FailureModeWhereInput
    orderBy?: FailureModeOrderByWithAggregationInput | FailureModeOrderByWithAggregationInput[]
    by: FailureModeScalarFieldEnum[] | FailureModeScalarFieldEnum
    having?: FailureModeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FailureModeCountAggregateInputType | true
    _avg?: FailureModeAvgAggregateInputType
    _sum?: FailureModeSumAggregateInputType
    _min?: FailureModeMinAggregateInputType
    _max?: FailureModeMaxAggregateInputType
  }

  export type FailureModeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    potential_failure: string
    potential_effects: string
    severity: number
    potential_causes: string
    occurrence: number
    current_controls: string | null
    detection: number
    rpn: number
    recommended_actions: string | null
    responsibility: string | null
    target_date: Date | null
    actions_taken: string | null
    revised_severity: number | null
    revised_occurrence: number | null
    revised_detection: number | null
    revised_rpn: number | null
    createdAt: Date
    updatedAt: Date
    fmeaId: string
    processId: string | null
    _count: FailureModeCountAggregateOutputType | null
    _avg: FailureModeAvgAggregateOutputType | null
    _sum: FailureModeSumAggregateOutputType | null
    _min: FailureModeMinAggregateOutputType | null
    _max: FailureModeMaxAggregateOutputType | null
  }

  type GetFailureModeGroupByPayload<T extends FailureModeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FailureModeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FailureModeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FailureModeGroupByOutputType[P]>
            : GetScalarType<T[P], FailureModeGroupByOutputType[P]>
        }
      >
    >


  export type FailureModeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    potential_failure?: boolean
    potential_effects?: boolean
    severity?: boolean
    potential_causes?: boolean
    occurrence?: boolean
    current_controls?: boolean
    detection?: boolean
    rpn?: boolean
    recommended_actions?: boolean
    responsibility?: boolean
    target_date?: boolean
    actions_taken?: boolean
    revised_severity?: boolean
    revised_occurrence?: boolean
    revised_detection?: boolean
    revised_rpn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fmeaId?: boolean
    processId?: boolean
    fmea?: boolean | FmeaDefaultArgs<ExtArgs>
    process?: boolean | FailureMode$processArgs<ExtArgs>
    actionItems?: boolean | FailureMode$actionItemsArgs<ExtArgs>
    comments?: boolean | FailureMode$commentsArgs<ExtArgs>
    _count?: boolean | FailureModeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["failureMode"]>

  export type FailureModeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    potential_failure?: boolean
    potential_effects?: boolean
    severity?: boolean
    potential_causes?: boolean
    occurrence?: boolean
    current_controls?: boolean
    detection?: boolean
    rpn?: boolean
    recommended_actions?: boolean
    responsibility?: boolean
    target_date?: boolean
    actions_taken?: boolean
    revised_severity?: boolean
    revised_occurrence?: boolean
    revised_detection?: boolean
    revised_rpn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fmeaId?: boolean
    processId?: boolean
    fmea?: boolean | FmeaDefaultArgs<ExtArgs>
    process?: boolean | FailureMode$processArgs<ExtArgs>
  }, ExtArgs["result"]["failureMode"]>

  export type FailureModeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    potential_failure?: boolean
    potential_effects?: boolean
    severity?: boolean
    potential_causes?: boolean
    occurrence?: boolean
    current_controls?: boolean
    detection?: boolean
    rpn?: boolean
    recommended_actions?: boolean
    responsibility?: boolean
    target_date?: boolean
    actions_taken?: boolean
    revised_severity?: boolean
    revised_occurrence?: boolean
    revised_detection?: boolean
    revised_rpn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fmeaId?: boolean
    processId?: boolean
  }

  export type FailureModeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fmea?: boolean | FmeaDefaultArgs<ExtArgs>
    process?: boolean | FailureMode$processArgs<ExtArgs>
    actionItems?: boolean | FailureMode$actionItemsArgs<ExtArgs>
    comments?: boolean | FailureMode$commentsArgs<ExtArgs>
    _count?: boolean | FailureModeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FailureModeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fmea?: boolean | FmeaDefaultArgs<ExtArgs>
    process?: boolean | FailureMode$processArgs<ExtArgs>
  }

  export type $FailureModePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FailureMode"
    objects: {
      fmea: Prisma.$FmeaPayload<ExtArgs>
      process: Prisma.$ProcessPayload<ExtArgs> | null
      actionItems: Prisma.$ActionItemPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      potential_failure: string
      potential_effects: string
      severity: number
      potential_causes: string
      occurrence: number
      current_controls: string | null
      detection: number
      rpn: number
      recommended_actions: string | null
      responsibility: string | null
      target_date: Date | null
      actions_taken: string | null
      revised_severity: number | null
      revised_occurrence: number | null
      revised_detection: number | null
      revised_rpn: number | null
      createdAt: Date
      updatedAt: Date
      fmeaId: string
      processId: string | null
    }, ExtArgs["result"]["failureMode"]>
    composites: {}
  }

  type FailureModeGetPayload<S extends boolean | null | undefined | FailureModeDefaultArgs> = $Result.GetResult<Prisma.$FailureModePayload, S>

  type FailureModeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FailureModeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FailureModeCountAggregateInputType | true
    }

  export interface FailureModeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FailureMode'], meta: { name: 'FailureMode' } }
    /**
     * Find zero or one FailureMode that matches the filter.
     * @param {FailureModeFindUniqueArgs} args - Arguments to find a FailureMode
     * @example
     * // Get one FailureMode
     * const failureMode = await prisma.failureMode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FailureModeFindUniqueArgs>(args: SelectSubset<T, FailureModeFindUniqueArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FailureMode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FailureModeFindUniqueOrThrowArgs} args - Arguments to find a FailureMode
     * @example
     * // Get one FailureMode
     * const failureMode = await prisma.failureMode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FailureModeFindUniqueOrThrowArgs>(args: SelectSubset<T, FailureModeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FailureMode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeFindFirstArgs} args - Arguments to find a FailureMode
     * @example
     * // Get one FailureMode
     * const failureMode = await prisma.failureMode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FailureModeFindFirstArgs>(args?: SelectSubset<T, FailureModeFindFirstArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FailureMode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeFindFirstOrThrowArgs} args - Arguments to find a FailureMode
     * @example
     * // Get one FailureMode
     * const failureMode = await prisma.failureMode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FailureModeFindFirstOrThrowArgs>(args?: SelectSubset<T, FailureModeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FailureModes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FailureModes
     * const failureModes = await prisma.failureMode.findMany()
     * 
     * // Get first 10 FailureModes
     * const failureModes = await prisma.failureMode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const failureModeWithIdOnly = await prisma.failureMode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FailureModeFindManyArgs>(args?: SelectSubset<T, FailureModeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FailureMode.
     * @param {FailureModeCreateArgs} args - Arguments to create a FailureMode.
     * @example
     * // Create one FailureMode
     * const FailureMode = await prisma.failureMode.create({
     *   data: {
     *     // ... data to create a FailureMode
     *   }
     * })
     * 
     */
    create<T extends FailureModeCreateArgs>(args: SelectSubset<T, FailureModeCreateArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FailureModes.
     * @param {FailureModeCreateManyArgs} args - Arguments to create many FailureModes.
     * @example
     * // Create many FailureModes
     * const failureMode = await prisma.failureMode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FailureModeCreateManyArgs>(args?: SelectSubset<T, FailureModeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FailureModes and returns the data saved in the database.
     * @param {FailureModeCreateManyAndReturnArgs} args - Arguments to create many FailureModes.
     * @example
     * // Create many FailureModes
     * const failureMode = await prisma.failureMode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FailureModes and only return the `id`
     * const failureModeWithIdOnly = await prisma.failureMode.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FailureModeCreateManyAndReturnArgs>(args?: SelectSubset<T, FailureModeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FailureMode.
     * @param {FailureModeDeleteArgs} args - Arguments to delete one FailureMode.
     * @example
     * // Delete one FailureMode
     * const FailureMode = await prisma.failureMode.delete({
     *   where: {
     *     // ... filter to delete one FailureMode
     *   }
     * })
     * 
     */
    delete<T extends FailureModeDeleteArgs>(args: SelectSubset<T, FailureModeDeleteArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FailureMode.
     * @param {FailureModeUpdateArgs} args - Arguments to update one FailureMode.
     * @example
     * // Update one FailureMode
     * const failureMode = await prisma.failureMode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FailureModeUpdateArgs>(args: SelectSubset<T, FailureModeUpdateArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FailureModes.
     * @param {FailureModeDeleteManyArgs} args - Arguments to filter FailureModes to delete.
     * @example
     * // Delete a few FailureModes
     * const { count } = await prisma.failureMode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FailureModeDeleteManyArgs>(args?: SelectSubset<T, FailureModeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FailureModes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FailureModes
     * const failureMode = await prisma.failureMode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FailureModeUpdateManyArgs>(args: SelectSubset<T, FailureModeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FailureMode.
     * @param {FailureModeUpsertArgs} args - Arguments to update or create a FailureMode.
     * @example
     * // Update or create a FailureMode
     * const failureMode = await prisma.failureMode.upsert({
     *   create: {
     *     // ... data to create a FailureMode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FailureMode we want to update
     *   }
     * })
     */
    upsert<T extends FailureModeUpsertArgs>(args: SelectSubset<T, FailureModeUpsertArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FailureModes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeCountArgs} args - Arguments to filter FailureModes to count.
     * @example
     * // Count the number of FailureModes
     * const count = await prisma.failureMode.count({
     *   where: {
     *     // ... the filter for the FailureModes we want to count
     *   }
     * })
    **/
    count<T extends FailureModeCountArgs>(
      args?: Subset<T, FailureModeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FailureModeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FailureMode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FailureModeAggregateArgs>(args: Subset<T, FailureModeAggregateArgs>): Prisma.PrismaPromise<GetFailureModeAggregateType<T>>

    /**
     * Group by FailureMode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FailureModeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FailureModeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FailureModeGroupByArgs['orderBy'] }
        : { orderBy?: FailureModeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FailureModeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFailureModeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FailureMode model
   */
  readonly fields: FailureModeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FailureMode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FailureModeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fmea<T extends FmeaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FmeaDefaultArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    process<T extends FailureMode$processArgs<ExtArgs> = {}>(args?: Subset<T, FailureMode$processArgs<ExtArgs>>): Prisma__ProcessClient<$Result.GetResult<Prisma.$ProcessPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    actionItems<T extends FailureMode$actionItemsArgs<ExtArgs> = {}>(args?: Subset<T, FailureMode$actionItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany"> | Null>
    comments<T extends FailureMode$commentsArgs<ExtArgs> = {}>(args?: Subset<T, FailureMode$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FailureMode model
   */ 
  interface FailureModeFieldRefs {
    readonly id: FieldRef<"FailureMode", 'String'>
    readonly name: FieldRef<"FailureMode", 'String'>
    readonly description: FieldRef<"FailureMode", 'String'>
    readonly potential_failure: FieldRef<"FailureMode", 'String'>
    readonly potential_effects: FieldRef<"FailureMode", 'String'>
    readonly severity: FieldRef<"FailureMode", 'Int'>
    readonly potential_causes: FieldRef<"FailureMode", 'String'>
    readonly occurrence: FieldRef<"FailureMode", 'Int'>
    readonly current_controls: FieldRef<"FailureMode", 'String'>
    readonly detection: FieldRef<"FailureMode", 'Int'>
    readonly rpn: FieldRef<"FailureMode", 'Int'>
    readonly recommended_actions: FieldRef<"FailureMode", 'String'>
    readonly responsibility: FieldRef<"FailureMode", 'String'>
    readonly target_date: FieldRef<"FailureMode", 'DateTime'>
    readonly actions_taken: FieldRef<"FailureMode", 'String'>
    readonly revised_severity: FieldRef<"FailureMode", 'Int'>
    readonly revised_occurrence: FieldRef<"FailureMode", 'Int'>
    readonly revised_detection: FieldRef<"FailureMode", 'Int'>
    readonly revised_rpn: FieldRef<"FailureMode", 'Int'>
    readonly createdAt: FieldRef<"FailureMode", 'DateTime'>
    readonly updatedAt: FieldRef<"FailureMode", 'DateTime'>
    readonly fmeaId: FieldRef<"FailureMode", 'String'>
    readonly processId: FieldRef<"FailureMode", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FailureMode findUnique
   */
  export type FailureModeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter, which FailureMode to fetch.
     */
    where: FailureModeWhereUniqueInput
  }

  /**
   * FailureMode findUniqueOrThrow
   */
  export type FailureModeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter, which FailureMode to fetch.
     */
    where: FailureModeWhereUniqueInput
  }

  /**
   * FailureMode findFirst
   */
  export type FailureModeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter, which FailureMode to fetch.
     */
    where?: FailureModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailureModes to fetch.
     */
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailureModes.
     */
    cursor?: FailureModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailureModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailureModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailureModes.
     */
    distinct?: FailureModeScalarFieldEnum | FailureModeScalarFieldEnum[]
  }

  /**
   * FailureMode findFirstOrThrow
   */
  export type FailureModeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter, which FailureMode to fetch.
     */
    where?: FailureModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailureModes to fetch.
     */
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FailureModes.
     */
    cursor?: FailureModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailureModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailureModes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FailureModes.
     */
    distinct?: FailureModeScalarFieldEnum | FailureModeScalarFieldEnum[]
  }

  /**
   * FailureMode findMany
   */
  export type FailureModeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter, which FailureModes to fetch.
     */
    where?: FailureModeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FailureModes to fetch.
     */
    orderBy?: FailureModeOrderByWithRelationInput | FailureModeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FailureModes.
     */
    cursor?: FailureModeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FailureModes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FailureModes.
     */
    skip?: number
    distinct?: FailureModeScalarFieldEnum | FailureModeScalarFieldEnum[]
  }

  /**
   * FailureMode create
   */
  export type FailureModeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * The data needed to create a FailureMode.
     */
    data: XOR<FailureModeCreateInput, FailureModeUncheckedCreateInput>
  }

  /**
   * FailureMode createMany
   */
  export type FailureModeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FailureModes.
     */
    data: FailureModeCreateManyInput | FailureModeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FailureMode createManyAndReturn
   */
  export type FailureModeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FailureModes.
     */
    data: FailureModeCreateManyInput | FailureModeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FailureMode update
   */
  export type FailureModeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * The data needed to update a FailureMode.
     */
    data: XOR<FailureModeUpdateInput, FailureModeUncheckedUpdateInput>
    /**
     * Choose, which FailureMode to update.
     */
    where: FailureModeWhereUniqueInput
  }

  /**
   * FailureMode updateMany
   */
  export type FailureModeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FailureModes.
     */
    data: XOR<FailureModeUpdateManyMutationInput, FailureModeUncheckedUpdateManyInput>
    /**
     * Filter which FailureModes to update
     */
    where?: FailureModeWhereInput
  }

  /**
   * FailureMode upsert
   */
  export type FailureModeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * The filter to search for the FailureMode to update in case it exists.
     */
    where: FailureModeWhereUniqueInput
    /**
     * In case the FailureMode found by the `where` argument doesn't exist, create a new FailureMode with this data.
     */
    create: XOR<FailureModeCreateInput, FailureModeUncheckedCreateInput>
    /**
     * In case the FailureMode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FailureModeUpdateInput, FailureModeUncheckedUpdateInput>
  }

  /**
   * FailureMode delete
   */
  export type FailureModeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    /**
     * Filter which FailureMode to delete.
     */
    where: FailureModeWhereUniqueInput
  }

  /**
   * FailureMode deleteMany
   */
  export type FailureModeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FailureModes to delete
     */
    where?: FailureModeWhereInput
  }

  /**
   * FailureMode.process
   */
  export type FailureMode$processArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Process
     */
    select?: ProcessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProcessInclude<ExtArgs> | null
    where?: ProcessWhereInput
  }

  /**
   * FailureMode.actionItems
   */
  export type FailureMode$actionItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    cursor?: ActionItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * FailureMode.comments
   */
  export type FailureMode$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * FailureMode without action
   */
  export type FailureModeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
  }


  /**
   * Model ControlPlan
   */

  export type AggregateControlPlan = {
    _count: ControlPlanCountAggregateOutputType | null
    _min: ControlPlanMinAggregateOutputType | null
    _max: ControlPlanMaxAggregateOutputType | null
  }

  export type ControlPlanMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    process_step: string | null
    control_method: string | null
    specification: string | null
    measurement_technique: string | null
    sample_size: string | null
    frequency: string | null
    control_method_type: $Enums.ControlMethodType | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    fmeaId: string | null
  }

  export type ControlPlanMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    process_step: string | null
    control_method: string | null
    specification: string | null
    measurement_technique: string | null
    sample_size: string | null
    frequency: string | null
    control_method_type: $Enums.ControlMethodType | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    fmeaId: string | null
  }

  export type ControlPlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    process_step: number
    control_method: number
    specification: number
    measurement_technique: number
    sample_size: number
    frequency: number
    control_method_type: number
    createdAt: number
    updatedAt: number
    projectId: number
    fmeaId: number
    _all: number
  }


  export type ControlPlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    process_step?: true
    control_method?: true
    specification?: true
    measurement_technique?: true
    sample_size?: true
    frequency?: true
    control_method_type?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    fmeaId?: true
  }

  export type ControlPlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    process_step?: true
    control_method?: true
    specification?: true
    measurement_technique?: true
    sample_size?: true
    frequency?: true
    control_method_type?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    fmeaId?: true
  }

  export type ControlPlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    process_step?: true
    control_method?: true
    specification?: true
    measurement_technique?: true
    sample_size?: true
    frequency?: true
    control_method_type?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    fmeaId?: true
    _all?: true
  }

  export type ControlPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlPlan to aggregate.
     */
    where?: ControlPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlPlans to fetch.
     */
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ControlPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ControlPlans
    **/
    _count?: true | ControlPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlPlanMaxAggregateInputType
  }

  export type GetControlPlanAggregateType<T extends ControlPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateControlPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControlPlan[P]>
      : GetScalarType<T[P], AggregateControlPlan[P]>
  }




  export type ControlPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlPlanWhereInput
    orderBy?: ControlPlanOrderByWithAggregationInput | ControlPlanOrderByWithAggregationInput[]
    by: ControlPlanScalarFieldEnum[] | ControlPlanScalarFieldEnum
    having?: ControlPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlPlanCountAggregateInputType | true
    _min?: ControlPlanMinAggregateInputType
    _max?: ControlPlanMaxAggregateInputType
  }

  export type ControlPlanGroupByOutputType = {
    id: string
    name: string
    description: string | null
    process_step: string
    control_method: string
    specification: string | null
    measurement_technique: string | null
    sample_size: string | null
    frequency: string | null
    control_method_type: $Enums.ControlMethodType
    createdAt: Date
    updatedAt: Date
    projectId: string
    fmeaId: string | null
    _count: ControlPlanCountAggregateOutputType | null
    _min: ControlPlanMinAggregateOutputType | null
    _max: ControlPlanMaxAggregateOutputType | null
  }

  type GetControlPlanGroupByPayload<T extends ControlPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlPlanGroupByOutputType[P]>
            : GetScalarType<T[P], ControlPlanGroupByOutputType[P]>
        }
      >
    >


  export type ControlPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    process_step?: boolean
    control_method?: boolean
    specification?: boolean
    measurement_technique?: boolean
    sample_size?: boolean
    frequency?: boolean
    control_method_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | ControlPlan$fmeaArgs<ExtArgs>
  }, ExtArgs["result"]["controlPlan"]>

  export type ControlPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    process_step?: boolean
    control_method?: boolean
    specification?: boolean
    measurement_technique?: boolean
    sample_size?: boolean
    frequency?: boolean
    control_method_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | ControlPlan$fmeaArgs<ExtArgs>
  }, ExtArgs["result"]["controlPlan"]>

  export type ControlPlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    process_step?: boolean
    control_method?: boolean
    specification?: boolean
    measurement_technique?: boolean
    sample_size?: boolean
    frequency?: boolean
    control_method_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
  }

  export type ControlPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | ControlPlan$fmeaArgs<ExtArgs>
  }
  export type ControlPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | ControlPlan$fmeaArgs<ExtArgs>
  }

  export type $ControlPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ControlPlan"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      fmea: Prisma.$FmeaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      process_step: string
      control_method: string
      specification: string | null
      measurement_technique: string | null
      sample_size: string | null
      frequency: string | null
      control_method_type: $Enums.ControlMethodType
      createdAt: Date
      updatedAt: Date
      projectId: string
      fmeaId: string | null
    }, ExtArgs["result"]["controlPlan"]>
    composites: {}
  }

  type ControlPlanGetPayload<S extends boolean | null | undefined | ControlPlanDefaultArgs> = $Result.GetResult<Prisma.$ControlPlanPayload, S>

  type ControlPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ControlPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ControlPlanCountAggregateInputType | true
    }

  export interface ControlPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ControlPlan'], meta: { name: 'ControlPlan' } }
    /**
     * Find zero or one ControlPlan that matches the filter.
     * @param {ControlPlanFindUniqueArgs} args - Arguments to find a ControlPlan
     * @example
     * // Get one ControlPlan
     * const controlPlan = await prisma.controlPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ControlPlanFindUniqueArgs>(args: SelectSubset<T, ControlPlanFindUniqueArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ControlPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ControlPlanFindUniqueOrThrowArgs} args - Arguments to find a ControlPlan
     * @example
     * // Get one ControlPlan
     * const controlPlan = await prisma.controlPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ControlPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, ControlPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ControlPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanFindFirstArgs} args - Arguments to find a ControlPlan
     * @example
     * // Get one ControlPlan
     * const controlPlan = await prisma.controlPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ControlPlanFindFirstArgs>(args?: SelectSubset<T, ControlPlanFindFirstArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ControlPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanFindFirstOrThrowArgs} args - Arguments to find a ControlPlan
     * @example
     * // Get one ControlPlan
     * const controlPlan = await prisma.controlPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ControlPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, ControlPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ControlPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ControlPlans
     * const controlPlans = await prisma.controlPlan.findMany()
     * 
     * // Get first 10 ControlPlans
     * const controlPlans = await prisma.controlPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlPlanWithIdOnly = await prisma.controlPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ControlPlanFindManyArgs>(args?: SelectSubset<T, ControlPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ControlPlan.
     * @param {ControlPlanCreateArgs} args - Arguments to create a ControlPlan.
     * @example
     * // Create one ControlPlan
     * const ControlPlan = await prisma.controlPlan.create({
     *   data: {
     *     // ... data to create a ControlPlan
     *   }
     * })
     * 
     */
    create<T extends ControlPlanCreateArgs>(args: SelectSubset<T, ControlPlanCreateArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ControlPlans.
     * @param {ControlPlanCreateManyArgs} args - Arguments to create many ControlPlans.
     * @example
     * // Create many ControlPlans
     * const controlPlan = await prisma.controlPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ControlPlanCreateManyArgs>(args?: SelectSubset<T, ControlPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ControlPlans and returns the data saved in the database.
     * @param {ControlPlanCreateManyAndReturnArgs} args - Arguments to create many ControlPlans.
     * @example
     * // Create many ControlPlans
     * const controlPlan = await prisma.controlPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ControlPlans and only return the `id`
     * const controlPlanWithIdOnly = await prisma.controlPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ControlPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, ControlPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ControlPlan.
     * @param {ControlPlanDeleteArgs} args - Arguments to delete one ControlPlan.
     * @example
     * // Delete one ControlPlan
     * const ControlPlan = await prisma.controlPlan.delete({
     *   where: {
     *     // ... filter to delete one ControlPlan
     *   }
     * })
     * 
     */
    delete<T extends ControlPlanDeleteArgs>(args: SelectSubset<T, ControlPlanDeleteArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ControlPlan.
     * @param {ControlPlanUpdateArgs} args - Arguments to update one ControlPlan.
     * @example
     * // Update one ControlPlan
     * const controlPlan = await prisma.controlPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ControlPlanUpdateArgs>(args: SelectSubset<T, ControlPlanUpdateArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ControlPlans.
     * @param {ControlPlanDeleteManyArgs} args - Arguments to filter ControlPlans to delete.
     * @example
     * // Delete a few ControlPlans
     * const { count } = await prisma.controlPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ControlPlanDeleteManyArgs>(args?: SelectSubset<T, ControlPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ControlPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ControlPlans
     * const controlPlan = await prisma.controlPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ControlPlanUpdateManyArgs>(args: SelectSubset<T, ControlPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ControlPlan.
     * @param {ControlPlanUpsertArgs} args - Arguments to update or create a ControlPlan.
     * @example
     * // Update or create a ControlPlan
     * const controlPlan = await prisma.controlPlan.upsert({
     *   create: {
     *     // ... data to create a ControlPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ControlPlan we want to update
     *   }
     * })
     */
    upsert<T extends ControlPlanUpsertArgs>(args: SelectSubset<T, ControlPlanUpsertArgs<ExtArgs>>): Prisma__ControlPlanClient<$Result.GetResult<Prisma.$ControlPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ControlPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanCountArgs} args - Arguments to filter ControlPlans to count.
     * @example
     * // Count the number of ControlPlans
     * const count = await prisma.controlPlan.count({
     *   where: {
     *     // ... the filter for the ControlPlans we want to count
     *   }
     * })
    **/
    count<T extends ControlPlanCountArgs>(
      args?: Subset<T, ControlPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ControlPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlPlanAggregateArgs>(args: Subset<T, ControlPlanAggregateArgs>): Prisma.PrismaPromise<GetControlPlanAggregateType<T>>

    /**
     * Group by ControlPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ControlPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ControlPlanGroupByArgs['orderBy'] }
        : { orderBy?: ControlPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ControlPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ControlPlan model
   */
  readonly fields: ControlPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ControlPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ControlPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fmea<T extends ControlPlan$fmeaArgs<ExtArgs> = {}>(args?: Subset<T, ControlPlan$fmeaArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ControlPlan model
   */ 
  interface ControlPlanFieldRefs {
    readonly id: FieldRef<"ControlPlan", 'String'>
    readonly name: FieldRef<"ControlPlan", 'String'>
    readonly description: FieldRef<"ControlPlan", 'String'>
    readonly process_step: FieldRef<"ControlPlan", 'String'>
    readonly control_method: FieldRef<"ControlPlan", 'String'>
    readonly specification: FieldRef<"ControlPlan", 'String'>
    readonly measurement_technique: FieldRef<"ControlPlan", 'String'>
    readonly sample_size: FieldRef<"ControlPlan", 'String'>
    readonly frequency: FieldRef<"ControlPlan", 'String'>
    readonly control_method_type: FieldRef<"ControlPlan", 'ControlMethodType'>
    readonly createdAt: FieldRef<"ControlPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"ControlPlan", 'DateTime'>
    readonly projectId: FieldRef<"ControlPlan", 'String'>
    readonly fmeaId: FieldRef<"ControlPlan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ControlPlan findUnique
   */
  export type ControlPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter, which ControlPlan to fetch.
     */
    where: ControlPlanWhereUniqueInput
  }

  /**
   * ControlPlan findUniqueOrThrow
   */
  export type ControlPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter, which ControlPlan to fetch.
     */
    where: ControlPlanWhereUniqueInput
  }

  /**
   * ControlPlan findFirst
   */
  export type ControlPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter, which ControlPlan to fetch.
     */
    where?: ControlPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlPlans to fetch.
     */
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlPlans.
     */
    cursor?: ControlPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlPlans.
     */
    distinct?: ControlPlanScalarFieldEnum | ControlPlanScalarFieldEnum[]
  }

  /**
   * ControlPlan findFirstOrThrow
   */
  export type ControlPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter, which ControlPlan to fetch.
     */
    where?: ControlPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlPlans to fetch.
     */
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ControlPlans.
     */
    cursor?: ControlPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ControlPlans.
     */
    distinct?: ControlPlanScalarFieldEnum | ControlPlanScalarFieldEnum[]
  }

  /**
   * ControlPlan findMany
   */
  export type ControlPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter, which ControlPlans to fetch.
     */
    where?: ControlPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ControlPlans to fetch.
     */
    orderBy?: ControlPlanOrderByWithRelationInput | ControlPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ControlPlans.
     */
    cursor?: ControlPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ControlPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ControlPlans.
     */
    skip?: number
    distinct?: ControlPlanScalarFieldEnum | ControlPlanScalarFieldEnum[]
  }

  /**
   * ControlPlan create
   */
  export type ControlPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a ControlPlan.
     */
    data: XOR<ControlPlanCreateInput, ControlPlanUncheckedCreateInput>
  }

  /**
   * ControlPlan createMany
   */
  export type ControlPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ControlPlans.
     */
    data: ControlPlanCreateManyInput | ControlPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ControlPlan createManyAndReturn
   */
  export type ControlPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ControlPlans.
     */
    data: ControlPlanCreateManyInput | ControlPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ControlPlan update
   */
  export type ControlPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a ControlPlan.
     */
    data: XOR<ControlPlanUpdateInput, ControlPlanUncheckedUpdateInput>
    /**
     * Choose, which ControlPlan to update.
     */
    where: ControlPlanWhereUniqueInput
  }

  /**
   * ControlPlan updateMany
   */
  export type ControlPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ControlPlans.
     */
    data: XOR<ControlPlanUpdateManyMutationInput, ControlPlanUncheckedUpdateManyInput>
    /**
     * Filter which ControlPlans to update
     */
    where?: ControlPlanWhereInput
  }

  /**
   * ControlPlan upsert
   */
  export type ControlPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the ControlPlan to update in case it exists.
     */
    where: ControlPlanWhereUniqueInput
    /**
     * In case the ControlPlan found by the `where` argument doesn't exist, create a new ControlPlan with this data.
     */
    create: XOR<ControlPlanCreateInput, ControlPlanUncheckedCreateInput>
    /**
     * In case the ControlPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ControlPlanUpdateInput, ControlPlanUncheckedUpdateInput>
  }

  /**
   * ControlPlan delete
   */
  export type ControlPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
    /**
     * Filter which ControlPlan to delete.
     */
    where: ControlPlanWhereUniqueInput
  }

  /**
   * ControlPlan deleteMany
   */
  export type ControlPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ControlPlans to delete
     */
    where?: ControlPlanWhereInput
  }

  /**
   * ControlPlan.fmea
   */
  export type ControlPlan$fmeaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
  }

  /**
   * ControlPlan without action
   */
  export type ControlPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ControlPlan
     */
    select?: ControlPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlPlanInclude<ExtArgs> | null
  }


  /**
   * Model ActionItem
   */

  export type AggregateActionItem = {
    _count: ActionItemCountAggregateOutputType | null
    _min: ActionItemMinAggregateOutputType | null
    _max: ActionItemMaxAggregateOutputType | null
  }

  export type ActionItemMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    priority: $Enums.Priority | null
    status: $Enums.ActionStatus | null
    dueDate: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    failureModeId: string | null
    assigneeId: string | null
    createdById: string | null
  }

  export type ActionItemMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    priority: $Enums.Priority | null
    status: $Enums.ActionStatus | null
    dueDate: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    failureModeId: string | null
    assigneeId: string | null
    createdById: string | null
  }

  export type ActionItemCountAggregateOutputType = {
    id: number
    title: number
    description: number
    priority: number
    status: number
    dueDate: number
    completedAt: number
    createdAt: number
    updatedAt: number
    projectId: number
    failureModeId: number
    assigneeId: number
    createdById: number
    _all: number
  }


  export type ActionItemMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    failureModeId?: true
    assigneeId?: true
    createdById?: true
  }

  export type ActionItemMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    failureModeId?: true
    assigneeId?: true
    createdById?: true
  }

  export type ActionItemCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    priority?: true
    status?: true
    dueDate?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    failureModeId?: true
    assigneeId?: true
    createdById?: true
    _all?: true
  }

  export type ActionItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionItem to aggregate.
     */
    where?: ActionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionItems to fetch.
     */
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActionItems
    **/
    _count?: true | ActionItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActionItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActionItemMaxAggregateInputType
  }

  export type GetActionItemAggregateType<T extends ActionItemAggregateArgs> = {
        [P in keyof T & keyof AggregateActionItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActionItem[P]>
      : GetScalarType<T[P], AggregateActionItem[P]>
  }




  export type ActionItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActionItemWhereInput
    orderBy?: ActionItemOrderByWithAggregationInput | ActionItemOrderByWithAggregationInput[]
    by: ActionItemScalarFieldEnum[] | ActionItemScalarFieldEnum
    having?: ActionItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActionItemCountAggregateInputType | true
    _min?: ActionItemMinAggregateInputType
    _max?: ActionItemMaxAggregateInputType
  }

  export type ActionItemGroupByOutputType = {
    id: string
    title: string
    description: string | null
    priority: $Enums.Priority
    status: $Enums.ActionStatus
    dueDate: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    failureModeId: string | null
    assigneeId: string | null
    createdById: string
    _count: ActionItemCountAggregateOutputType | null
    _min: ActionItemMinAggregateOutputType | null
    _max: ActionItemMaxAggregateOutputType | null
  }

  type GetActionItemGroupByPayload<T extends ActionItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActionItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActionItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActionItemGroupByOutputType[P]>
            : GetScalarType<T[P], ActionItemGroupByOutputType[P]>
        }
      >
    >


  export type ActionItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    failureModeId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    failureMode?: boolean | ActionItem$failureModeArgs<ExtArgs>
    assignee?: boolean | ActionItem$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | ActionItem$commentsArgs<ExtArgs>
    notifications?: boolean | ActionItem$notificationsArgs<ExtArgs>
    _count?: boolean | ActionItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionItem"]>

  export type ActionItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    failureModeId?: boolean
    assigneeId?: boolean
    createdById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    failureMode?: boolean | ActionItem$failureModeArgs<ExtArgs>
    assignee?: boolean | ActionItem$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actionItem"]>

  export type ActionItemSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    priority?: boolean
    status?: boolean
    dueDate?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    failureModeId?: boolean
    assigneeId?: boolean
    createdById?: boolean
  }

  export type ActionItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    failureMode?: boolean | ActionItem$failureModeArgs<ExtArgs>
    assignee?: boolean | ActionItem$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | ActionItem$commentsArgs<ExtArgs>
    notifications?: boolean | ActionItem$notificationsArgs<ExtArgs>
    _count?: boolean | ActionItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActionItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    failureMode?: boolean | ActionItem$failureModeArgs<ExtArgs>
    assignee?: boolean | ActionItem$assigneeArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActionItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActionItem"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      failureMode: Prisma.$FailureModePayload<ExtArgs> | null
      assignee: Prisma.$UserPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      priority: $Enums.Priority
      status: $Enums.ActionStatus
      dueDate: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      failureModeId: string | null
      assigneeId: string | null
      createdById: string
    }, ExtArgs["result"]["actionItem"]>
    composites: {}
  }

  type ActionItemGetPayload<S extends boolean | null | undefined | ActionItemDefaultArgs> = $Result.GetResult<Prisma.$ActionItemPayload, S>

  type ActionItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActionItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActionItemCountAggregateInputType | true
    }

  export interface ActionItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActionItem'], meta: { name: 'ActionItem' } }
    /**
     * Find zero or one ActionItem that matches the filter.
     * @param {ActionItemFindUniqueArgs} args - Arguments to find a ActionItem
     * @example
     * // Get one ActionItem
     * const actionItem = await prisma.actionItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActionItemFindUniqueArgs>(args: SelectSubset<T, ActionItemFindUniqueArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ActionItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ActionItemFindUniqueOrThrowArgs} args - Arguments to find a ActionItem
     * @example
     * // Get one ActionItem
     * const actionItem = await prisma.actionItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActionItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ActionItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ActionItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemFindFirstArgs} args - Arguments to find a ActionItem
     * @example
     * // Get one ActionItem
     * const actionItem = await prisma.actionItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActionItemFindFirstArgs>(args?: SelectSubset<T, ActionItemFindFirstArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ActionItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemFindFirstOrThrowArgs} args - Arguments to find a ActionItem
     * @example
     * // Get one ActionItem
     * const actionItem = await prisma.actionItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActionItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ActionItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ActionItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActionItems
     * const actionItems = await prisma.actionItem.findMany()
     * 
     * // Get first 10 ActionItems
     * const actionItems = await prisma.actionItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const actionItemWithIdOnly = await prisma.actionItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActionItemFindManyArgs>(args?: SelectSubset<T, ActionItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ActionItem.
     * @param {ActionItemCreateArgs} args - Arguments to create a ActionItem.
     * @example
     * // Create one ActionItem
     * const ActionItem = await prisma.actionItem.create({
     *   data: {
     *     // ... data to create a ActionItem
     *   }
     * })
     * 
     */
    create<T extends ActionItemCreateArgs>(args: SelectSubset<T, ActionItemCreateArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ActionItems.
     * @param {ActionItemCreateManyArgs} args - Arguments to create many ActionItems.
     * @example
     * // Create many ActionItems
     * const actionItem = await prisma.actionItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActionItemCreateManyArgs>(args?: SelectSubset<T, ActionItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActionItems and returns the data saved in the database.
     * @param {ActionItemCreateManyAndReturnArgs} args - Arguments to create many ActionItems.
     * @example
     * // Create many ActionItems
     * const actionItem = await prisma.actionItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActionItems and only return the `id`
     * const actionItemWithIdOnly = await prisma.actionItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActionItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ActionItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ActionItem.
     * @param {ActionItemDeleteArgs} args - Arguments to delete one ActionItem.
     * @example
     * // Delete one ActionItem
     * const ActionItem = await prisma.actionItem.delete({
     *   where: {
     *     // ... filter to delete one ActionItem
     *   }
     * })
     * 
     */
    delete<T extends ActionItemDeleteArgs>(args: SelectSubset<T, ActionItemDeleteArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ActionItem.
     * @param {ActionItemUpdateArgs} args - Arguments to update one ActionItem.
     * @example
     * // Update one ActionItem
     * const actionItem = await prisma.actionItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActionItemUpdateArgs>(args: SelectSubset<T, ActionItemUpdateArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ActionItems.
     * @param {ActionItemDeleteManyArgs} args - Arguments to filter ActionItems to delete.
     * @example
     * // Delete a few ActionItems
     * const { count } = await prisma.actionItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActionItemDeleteManyArgs>(args?: SelectSubset<T, ActionItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActionItems
     * const actionItem = await prisma.actionItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActionItemUpdateManyArgs>(args: SelectSubset<T, ActionItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActionItem.
     * @param {ActionItemUpsertArgs} args - Arguments to update or create a ActionItem.
     * @example
     * // Update or create a ActionItem
     * const actionItem = await prisma.actionItem.upsert({
     *   create: {
     *     // ... data to create a ActionItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActionItem we want to update
     *   }
     * })
     */
    upsert<T extends ActionItemUpsertArgs>(args: SelectSubset<T, ActionItemUpsertArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ActionItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemCountArgs} args - Arguments to filter ActionItems to count.
     * @example
     * // Count the number of ActionItems
     * const count = await prisma.actionItem.count({
     *   where: {
     *     // ... the filter for the ActionItems we want to count
     *   }
     * })
    **/
    count<T extends ActionItemCountArgs>(
      args?: Subset<T, ActionItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActionItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActionItemAggregateArgs>(args: Subset<T, ActionItemAggregateArgs>): Prisma.PrismaPromise<GetActionItemAggregateType<T>>

    /**
     * Group by ActionItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActionItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActionItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActionItemGroupByArgs['orderBy'] }
        : { orderBy?: ActionItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActionItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActionItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActionItem model
   */
  readonly fields: ActionItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActionItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActionItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    failureMode<T extends ActionItem$failureModeArgs<ExtArgs> = {}>(args?: Subset<T, ActionItem$failureModeArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assignee<T extends ActionItem$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, ActionItem$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    comments<T extends ActionItem$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ActionItem$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends ActionItem$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, ActionItem$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActionItem model
   */ 
  interface ActionItemFieldRefs {
    readonly id: FieldRef<"ActionItem", 'String'>
    readonly title: FieldRef<"ActionItem", 'String'>
    readonly description: FieldRef<"ActionItem", 'String'>
    readonly priority: FieldRef<"ActionItem", 'Priority'>
    readonly status: FieldRef<"ActionItem", 'ActionStatus'>
    readonly dueDate: FieldRef<"ActionItem", 'DateTime'>
    readonly completedAt: FieldRef<"ActionItem", 'DateTime'>
    readonly createdAt: FieldRef<"ActionItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ActionItem", 'DateTime'>
    readonly projectId: FieldRef<"ActionItem", 'String'>
    readonly failureModeId: FieldRef<"ActionItem", 'String'>
    readonly assigneeId: FieldRef<"ActionItem", 'String'>
    readonly createdById: FieldRef<"ActionItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ActionItem findUnique
   */
  export type ActionItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter, which ActionItem to fetch.
     */
    where: ActionItemWhereUniqueInput
  }

  /**
   * ActionItem findUniqueOrThrow
   */
  export type ActionItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter, which ActionItem to fetch.
     */
    where: ActionItemWhereUniqueInput
  }

  /**
   * ActionItem findFirst
   */
  export type ActionItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter, which ActionItem to fetch.
     */
    where?: ActionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionItems to fetch.
     */
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionItems.
     */
    cursor?: ActionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionItems.
     */
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * ActionItem findFirstOrThrow
   */
  export type ActionItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter, which ActionItem to fetch.
     */
    where?: ActionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionItems to fetch.
     */
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActionItems.
     */
    cursor?: ActionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActionItems.
     */
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * ActionItem findMany
   */
  export type ActionItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter, which ActionItems to fetch.
     */
    where?: ActionItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActionItems to fetch.
     */
    orderBy?: ActionItemOrderByWithRelationInput | ActionItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActionItems.
     */
    cursor?: ActionItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActionItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActionItems.
     */
    skip?: number
    distinct?: ActionItemScalarFieldEnum | ActionItemScalarFieldEnum[]
  }

  /**
   * ActionItem create
   */
  export type ActionItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ActionItem.
     */
    data: XOR<ActionItemCreateInput, ActionItemUncheckedCreateInput>
  }

  /**
   * ActionItem createMany
   */
  export type ActionItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActionItems.
     */
    data: ActionItemCreateManyInput | ActionItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActionItem createManyAndReturn
   */
  export type ActionItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ActionItems.
     */
    data: ActionItemCreateManyInput | ActionItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActionItem update
   */
  export type ActionItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ActionItem.
     */
    data: XOR<ActionItemUpdateInput, ActionItemUncheckedUpdateInput>
    /**
     * Choose, which ActionItem to update.
     */
    where: ActionItemWhereUniqueInput
  }

  /**
   * ActionItem updateMany
   */
  export type ActionItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActionItems.
     */
    data: XOR<ActionItemUpdateManyMutationInput, ActionItemUncheckedUpdateManyInput>
    /**
     * Filter which ActionItems to update
     */
    where?: ActionItemWhereInput
  }

  /**
   * ActionItem upsert
   */
  export type ActionItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ActionItem to update in case it exists.
     */
    where: ActionItemWhereUniqueInput
    /**
     * In case the ActionItem found by the `where` argument doesn't exist, create a new ActionItem with this data.
     */
    create: XOR<ActionItemCreateInput, ActionItemUncheckedCreateInput>
    /**
     * In case the ActionItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActionItemUpdateInput, ActionItemUncheckedUpdateInput>
  }

  /**
   * ActionItem delete
   */
  export type ActionItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    /**
     * Filter which ActionItem to delete.
     */
    where: ActionItemWhereUniqueInput
  }

  /**
   * ActionItem deleteMany
   */
  export type ActionItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActionItems to delete
     */
    where?: ActionItemWhereInput
  }

  /**
   * ActionItem.failureMode
   */
  export type ActionItem$failureModeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    where?: FailureModeWhereInput
  }

  /**
   * ActionItem.assignee
   */
  export type ActionItem$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ActionItem.comments
   */
  export type ActionItem$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * ActionItem.notifications
   */
  export type ActionItem$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * ActionItem without action
   */
  export type ActionItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    projectId: string | null
    fmeaId: string | null
    failureModeId: string | null
    actionItemId: string | null
    parentId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    authorId: string | null
    projectId: string | null
    fmeaId: string | null
    failureModeId: string | null
    actionItemId: string | null
    parentId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    authorId: number
    projectId: number
    fmeaId: number
    failureModeId: number
    actionItemId: number
    parentId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    fmeaId?: true
    failureModeId?: true
    actionItemId?: true
    parentId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    fmeaId?: true
    failureModeId?: true
    actionItemId?: true
    parentId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    authorId?: true
    projectId?: true
    fmeaId?: true
    failureModeId?: true
    actionItemId?: true
    parentId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    authorId: string
    projectId: string | null
    fmeaId: string | null
    failureModeId: string | null
    actionItemId: string | null
    parentId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    fmeaId?: boolean
    failureModeId?: boolean
    actionItemId?: boolean
    parentId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    fmea?: boolean | Comment$fmeaArgs<ExtArgs>
    failureMode?: boolean | Comment$failureModeArgs<ExtArgs>
    actionItem?: boolean | Comment$actionItemArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    fmeaId?: boolean
    failureModeId?: boolean
    actionItemId?: boolean
    parentId?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    fmea?: boolean | Comment$fmeaArgs<ExtArgs>
    failureMode?: boolean | Comment$failureModeArgs<ExtArgs>
    actionItem?: boolean | Comment$actionItemArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    authorId?: boolean
    projectId?: boolean
    fmeaId?: boolean
    failureModeId?: boolean
    actionItemId?: boolean
    parentId?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    fmea?: boolean | Comment$fmeaArgs<ExtArgs>
    failureMode?: boolean | Comment$failureModeArgs<ExtArgs>
    actionItem?: boolean | Comment$actionItemArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    replies?: boolean | Comment$repliesArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    fmea?: boolean | Comment$fmeaArgs<ExtArgs>
    failureMode?: boolean | Comment$failureModeArgs<ExtArgs>
    actionItem?: boolean | Comment$actionItemArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      fmea: Prisma.$FmeaPayload<ExtArgs> | null
      failureMode: Prisma.$FailureModePayload<ExtArgs> | null
      actionItem: Prisma.$ActionItemPayload<ExtArgs> | null
      parent: Prisma.$CommentPayload<ExtArgs> | null
      replies: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      authorId: string
      projectId: string | null
      fmeaId: string | null
      failureModeId: string | null
      actionItemId: string | null
      parentId: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends Comment$projectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    fmea<T extends Comment$fmeaArgs<ExtArgs> = {}>(args?: Subset<T, Comment$fmeaArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    failureMode<T extends Comment$failureModeArgs<ExtArgs> = {}>(args?: Subset<T, Comment$failureModeArgs<ExtArgs>>): Prisma__FailureModeClient<$Result.GetResult<Prisma.$FailureModePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    actionItem<T extends Comment$actionItemArgs<ExtArgs> = {}>(args?: Subset<T, Comment$actionItemArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    replies<T extends Comment$repliesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly projectId: FieldRef<"Comment", 'String'>
    readonly fmeaId: FieldRef<"Comment", 'String'>
    readonly failureModeId: FieldRef<"Comment", 'String'>
    readonly actionItemId: FieldRef<"Comment", 'String'>
    readonly parentId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.project
   */
  export type Comment$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Comment.fmea
   */
  export type Comment$fmeaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
  }

  /**
   * Comment.failureMode
   */
  export type Comment$failureModeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FailureMode
     */
    select?: FailureModeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FailureModeInclude<ExtArgs> | null
    where?: FailureModeWhereInput
  }

  /**
   * Comment.actionItem
   */
  export type Comment$actionItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
  }

  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.replies
   */
  export type Comment$repliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    read: boolean | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
    actionItemId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    read: boolean | null
    createdAt: Date | null
    userId: string | null
    projectId: string | null
    actionItemId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    title: number
    message: number
    type: number
    read: number
    createdAt: number
    userId: number
    projectId: number
    actionItemId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    read?: true
    createdAt?: true
    userId?: true
    projectId?: true
    actionItemId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    read?: true
    createdAt?: true
    userId?: true
    projectId?: true
    actionItemId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    title?: true
    message?: true
    type?: true
    read?: true
    createdAt?: true
    userId?: true
    projectId?: true
    actionItemId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    title: string
    message: string
    type: $Enums.NotificationType
    read: boolean
    createdAt: Date
    userId: string
    projectId: string | null
    actionItemId: string | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    read?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    actionItemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Notification$projectArgs<ExtArgs>
    actionItem?: boolean | Notification$actionItemArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    read?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    actionItemId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Notification$projectArgs<ExtArgs>
    actionItem?: boolean | Notification$actionItemArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    read?: boolean
    createdAt?: boolean
    userId?: boolean
    projectId?: boolean
    actionItemId?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Notification$projectArgs<ExtArgs>
    actionItem?: boolean | Notification$actionItemArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Notification$projectArgs<ExtArgs>
    actionItem?: boolean | Notification$actionItemArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      actionItem: Prisma.$ActionItemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      message: string
      type: $Enums.NotificationType
      read: boolean
      createdAt: Date
      userId: string
      projectId: string | null
      actionItemId: string | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends Notification$projectArgs<ExtArgs> = {}>(args?: Subset<T, Notification$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    actionItem<T extends Notification$actionItemArgs<ExtArgs> = {}>(args?: Subset<T, Notification$actionItemArgs<ExtArgs>>): Prisma__ActionItemClient<$Result.GetResult<Prisma.$ActionItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly projectId: FieldRef<"Notification", 'String'>
    readonly actionItemId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.project
   */
  export type Notification$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Notification.actionItem
   */
  export type Notification$actionItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActionItem
     */
    select?: ActionItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActionItemInclude<ExtArgs> | null
    where?: ActionItemWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model ChangeEvent
   */

  export type AggregateChangeEvent = {
    _count: ChangeEventCountAggregateOutputType | null
    _min: ChangeEventMinAggregateOutputType | null
    _max: ChangeEventMaxAggregateOutputType | null
  }

  export type ChangeEventMinAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changeType: $Enums.ChangeType | null
    description: string | null
    reason: string | null
    createdAt: Date | null
    createdById: string | null
    projectId: string | null
  }

  export type ChangeEventMaxAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changeType: $Enums.ChangeType | null
    description: string | null
    reason: string | null
    createdAt: Date | null
    createdById: string | null
    projectId: string | null
  }

  export type ChangeEventCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    changeType: number
    oldValues: number
    newValues: number
    description: number
    reason: number
    createdAt: number
    createdById: number
    projectId: number
    _all: number
  }


  export type ChangeEventMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    description?: true
    reason?: true
    createdAt?: true
    createdById?: true
    projectId?: true
  }

  export type ChangeEventMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    description?: true
    reason?: true
    createdAt?: true
    createdById?: true
    projectId?: true
  }

  export type ChangeEventCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    oldValues?: true
    newValues?: true
    description?: true
    reason?: true
    createdAt?: true
    createdById?: true
    projectId?: true
    _all?: true
  }

  export type ChangeEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChangeEvent to aggregate.
     */
    where?: ChangeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChangeEvents to fetch.
     */
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChangeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChangeEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChangeEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChangeEvents
    **/
    _count?: true | ChangeEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChangeEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChangeEventMaxAggregateInputType
  }

  export type GetChangeEventAggregateType<T extends ChangeEventAggregateArgs> = {
        [P in keyof T & keyof AggregateChangeEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChangeEvent[P]>
      : GetScalarType<T[P], AggregateChangeEvent[P]>
  }




  export type ChangeEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChangeEventWhereInput
    orderBy?: ChangeEventOrderByWithAggregationInput | ChangeEventOrderByWithAggregationInput[]
    by: ChangeEventScalarFieldEnum[] | ChangeEventScalarFieldEnum
    having?: ChangeEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChangeEventCountAggregateInputType | true
    _min?: ChangeEventMinAggregateInputType
    _max?: ChangeEventMaxAggregateInputType
  }

  export type ChangeEventGroupByOutputType = {
    id: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues: JsonValue | null
    newValues: JsonValue | null
    description: string | null
    reason: string | null
    createdAt: Date
    createdById: string
    projectId: string
    _count: ChangeEventCountAggregateOutputType | null
    _min: ChangeEventMinAggregateOutputType | null
    _max: ChangeEventMaxAggregateOutputType | null
  }

  type GetChangeEventGroupByPayload<T extends ChangeEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChangeEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChangeEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChangeEventGroupByOutputType[P]>
            : GetScalarType<T[P], ChangeEventGroupByOutputType[P]>
        }
      >
    >


  export type ChangeEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    reason?: boolean
    createdAt?: boolean
    createdById?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["changeEvent"]>

  export type ChangeEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    reason?: boolean
    createdAt?: boolean
    createdById?: boolean
    projectId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["changeEvent"]>

  export type ChangeEventSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    reason?: boolean
    createdAt?: boolean
    createdById?: boolean
    projectId?: boolean
  }

  export type ChangeEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ChangeEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ChangeEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChangeEvent"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: string
      entityId: string
      changeType: $Enums.ChangeType
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      description: string | null
      reason: string | null
      createdAt: Date
      createdById: string
      projectId: string
    }, ExtArgs["result"]["changeEvent"]>
    composites: {}
  }

  type ChangeEventGetPayload<S extends boolean | null | undefined | ChangeEventDefaultArgs> = $Result.GetResult<Prisma.$ChangeEventPayload, S>

  type ChangeEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChangeEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChangeEventCountAggregateInputType | true
    }

  export interface ChangeEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChangeEvent'], meta: { name: 'ChangeEvent' } }
    /**
     * Find zero or one ChangeEvent that matches the filter.
     * @param {ChangeEventFindUniqueArgs} args - Arguments to find a ChangeEvent
     * @example
     * // Get one ChangeEvent
     * const changeEvent = await prisma.changeEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChangeEventFindUniqueArgs>(args: SelectSubset<T, ChangeEventFindUniqueArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChangeEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChangeEventFindUniqueOrThrowArgs} args - Arguments to find a ChangeEvent
     * @example
     * // Get one ChangeEvent
     * const changeEvent = await prisma.changeEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChangeEventFindUniqueOrThrowArgs>(args: SelectSubset<T, ChangeEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChangeEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventFindFirstArgs} args - Arguments to find a ChangeEvent
     * @example
     * // Get one ChangeEvent
     * const changeEvent = await prisma.changeEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChangeEventFindFirstArgs>(args?: SelectSubset<T, ChangeEventFindFirstArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChangeEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventFindFirstOrThrowArgs} args - Arguments to find a ChangeEvent
     * @example
     * // Get one ChangeEvent
     * const changeEvent = await prisma.changeEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChangeEventFindFirstOrThrowArgs>(args?: SelectSubset<T, ChangeEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChangeEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChangeEvents
     * const changeEvents = await prisma.changeEvent.findMany()
     * 
     * // Get first 10 ChangeEvents
     * const changeEvents = await prisma.changeEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const changeEventWithIdOnly = await prisma.changeEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChangeEventFindManyArgs>(args?: SelectSubset<T, ChangeEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChangeEvent.
     * @param {ChangeEventCreateArgs} args - Arguments to create a ChangeEvent.
     * @example
     * // Create one ChangeEvent
     * const ChangeEvent = await prisma.changeEvent.create({
     *   data: {
     *     // ... data to create a ChangeEvent
     *   }
     * })
     * 
     */
    create<T extends ChangeEventCreateArgs>(args: SelectSubset<T, ChangeEventCreateArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChangeEvents.
     * @param {ChangeEventCreateManyArgs} args - Arguments to create many ChangeEvents.
     * @example
     * // Create many ChangeEvents
     * const changeEvent = await prisma.changeEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChangeEventCreateManyArgs>(args?: SelectSubset<T, ChangeEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChangeEvents and returns the data saved in the database.
     * @param {ChangeEventCreateManyAndReturnArgs} args - Arguments to create many ChangeEvents.
     * @example
     * // Create many ChangeEvents
     * const changeEvent = await prisma.changeEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChangeEvents and only return the `id`
     * const changeEventWithIdOnly = await prisma.changeEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChangeEventCreateManyAndReturnArgs>(args?: SelectSubset<T, ChangeEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChangeEvent.
     * @param {ChangeEventDeleteArgs} args - Arguments to delete one ChangeEvent.
     * @example
     * // Delete one ChangeEvent
     * const ChangeEvent = await prisma.changeEvent.delete({
     *   where: {
     *     // ... filter to delete one ChangeEvent
     *   }
     * })
     * 
     */
    delete<T extends ChangeEventDeleteArgs>(args: SelectSubset<T, ChangeEventDeleteArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChangeEvent.
     * @param {ChangeEventUpdateArgs} args - Arguments to update one ChangeEvent.
     * @example
     * // Update one ChangeEvent
     * const changeEvent = await prisma.changeEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChangeEventUpdateArgs>(args: SelectSubset<T, ChangeEventUpdateArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChangeEvents.
     * @param {ChangeEventDeleteManyArgs} args - Arguments to filter ChangeEvents to delete.
     * @example
     * // Delete a few ChangeEvents
     * const { count } = await prisma.changeEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChangeEventDeleteManyArgs>(args?: SelectSubset<T, ChangeEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChangeEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChangeEvents
     * const changeEvent = await prisma.changeEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChangeEventUpdateManyArgs>(args: SelectSubset<T, ChangeEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChangeEvent.
     * @param {ChangeEventUpsertArgs} args - Arguments to update or create a ChangeEvent.
     * @example
     * // Update or create a ChangeEvent
     * const changeEvent = await prisma.changeEvent.upsert({
     *   create: {
     *     // ... data to create a ChangeEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChangeEvent we want to update
     *   }
     * })
     */
    upsert<T extends ChangeEventUpsertArgs>(args: SelectSubset<T, ChangeEventUpsertArgs<ExtArgs>>): Prisma__ChangeEventClient<$Result.GetResult<Prisma.$ChangeEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChangeEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventCountArgs} args - Arguments to filter ChangeEvents to count.
     * @example
     * // Count the number of ChangeEvents
     * const count = await prisma.changeEvent.count({
     *   where: {
     *     // ... the filter for the ChangeEvents we want to count
     *   }
     * })
    **/
    count<T extends ChangeEventCountArgs>(
      args?: Subset<T, ChangeEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChangeEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChangeEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChangeEventAggregateArgs>(args: Subset<T, ChangeEventAggregateArgs>): Prisma.PrismaPromise<GetChangeEventAggregateType<T>>

    /**
     * Group by ChangeEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChangeEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChangeEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChangeEventGroupByArgs['orderBy'] }
        : { orderBy?: ChangeEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChangeEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChangeEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChangeEvent model
   */
  readonly fields: ChangeEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChangeEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChangeEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChangeEvent model
   */ 
  interface ChangeEventFieldRefs {
    readonly id: FieldRef<"ChangeEvent", 'String'>
    readonly entityType: FieldRef<"ChangeEvent", 'String'>
    readonly entityId: FieldRef<"ChangeEvent", 'String'>
    readonly changeType: FieldRef<"ChangeEvent", 'ChangeType'>
    readonly oldValues: FieldRef<"ChangeEvent", 'Json'>
    readonly newValues: FieldRef<"ChangeEvent", 'Json'>
    readonly description: FieldRef<"ChangeEvent", 'String'>
    readonly reason: FieldRef<"ChangeEvent", 'String'>
    readonly createdAt: FieldRef<"ChangeEvent", 'DateTime'>
    readonly createdById: FieldRef<"ChangeEvent", 'String'>
    readonly projectId: FieldRef<"ChangeEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ChangeEvent findUnique
   */
  export type ChangeEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter, which ChangeEvent to fetch.
     */
    where: ChangeEventWhereUniqueInput
  }

  /**
   * ChangeEvent findUniqueOrThrow
   */
  export type ChangeEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter, which ChangeEvent to fetch.
     */
    where: ChangeEventWhereUniqueInput
  }

  /**
   * ChangeEvent findFirst
   */
  export type ChangeEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter, which ChangeEvent to fetch.
     */
    where?: ChangeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChangeEvents to fetch.
     */
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChangeEvents.
     */
    cursor?: ChangeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChangeEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChangeEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChangeEvents.
     */
    distinct?: ChangeEventScalarFieldEnum | ChangeEventScalarFieldEnum[]
  }

  /**
   * ChangeEvent findFirstOrThrow
   */
  export type ChangeEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter, which ChangeEvent to fetch.
     */
    where?: ChangeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChangeEvents to fetch.
     */
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChangeEvents.
     */
    cursor?: ChangeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChangeEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChangeEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChangeEvents.
     */
    distinct?: ChangeEventScalarFieldEnum | ChangeEventScalarFieldEnum[]
  }

  /**
   * ChangeEvent findMany
   */
  export type ChangeEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter, which ChangeEvents to fetch.
     */
    where?: ChangeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChangeEvents to fetch.
     */
    orderBy?: ChangeEventOrderByWithRelationInput | ChangeEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChangeEvents.
     */
    cursor?: ChangeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChangeEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChangeEvents.
     */
    skip?: number
    distinct?: ChangeEventScalarFieldEnum | ChangeEventScalarFieldEnum[]
  }

  /**
   * ChangeEvent create
   */
  export type ChangeEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * The data needed to create a ChangeEvent.
     */
    data: XOR<ChangeEventCreateInput, ChangeEventUncheckedCreateInput>
  }

  /**
   * ChangeEvent createMany
   */
  export type ChangeEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChangeEvents.
     */
    data: ChangeEventCreateManyInput | ChangeEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChangeEvent createManyAndReturn
   */
  export type ChangeEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChangeEvents.
     */
    data: ChangeEventCreateManyInput | ChangeEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChangeEvent update
   */
  export type ChangeEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * The data needed to update a ChangeEvent.
     */
    data: XOR<ChangeEventUpdateInput, ChangeEventUncheckedUpdateInput>
    /**
     * Choose, which ChangeEvent to update.
     */
    where: ChangeEventWhereUniqueInput
  }

  /**
   * ChangeEvent updateMany
   */
  export type ChangeEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChangeEvents.
     */
    data: XOR<ChangeEventUpdateManyMutationInput, ChangeEventUncheckedUpdateManyInput>
    /**
     * Filter which ChangeEvents to update
     */
    where?: ChangeEventWhereInput
  }

  /**
   * ChangeEvent upsert
   */
  export type ChangeEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * The filter to search for the ChangeEvent to update in case it exists.
     */
    where: ChangeEventWhereUniqueInput
    /**
     * In case the ChangeEvent found by the `where` argument doesn't exist, create a new ChangeEvent with this data.
     */
    create: XOR<ChangeEventCreateInput, ChangeEventUncheckedCreateInput>
    /**
     * In case the ChangeEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChangeEventUpdateInput, ChangeEventUncheckedUpdateInput>
  }

  /**
   * ChangeEvent delete
   */
  export type ChangeEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
    /**
     * Filter which ChangeEvent to delete.
     */
    where: ChangeEventWhereUniqueInput
  }

  /**
   * ChangeEvent deleteMany
   */
  export type ChangeEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChangeEvents to delete
     */
    where?: ChangeEventWhereInput
  }

  /**
   * ChangeEvent without action
   */
  export type ChangeEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChangeEvent
     */
    select?: ChangeEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChangeEventInclude<ExtArgs> | null
  }


  /**
   * Model ComplianceReport
   */

  export type AggregateComplianceReport = {
    _count: ComplianceReportCountAggregateOutputType | null
    _avg: ComplianceReportAvgAggregateOutputType | null
    _sum: ComplianceReportSumAggregateOutputType | null
    _min: ComplianceReportMinAggregateOutputType | null
    _max: ComplianceReportMaxAggregateOutputType | null
  }

  export type ComplianceReportAvgAggregateOutputType = {
    score: number | null
  }

  export type ComplianceReportSumAggregateOutputType = {
    score: number | null
  }

  export type ComplianceReportMinAggregateOutputType = {
    id: string | null
    standard: $Enums.ComplianceStandard | null
    status: $Enums.ComplianceStatus | null
    score: number | null
    assessedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    assessedById: string | null
  }

  export type ComplianceReportMaxAggregateOutputType = {
    id: string | null
    standard: $Enums.ComplianceStandard | null
    status: $Enums.ComplianceStatus | null
    score: number | null
    assessedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
    assessedById: string | null
  }

  export type ComplianceReportCountAggregateOutputType = {
    id: number
    standard: number
    status: number
    score: number
    findings: number
    recommendations: number
    assessedAt: number
    createdAt: number
    updatedAt: number
    projectId: number
    assessedById: number
    _all: number
  }


  export type ComplianceReportAvgAggregateInputType = {
    score?: true
  }

  export type ComplianceReportSumAggregateInputType = {
    score?: true
  }

  export type ComplianceReportMinAggregateInputType = {
    id?: true
    standard?: true
    status?: true
    score?: true
    assessedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assessedById?: true
  }

  export type ComplianceReportMaxAggregateInputType = {
    id?: true
    standard?: true
    status?: true
    score?: true
    assessedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assessedById?: true
  }

  export type ComplianceReportCountAggregateInputType = {
    id?: true
    standard?: true
    status?: true
    score?: true
    findings?: true
    recommendations?: true
    assessedAt?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    assessedById?: true
    _all?: true
  }

  export type ComplianceReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplianceReport to aggregate.
     */
    where?: ComplianceReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplianceReports to fetch.
     */
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplianceReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplianceReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplianceReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComplianceReports
    **/
    _count?: true | ComplianceReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplianceReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplianceReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplianceReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplianceReportMaxAggregateInputType
  }

  export type GetComplianceReportAggregateType<T extends ComplianceReportAggregateArgs> = {
        [P in keyof T & keyof AggregateComplianceReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplianceReport[P]>
      : GetScalarType<T[P], AggregateComplianceReport[P]>
  }




  export type ComplianceReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplianceReportWhereInput
    orderBy?: ComplianceReportOrderByWithAggregationInput | ComplianceReportOrderByWithAggregationInput[]
    by: ComplianceReportScalarFieldEnum[] | ComplianceReportScalarFieldEnum
    having?: ComplianceReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplianceReportCountAggregateInputType | true
    _avg?: ComplianceReportAvgAggregateInputType
    _sum?: ComplianceReportSumAggregateInputType
    _min?: ComplianceReportMinAggregateInputType
    _max?: ComplianceReportMaxAggregateInputType
  }

  export type ComplianceReportGroupByOutputType = {
    id: string
    standard: $Enums.ComplianceStandard
    status: $Enums.ComplianceStatus
    score: number | null
    findings: JsonValue | null
    recommendations: JsonValue | null
    assessedAt: Date | null
    createdAt: Date
    updatedAt: Date
    projectId: string
    assessedById: string | null
    _count: ComplianceReportCountAggregateOutputType | null
    _avg: ComplianceReportAvgAggregateOutputType | null
    _sum: ComplianceReportSumAggregateOutputType | null
    _min: ComplianceReportMinAggregateOutputType | null
    _max: ComplianceReportMaxAggregateOutputType | null
  }

  type GetComplianceReportGroupByPayload<T extends ComplianceReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplianceReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplianceReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplianceReportGroupByOutputType[P]>
            : GetScalarType<T[P], ComplianceReportGroupByOutputType[P]>
        }
      >
    >


  export type ComplianceReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    standard?: boolean
    status?: boolean
    score?: boolean
    findings?: boolean
    recommendations?: boolean
    assessedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assessedById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assessedBy?: boolean | ComplianceReport$assessedByArgs<ExtArgs>
  }, ExtArgs["result"]["complianceReport"]>

  export type ComplianceReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    standard?: boolean
    status?: boolean
    score?: boolean
    findings?: boolean
    recommendations?: boolean
    assessedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assessedById?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assessedBy?: boolean | ComplianceReport$assessedByArgs<ExtArgs>
  }, ExtArgs["result"]["complianceReport"]>

  export type ComplianceReportSelectScalar = {
    id?: boolean
    standard?: boolean
    status?: boolean
    score?: boolean
    findings?: boolean
    recommendations?: boolean
    assessedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    assessedById?: boolean
  }

  export type ComplianceReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assessedBy?: boolean | ComplianceReport$assessedByArgs<ExtArgs>
  }
  export type ComplianceReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    assessedBy?: boolean | ComplianceReport$assessedByArgs<ExtArgs>
  }

  export type $ComplianceReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComplianceReport"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      assessedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      standard: $Enums.ComplianceStandard
      status: $Enums.ComplianceStatus
      score: number | null
      findings: Prisma.JsonValue | null
      recommendations: Prisma.JsonValue | null
      assessedAt: Date | null
      createdAt: Date
      updatedAt: Date
      projectId: string
      assessedById: string | null
    }, ExtArgs["result"]["complianceReport"]>
    composites: {}
  }

  type ComplianceReportGetPayload<S extends boolean | null | undefined | ComplianceReportDefaultArgs> = $Result.GetResult<Prisma.$ComplianceReportPayload, S>

  type ComplianceReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ComplianceReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComplianceReportCountAggregateInputType | true
    }

  export interface ComplianceReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComplianceReport'], meta: { name: 'ComplianceReport' } }
    /**
     * Find zero or one ComplianceReport that matches the filter.
     * @param {ComplianceReportFindUniqueArgs} args - Arguments to find a ComplianceReport
     * @example
     * // Get one ComplianceReport
     * const complianceReport = await prisma.complianceReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplianceReportFindUniqueArgs>(args: SelectSubset<T, ComplianceReportFindUniqueArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ComplianceReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ComplianceReportFindUniqueOrThrowArgs} args - Arguments to find a ComplianceReport
     * @example
     * // Get one ComplianceReport
     * const complianceReport = await prisma.complianceReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplianceReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplianceReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ComplianceReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportFindFirstArgs} args - Arguments to find a ComplianceReport
     * @example
     * // Get one ComplianceReport
     * const complianceReport = await prisma.complianceReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplianceReportFindFirstArgs>(args?: SelectSubset<T, ComplianceReportFindFirstArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ComplianceReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportFindFirstOrThrowArgs} args - Arguments to find a ComplianceReport
     * @example
     * // Get one ComplianceReport
     * const complianceReport = await prisma.complianceReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplianceReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplianceReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ComplianceReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComplianceReports
     * const complianceReports = await prisma.complianceReport.findMany()
     * 
     * // Get first 10 ComplianceReports
     * const complianceReports = await prisma.complianceReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complianceReportWithIdOnly = await prisma.complianceReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplianceReportFindManyArgs>(args?: SelectSubset<T, ComplianceReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ComplianceReport.
     * @param {ComplianceReportCreateArgs} args - Arguments to create a ComplianceReport.
     * @example
     * // Create one ComplianceReport
     * const ComplianceReport = await prisma.complianceReport.create({
     *   data: {
     *     // ... data to create a ComplianceReport
     *   }
     * })
     * 
     */
    create<T extends ComplianceReportCreateArgs>(args: SelectSubset<T, ComplianceReportCreateArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ComplianceReports.
     * @param {ComplianceReportCreateManyArgs} args - Arguments to create many ComplianceReports.
     * @example
     * // Create many ComplianceReports
     * const complianceReport = await prisma.complianceReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplianceReportCreateManyArgs>(args?: SelectSubset<T, ComplianceReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComplianceReports and returns the data saved in the database.
     * @param {ComplianceReportCreateManyAndReturnArgs} args - Arguments to create many ComplianceReports.
     * @example
     * // Create many ComplianceReports
     * const complianceReport = await prisma.complianceReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComplianceReports and only return the `id`
     * const complianceReportWithIdOnly = await prisma.complianceReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComplianceReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ComplianceReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ComplianceReport.
     * @param {ComplianceReportDeleteArgs} args - Arguments to delete one ComplianceReport.
     * @example
     * // Delete one ComplianceReport
     * const ComplianceReport = await prisma.complianceReport.delete({
     *   where: {
     *     // ... filter to delete one ComplianceReport
     *   }
     * })
     * 
     */
    delete<T extends ComplianceReportDeleteArgs>(args: SelectSubset<T, ComplianceReportDeleteArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ComplianceReport.
     * @param {ComplianceReportUpdateArgs} args - Arguments to update one ComplianceReport.
     * @example
     * // Update one ComplianceReport
     * const complianceReport = await prisma.complianceReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplianceReportUpdateArgs>(args: SelectSubset<T, ComplianceReportUpdateArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ComplianceReports.
     * @param {ComplianceReportDeleteManyArgs} args - Arguments to filter ComplianceReports to delete.
     * @example
     * // Delete a few ComplianceReports
     * const { count } = await prisma.complianceReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplianceReportDeleteManyArgs>(args?: SelectSubset<T, ComplianceReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplianceReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComplianceReports
     * const complianceReport = await prisma.complianceReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplianceReportUpdateManyArgs>(args: SelectSubset<T, ComplianceReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComplianceReport.
     * @param {ComplianceReportUpsertArgs} args - Arguments to update or create a ComplianceReport.
     * @example
     * // Update or create a ComplianceReport
     * const complianceReport = await prisma.complianceReport.upsert({
     *   create: {
     *     // ... data to create a ComplianceReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComplianceReport we want to update
     *   }
     * })
     */
    upsert<T extends ComplianceReportUpsertArgs>(args: SelectSubset<T, ComplianceReportUpsertArgs<ExtArgs>>): Prisma__ComplianceReportClient<$Result.GetResult<Prisma.$ComplianceReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ComplianceReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportCountArgs} args - Arguments to filter ComplianceReports to count.
     * @example
     * // Count the number of ComplianceReports
     * const count = await prisma.complianceReport.count({
     *   where: {
     *     // ... the filter for the ComplianceReports we want to count
     *   }
     * })
    **/
    count<T extends ComplianceReportCountArgs>(
      args?: Subset<T, ComplianceReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplianceReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComplianceReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplianceReportAggregateArgs>(args: Subset<T, ComplianceReportAggregateArgs>): Prisma.PrismaPromise<GetComplianceReportAggregateType<T>>

    /**
     * Group by ComplianceReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplianceReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplianceReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplianceReportGroupByArgs['orderBy'] }
        : { orderBy?: ComplianceReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplianceReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplianceReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComplianceReport model
   */
  readonly fields: ComplianceReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComplianceReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplianceReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assessedBy<T extends ComplianceReport$assessedByArgs<ExtArgs> = {}>(args?: Subset<T, ComplianceReport$assessedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComplianceReport model
   */ 
  interface ComplianceReportFieldRefs {
    readonly id: FieldRef<"ComplianceReport", 'String'>
    readonly standard: FieldRef<"ComplianceReport", 'ComplianceStandard'>
    readonly status: FieldRef<"ComplianceReport", 'ComplianceStatus'>
    readonly score: FieldRef<"ComplianceReport", 'Float'>
    readonly findings: FieldRef<"ComplianceReport", 'Json'>
    readonly recommendations: FieldRef<"ComplianceReport", 'Json'>
    readonly assessedAt: FieldRef<"ComplianceReport", 'DateTime'>
    readonly createdAt: FieldRef<"ComplianceReport", 'DateTime'>
    readonly updatedAt: FieldRef<"ComplianceReport", 'DateTime'>
    readonly projectId: FieldRef<"ComplianceReport", 'String'>
    readonly assessedById: FieldRef<"ComplianceReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComplianceReport findUnique
   */
  export type ComplianceReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter, which ComplianceReport to fetch.
     */
    where: ComplianceReportWhereUniqueInput
  }

  /**
   * ComplianceReport findUniqueOrThrow
   */
  export type ComplianceReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter, which ComplianceReport to fetch.
     */
    where: ComplianceReportWhereUniqueInput
  }

  /**
   * ComplianceReport findFirst
   */
  export type ComplianceReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter, which ComplianceReport to fetch.
     */
    where?: ComplianceReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplianceReports to fetch.
     */
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplianceReports.
     */
    cursor?: ComplianceReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplianceReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplianceReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplianceReports.
     */
    distinct?: ComplianceReportScalarFieldEnum | ComplianceReportScalarFieldEnum[]
  }

  /**
   * ComplianceReport findFirstOrThrow
   */
  export type ComplianceReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter, which ComplianceReport to fetch.
     */
    where?: ComplianceReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplianceReports to fetch.
     */
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplianceReports.
     */
    cursor?: ComplianceReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplianceReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplianceReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplianceReports.
     */
    distinct?: ComplianceReportScalarFieldEnum | ComplianceReportScalarFieldEnum[]
  }

  /**
   * ComplianceReport findMany
   */
  export type ComplianceReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter, which ComplianceReports to fetch.
     */
    where?: ComplianceReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplianceReports to fetch.
     */
    orderBy?: ComplianceReportOrderByWithRelationInput | ComplianceReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComplianceReports.
     */
    cursor?: ComplianceReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplianceReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplianceReports.
     */
    skip?: number
    distinct?: ComplianceReportScalarFieldEnum | ComplianceReportScalarFieldEnum[]
  }

  /**
   * ComplianceReport create
   */
  export type ComplianceReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * The data needed to create a ComplianceReport.
     */
    data: XOR<ComplianceReportCreateInput, ComplianceReportUncheckedCreateInput>
  }

  /**
   * ComplianceReport createMany
   */
  export type ComplianceReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComplianceReports.
     */
    data: ComplianceReportCreateManyInput | ComplianceReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComplianceReport createManyAndReturn
   */
  export type ComplianceReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ComplianceReports.
     */
    data: ComplianceReportCreateManyInput | ComplianceReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComplianceReport update
   */
  export type ComplianceReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * The data needed to update a ComplianceReport.
     */
    data: XOR<ComplianceReportUpdateInput, ComplianceReportUncheckedUpdateInput>
    /**
     * Choose, which ComplianceReport to update.
     */
    where: ComplianceReportWhereUniqueInput
  }

  /**
   * ComplianceReport updateMany
   */
  export type ComplianceReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComplianceReports.
     */
    data: XOR<ComplianceReportUpdateManyMutationInput, ComplianceReportUncheckedUpdateManyInput>
    /**
     * Filter which ComplianceReports to update
     */
    where?: ComplianceReportWhereInput
  }

  /**
   * ComplianceReport upsert
   */
  export type ComplianceReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * The filter to search for the ComplianceReport to update in case it exists.
     */
    where: ComplianceReportWhereUniqueInput
    /**
     * In case the ComplianceReport found by the `where` argument doesn't exist, create a new ComplianceReport with this data.
     */
    create: XOR<ComplianceReportCreateInput, ComplianceReportUncheckedCreateInput>
    /**
     * In case the ComplianceReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplianceReportUpdateInput, ComplianceReportUncheckedUpdateInput>
  }

  /**
   * ComplianceReport delete
   */
  export type ComplianceReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
    /**
     * Filter which ComplianceReport to delete.
     */
    where: ComplianceReportWhereUniqueInput
  }

  /**
   * ComplianceReport deleteMany
   */
  export type ComplianceReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplianceReports to delete
     */
    where?: ComplianceReportWhereInput
  }

  /**
   * ComplianceReport.assessedBy
   */
  export type ComplianceReport$assessedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ComplianceReport without action
   */
  export type ComplianceReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplianceReport
     */
    select?: ComplianceReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplianceReportInclude<ExtArgs> | null
  }


  /**
   * Model RiskAnalytics
   */

  export type AggregateRiskAnalytics = {
    _count: RiskAnalyticsCountAggregateOutputType | null
    _avg: RiskAnalyticsAvgAggregateOutputType | null
    _sum: RiskAnalyticsSumAggregateOutputType | null
    _min: RiskAnalyticsMinAggregateOutputType | null
    _max: RiskAnalyticsMaxAggregateOutputType | null
  }

  export type RiskAnalyticsAvgAggregateOutputType = {
    totalRpn: number | null
    avgSeverity: number | null
    avgOccurrence: number | null
    avgDetection: number | null
    highRiskCount: number | null
  }

  export type RiskAnalyticsSumAggregateOutputType = {
    totalRpn: number | null
    avgSeverity: number | null
    avgOccurrence: number | null
    avgDetection: number | null
    highRiskCount: number | null
  }

  export type RiskAnalyticsMinAggregateOutputType = {
    id: string | null
    period: Date | null
    totalRpn: number | null
    avgSeverity: number | null
    avgOccurrence: number | null
    avgDetection: number | null
    highRiskCount: number | null
    createdAt: Date | null
    projectId: string | null
    fmeaId: string | null
  }

  export type RiskAnalyticsMaxAggregateOutputType = {
    id: string | null
    period: Date | null
    totalRpn: number | null
    avgSeverity: number | null
    avgOccurrence: number | null
    avgDetection: number | null
    highRiskCount: number | null
    createdAt: Date | null
    projectId: string | null
    fmeaId: string | null
  }

  export type RiskAnalyticsCountAggregateOutputType = {
    id: number
    period: number
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData: number
    createdAt: number
    projectId: number
    fmeaId: number
    _all: number
  }


  export type RiskAnalyticsAvgAggregateInputType = {
    totalRpn?: true
    avgSeverity?: true
    avgOccurrence?: true
    avgDetection?: true
    highRiskCount?: true
  }

  export type RiskAnalyticsSumAggregateInputType = {
    totalRpn?: true
    avgSeverity?: true
    avgOccurrence?: true
    avgDetection?: true
    highRiskCount?: true
  }

  export type RiskAnalyticsMinAggregateInputType = {
    id?: true
    period?: true
    totalRpn?: true
    avgSeverity?: true
    avgOccurrence?: true
    avgDetection?: true
    highRiskCount?: true
    createdAt?: true
    projectId?: true
    fmeaId?: true
  }

  export type RiskAnalyticsMaxAggregateInputType = {
    id?: true
    period?: true
    totalRpn?: true
    avgSeverity?: true
    avgOccurrence?: true
    avgDetection?: true
    highRiskCount?: true
    createdAt?: true
    projectId?: true
    fmeaId?: true
  }

  export type RiskAnalyticsCountAggregateInputType = {
    id?: true
    period?: true
    totalRpn?: true
    avgSeverity?: true
    avgOccurrence?: true
    avgDetection?: true
    highRiskCount?: true
    trendData?: true
    createdAt?: true
    projectId?: true
    fmeaId?: true
    _all?: true
  }

  export type RiskAnalyticsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAnalytics to aggregate.
     */
    where?: RiskAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalytics to fetch.
     */
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RiskAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RiskAnalytics
    **/
    _count?: true | RiskAnalyticsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RiskAnalyticsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RiskAnalyticsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RiskAnalyticsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RiskAnalyticsMaxAggregateInputType
  }

  export type GetRiskAnalyticsAggregateType<T extends RiskAnalyticsAggregateArgs> = {
        [P in keyof T & keyof AggregateRiskAnalytics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRiskAnalytics[P]>
      : GetScalarType<T[P], AggregateRiskAnalytics[P]>
  }




  export type RiskAnalyticsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RiskAnalyticsWhereInput
    orderBy?: RiskAnalyticsOrderByWithAggregationInput | RiskAnalyticsOrderByWithAggregationInput[]
    by: RiskAnalyticsScalarFieldEnum[] | RiskAnalyticsScalarFieldEnum
    having?: RiskAnalyticsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RiskAnalyticsCountAggregateInputType | true
    _avg?: RiskAnalyticsAvgAggregateInputType
    _sum?: RiskAnalyticsSumAggregateInputType
    _min?: RiskAnalyticsMinAggregateInputType
    _max?: RiskAnalyticsMaxAggregateInputType
  }

  export type RiskAnalyticsGroupByOutputType = {
    id: string
    period: Date
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData: JsonValue | null
    createdAt: Date
    projectId: string
    fmeaId: string | null
    _count: RiskAnalyticsCountAggregateOutputType | null
    _avg: RiskAnalyticsAvgAggregateOutputType | null
    _sum: RiskAnalyticsSumAggregateOutputType | null
    _min: RiskAnalyticsMinAggregateOutputType | null
    _max: RiskAnalyticsMaxAggregateOutputType | null
  }

  type GetRiskAnalyticsGroupByPayload<T extends RiskAnalyticsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RiskAnalyticsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RiskAnalyticsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RiskAnalyticsGroupByOutputType[P]>
            : GetScalarType<T[P], RiskAnalyticsGroupByOutputType[P]>
        }
      >
    >


  export type RiskAnalyticsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    period?: boolean
    totalRpn?: boolean
    avgSeverity?: boolean
    avgOccurrence?: boolean
    avgDetection?: boolean
    highRiskCount?: boolean
    trendData?: boolean
    createdAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | RiskAnalytics$fmeaArgs<ExtArgs>
  }, ExtArgs["result"]["riskAnalytics"]>

  export type RiskAnalyticsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    period?: boolean
    totalRpn?: boolean
    avgSeverity?: boolean
    avgOccurrence?: boolean
    avgDetection?: boolean
    highRiskCount?: boolean
    trendData?: boolean
    createdAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | RiskAnalytics$fmeaArgs<ExtArgs>
  }, ExtArgs["result"]["riskAnalytics"]>

  export type RiskAnalyticsSelectScalar = {
    id?: boolean
    period?: boolean
    totalRpn?: boolean
    avgSeverity?: boolean
    avgOccurrence?: boolean
    avgDetection?: boolean
    highRiskCount?: boolean
    trendData?: boolean
    createdAt?: boolean
    projectId?: boolean
    fmeaId?: boolean
  }

  export type RiskAnalyticsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | RiskAnalytics$fmeaArgs<ExtArgs>
  }
  export type RiskAnalyticsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    fmea?: boolean | RiskAnalytics$fmeaArgs<ExtArgs>
  }

  export type $RiskAnalyticsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RiskAnalytics"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      fmea: Prisma.$FmeaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      period: Date
      totalRpn: number
      avgSeverity: number
      avgOccurrence: number
      avgDetection: number
      highRiskCount: number
      trendData: Prisma.JsonValue | null
      createdAt: Date
      projectId: string
      fmeaId: string | null
    }, ExtArgs["result"]["riskAnalytics"]>
    composites: {}
  }

  type RiskAnalyticsGetPayload<S extends boolean | null | undefined | RiskAnalyticsDefaultArgs> = $Result.GetResult<Prisma.$RiskAnalyticsPayload, S>

  type RiskAnalyticsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RiskAnalyticsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RiskAnalyticsCountAggregateInputType | true
    }

  export interface RiskAnalyticsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RiskAnalytics'], meta: { name: 'RiskAnalytics' } }
    /**
     * Find zero or one RiskAnalytics that matches the filter.
     * @param {RiskAnalyticsFindUniqueArgs} args - Arguments to find a RiskAnalytics
     * @example
     * // Get one RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RiskAnalyticsFindUniqueArgs>(args: SelectSubset<T, RiskAnalyticsFindUniqueArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RiskAnalytics that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RiskAnalyticsFindUniqueOrThrowArgs} args - Arguments to find a RiskAnalytics
     * @example
     * // Get one RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RiskAnalyticsFindUniqueOrThrowArgs>(args: SelectSubset<T, RiskAnalyticsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RiskAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsFindFirstArgs} args - Arguments to find a RiskAnalytics
     * @example
     * // Get one RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RiskAnalyticsFindFirstArgs>(args?: SelectSubset<T, RiskAnalyticsFindFirstArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RiskAnalytics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsFindFirstOrThrowArgs} args - Arguments to find a RiskAnalytics
     * @example
     * // Get one RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RiskAnalyticsFindFirstOrThrowArgs>(args?: SelectSubset<T, RiskAnalyticsFindFirstOrThrowArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RiskAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findMany()
     * 
     * // Get first 10 RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const riskAnalyticsWithIdOnly = await prisma.riskAnalytics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RiskAnalyticsFindManyArgs>(args?: SelectSubset<T, RiskAnalyticsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RiskAnalytics.
     * @param {RiskAnalyticsCreateArgs} args - Arguments to create a RiskAnalytics.
     * @example
     * // Create one RiskAnalytics
     * const RiskAnalytics = await prisma.riskAnalytics.create({
     *   data: {
     *     // ... data to create a RiskAnalytics
     *   }
     * })
     * 
     */
    create<T extends RiskAnalyticsCreateArgs>(args: SelectSubset<T, RiskAnalyticsCreateArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RiskAnalytics.
     * @param {RiskAnalyticsCreateManyArgs} args - Arguments to create many RiskAnalytics.
     * @example
     * // Create many RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RiskAnalyticsCreateManyArgs>(args?: SelectSubset<T, RiskAnalyticsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RiskAnalytics and returns the data saved in the database.
     * @param {RiskAnalyticsCreateManyAndReturnArgs} args - Arguments to create many RiskAnalytics.
     * @example
     * // Create many RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RiskAnalytics and only return the `id`
     * const riskAnalyticsWithIdOnly = await prisma.riskAnalytics.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RiskAnalyticsCreateManyAndReturnArgs>(args?: SelectSubset<T, RiskAnalyticsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RiskAnalytics.
     * @param {RiskAnalyticsDeleteArgs} args - Arguments to delete one RiskAnalytics.
     * @example
     * // Delete one RiskAnalytics
     * const RiskAnalytics = await prisma.riskAnalytics.delete({
     *   where: {
     *     // ... filter to delete one RiskAnalytics
     *   }
     * })
     * 
     */
    delete<T extends RiskAnalyticsDeleteArgs>(args: SelectSubset<T, RiskAnalyticsDeleteArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RiskAnalytics.
     * @param {RiskAnalyticsUpdateArgs} args - Arguments to update one RiskAnalytics.
     * @example
     * // Update one RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RiskAnalyticsUpdateArgs>(args: SelectSubset<T, RiskAnalyticsUpdateArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RiskAnalytics.
     * @param {RiskAnalyticsDeleteManyArgs} args - Arguments to filter RiskAnalytics to delete.
     * @example
     * // Delete a few RiskAnalytics
     * const { count } = await prisma.riskAnalytics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RiskAnalyticsDeleteManyArgs>(args?: SelectSubset<T, RiskAnalyticsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RiskAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RiskAnalyticsUpdateManyArgs>(args: SelectSubset<T, RiskAnalyticsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RiskAnalytics.
     * @param {RiskAnalyticsUpsertArgs} args - Arguments to update or create a RiskAnalytics.
     * @example
     * // Update or create a RiskAnalytics
     * const riskAnalytics = await prisma.riskAnalytics.upsert({
     *   create: {
     *     // ... data to create a RiskAnalytics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RiskAnalytics we want to update
     *   }
     * })
     */
    upsert<T extends RiskAnalyticsUpsertArgs>(args: SelectSubset<T, RiskAnalyticsUpsertArgs<ExtArgs>>): Prisma__RiskAnalyticsClient<$Result.GetResult<Prisma.$RiskAnalyticsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RiskAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsCountArgs} args - Arguments to filter RiskAnalytics to count.
     * @example
     * // Count the number of RiskAnalytics
     * const count = await prisma.riskAnalytics.count({
     *   where: {
     *     // ... the filter for the RiskAnalytics we want to count
     *   }
     * })
    **/
    count<T extends RiskAnalyticsCountArgs>(
      args?: Subset<T, RiskAnalyticsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RiskAnalyticsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RiskAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RiskAnalyticsAggregateArgs>(args: Subset<T, RiskAnalyticsAggregateArgs>): Prisma.PrismaPromise<GetRiskAnalyticsAggregateType<T>>

    /**
     * Group by RiskAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RiskAnalyticsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RiskAnalyticsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RiskAnalyticsGroupByArgs['orderBy'] }
        : { orderBy?: RiskAnalyticsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RiskAnalyticsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRiskAnalyticsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RiskAnalytics model
   */
  readonly fields: RiskAnalyticsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RiskAnalytics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RiskAnalyticsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    fmea<T extends RiskAnalytics$fmeaArgs<ExtArgs> = {}>(args?: Subset<T, RiskAnalytics$fmeaArgs<ExtArgs>>): Prisma__FmeaClient<$Result.GetResult<Prisma.$FmeaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RiskAnalytics model
   */ 
  interface RiskAnalyticsFieldRefs {
    readonly id: FieldRef<"RiskAnalytics", 'String'>
    readonly period: FieldRef<"RiskAnalytics", 'DateTime'>
    readonly totalRpn: FieldRef<"RiskAnalytics", 'Int'>
    readonly avgSeverity: FieldRef<"RiskAnalytics", 'Float'>
    readonly avgOccurrence: FieldRef<"RiskAnalytics", 'Float'>
    readonly avgDetection: FieldRef<"RiskAnalytics", 'Float'>
    readonly highRiskCount: FieldRef<"RiskAnalytics", 'Int'>
    readonly trendData: FieldRef<"RiskAnalytics", 'Json'>
    readonly createdAt: FieldRef<"RiskAnalytics", 'DateTime'>
    readonly projectId: FieldRef<"RiskAnalytics", 'String'>
    readonly fmeaId: FieldRef<"RiskAnalytics", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RiskAnalytics findUnique
   */
  export type RiskAnalyticsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalytics to fetch.
     */
    where: RiskAnalyticsWhereUniqueInput
  }

  /**
   * RiskAnalytics findUniqueOrThrow
   */
  export type RiskAnalyticsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalytics to fetch.
     */
    where: RiskAnalyticsWhereUniqueInput
  }

  /**
   * RiskAnalytics findFirst
   */
  export type RiskAnalyticsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalytics to fetch.
     */
    where?: RiskAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalytics to fetch.
     */
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAnalytics.
     */
    cursor?: RiskAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAnalytics.
     */
    distinct?: RiskAnalyticsScalarFieldEnum | RiskAnalyticsScalarFieldEnum[]
  }

  /**
   * RiskAnalytics findFirstOrThrow
   */
  export type RiskAnalyticsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalytics to fetch.
     */
    where?: RiskAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalytics to fetch.
     */
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RiskAnalytics.
     */
    cursor?: RiskAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RiskAnalytics.
     */
    distinct?: RiskAnalyticsScalarFieldEnum | RiskAnalyticsScalarFieldEnum[]
  }

  /**
   * RiskAnalytics findMany
   */
  export type RiskAnalyticsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter, which RiskAnalytics to fetch.
     */
    where?: RiskAnalyticsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RiskAnalytics to fetch.
     */
    orderBy?: RiskAnalyticsOrderByWithRelationInput | RiskAnalyticsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RiskAnalytics.
     */
    cursor?: RiskAnalyticsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RiskAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RiskAnalytics.
     */
    skip?: number
    distinct?: RiskAnalyticsScalarFieldEnum | RiskAnalyticsScalarFieldEnum[]
  }

  /**
   * RiskAnalytics create
   */
  export type RiskAnalyticsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to create a RiskAnalytics.
     */
    data: XOR<RiskAnalyticsCreateInput, RiskAnalyticsUncheckedCreateInput>
  }

  /**
   * RiskAnalytics createMany
   */
  export type RiskAnalyticsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RiskAnalytics.
     */
    data: RiskAnalyticsCreateManyInput | RiskAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RiskAnalytics createManyAndReturn
   */
  export type RiskAnalyticsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RiskAnalytics.
     */
    data: RiskAnalyticsCreateManyInput | RiskAnalyticsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RiskAnalytics update
   */
  export type RiskAnalyticsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * The data needed to update a RiskAnalytics.
     */
    data: XOR<RiskAnalyticsUpdateInput, RiskAnalyticsUncheckedUpdateInput>
    /**
     * Choose, which RiskAnalytics to update.
     */
    where: RiskAnalyticsWhereUniqueInput
  }

  /**
   * RiskAnalytics updateMany
   */
  export type RiskAnalyticsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RiskAnalytics.
     */
    data: XOR<RiskAnalyticsUpdateManyMutationInput, RiskAnalyticsUncheckedUpdateManyInput>
    /**
     * Filter which RiskAnalytics to update
     */
    where?: RiskAnalyticsWhereInput
  }

  /**
   * RiskAnalytics upsert
   */
  export type RiskAnalyticsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * The filter to search for the RiskAnalytics to update in case it exists.
     */
    where: RiskAnalyticsWhereUniqueInput
    /**
     * In case the RiskAnalytics found by the `where` argument doesn't exist, create a new RiskAnalytics with this data.
     */
    create: XOR<RiskAnalyticsCreateInput, RiskAnalyticsUncheckedCreateInput>
    /**
     * In case the RiskAnalytics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RiskAnalyticsUpdateInput, RiskAnalyticsUncheckedUpdateInput>
  }

  /**
   * RiskAnalytics delete
   */
  export type RiskAnalyticsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
    /**
     * Filter which RiskAnalytics to delete.
     */
    where: RiskAnalyticsWhereUniqueInput
  }

  /**
   * RiskAnalytics deleteMany
   */
  export type RiskAnalyticsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RiskAnalytics to delete
     */
    where?: RiskAnalyticsWhereInput
  }

  /**
   * RiskAnalytics.fmea
   */
  export type RiskAnalytics$fmeaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fmea
     */
    select?: FmeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FmeaInclude<ExtArgs> | null
    where?: FmeaWhereInput
  }

  /**
   * RiskAnalytics without action
   */
  export type RiskAnalyticsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RiskAnalytics
     */
    select?: RiskAnalyticsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RiskAnalyticsInclude<ExtArgs> | null
  }


  /**
   * Model AuditTrail
   */

  export type AggregateAuditTrail = {
    _count: AuditTrailCountAggregateOutputType | null
    _min: AuditTrailMinAggregateOutputType | null
    _max: AuditTrailMaxAggregateOutputType | null
  }

  export type AuditTrailMinAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type AuditTrailMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    userId: string | null
  }

  export type AuditTrailCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    createdAt: number
    userId: number
    _all: number
  }


  export type AuditTrailMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    userId?: true
  }

  export type AuditTrailMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    userId?: true
  }

  export type AuditTrailCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type AuditTrailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditTrail to aggregate.
     */
    where?: AuditTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrails to fetch.
     */
    orderBy?: AuditTrailOrderByWithRelationInput | AuditTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditTrails
    **/
    _count?: true | AuditTrailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditTrailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditTrailMaxAggregateInputType
  }

  export type GetAuditTrailAggregateType<T extends AuditTrailAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditTrail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditTrail[P]>
      : GetScalarType<T[P], AggregateAuditTrail[P]>
  }




  export type AuditTrailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditTrailWhereInput
    orderBy?: AuditTrailOrderByWithAggregationInput | AuditTrailOrderByWithAggregationInput[]
    by: AuditTrailScalarFieldEnum[] | AuditTrailScalarFieldEnum
    having?: AuditTrailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditTrailCountAggregateInputType | true
    _min?: AuditTrailMinAggregateInputType
    _max?: AuditTrailMaxAggregateInputType
  }

  export type AuditTrailGroupByOutputType = {
    id: string
    action: string
    entityType: string
    entityId: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    userId: string
    _count: AuditTrailCountAggregateOutputType | null
    _min: AuditTrailMinAggregateOutputType | null
    _max: AuditTrailMaxAggregateOutputType | null
  }

  type GetAuditTrailGroupByPayload<T extends AuditTrailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditTrailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditTrailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditTrailGroupByOutputType[P]>
            : GetScalarType<T[P], AuditTrailGroupByOutputType[P]>
        }
      >
    >


  export type AuditTrailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditTrail"]>

  export type AuditTrailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditTrail"]>

  export type AuditTrailSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type AuditTrailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditTrailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditTrailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditTrail"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      entityType: string
      entityId: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["auditTrail"]>
    composites: {}
  }

  type AuditTrailGetPayload<S extends boolean | null | undefined | AuditTrailDefaultArgs> = $Result.GetResult<Prisma.$AuditTrailPayload, S>

  type AuditTrailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditTrailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditTrailCountAggregateInputType | true
    }

  export interface AuditTrailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditTrail'], meta: { name: 'AuditTrail' } }
    /**
     * Find zero or one AuditTrail that matches the filter.
     * @param {AuditTrailFindUniqueArgs} args - Arguments to find a AuditTrail
     * @example
     * // Get one AuditTrail
     * const auditTrail = await prisma.auditTrail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditTrailFindUniqueArgs>(args: SelectSubset<T, AuditTrailFindUniqueArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditTrail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditTrailFindUniqueOrThrowArgs} args - Arguments to find a AuditTrail
     * @example
     * // Get one AuditTrail
     * const auditTrail = await prisma.auditTrail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditTrailFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditTrailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditTrail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailFindFirstArgs} args - Arguments to find a AuditTrail
     * @example
     * // Get one AuditTrail
     * const auditTrail = await prisma.auditTrail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditTrailFindFirstArgs>(args?: SelectSubset<T, AuditTrailFindFirstArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditTrail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailFindFirstOrThrowArgs} args - Arguments to find a AuditTrail
     * @example
     * // Get one AuditTrail
     * const auditTrail = await prisma.auditTrail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditTrailFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditTrailFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditTrails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditTrails
     * const auditTrails = await prisma.auditTrail.findMany()
     * 
     * // Get first 10 AuditTrails
     * const auditTrails = await prisma.auditTrail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditTrailWithIdOnly = await prisma.auditTrail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditTrailFindManyArgs>(args?: SelectSubset<T, AuditTrailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditTrail.
     * @param {AuditTrailCreateArgs} args - Arguments to create a AuditTrail.
     * @example
     * // Create one AuditTrail
     * const AuditTrail = await prisma.auditTrail.create({
     *   data: {
     *     // ... data to create a AuditTrail
     *   }
     * })
     * 
     */
    create<T extends AuditTrailCreateArgs>(args: SelectSubset<T, AuditTrailCreateArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditTrails.
     * @param {AuditTrailCreateManyArgs} args - Arguments to create many AuditTrails.
     * @example
     * // Create many AuditTrails
     * const auditTrail = await prisma.auditTrail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditTrailCreateManyArgs>(args?: SelectSubset<T, AuditTrailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditTrails and returns the data saved in the database.
     * @param {AuditTrailCreateManyAndReturnArgs} args - Arguments to create many AuditTrails.
     * @example
     * // Create many AuditTrails
     * const auditTrail = await prisma.auditTrail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditTrails and only return the `id`
     * const auditTrailWithIdOnly = await prisma.auditTrail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditTrailCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditTrailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditTrail.
     * @param {AuditTrailDeleteArgs} args - Arguments to delete one AuditTrail.
     * @example
     * // Delete one AuditTrail
     * const AuditTrail = await prisma.auditTrail.delete({
     *   where: {
     *     // ... filter to delete one AuditTrail
     *   }
     * })
     * 
     */
    delete<T extends AuditTrailDeleteArgs>(args: SelectSubset<T, AuditTrailDeleteArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditTrail.
     * @param {AuditTrailUpdateArgs} args - Arguments to update one AuditTrail.
     * @example
     * // Update one AuditTrail
     * const auditTrail = await prisma.auditTrail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditTrailUpdateArgs>(args: SelectSubset<T, AuditTrailUpdateArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditTrails.
     * @param {AuditTrailDeleteManyArgs} args - Arguments to filter AuditTrails to delete.
     * @example
     * // Delete a few AuditTrails
     * const { count } = await prisma.auditTrail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditTrailDeleteManyArgs>(args?: SelectSubset<T, AuditTrailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditTrails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditTrails
     * const auditTrail = await prisma.auditTrail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditTrailUpdateManyArgs>(args: SelectSubset<T, AuditTrailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditTrail.
     * @param {AuditTrailUpsertArgs} args - Arguments to update or create a AuditTrail.
     * @example
     * // Update or create a AuditTrail
     * const auditTrail = await prisma.auditTrail.upsert({
     *   create: {
     *     // ... data to create a AuditTrail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditTrail we want to update
     *   }
     * })
     */
    upsert<T extends AuditTrailUpsertArgs>(args: SelectSubset<T, AuditTrailUpsertArgs<ExtArgs>>): Prisma__AuditTrailClient<$Result.GetResult<Prisma.$AuditTrailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditTrails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailCountArgs} args - Arguments to filter AuditTrails to count.
     * @example
     * // Count the number of AuditTrails
     * const count = await prisma.auditTrail.count({
     *   where: {
     *     // ... the filter for the AuditTrails we want to count
     *   }
     * })
    **/
    count<T extends AuditTrailCountArgs>(
      args?: Subset<T, AuditTrailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditTrailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditTrail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditTrailAggregateArgs>(args: Subset<T, AuditTrailAggregateArgs>): Prisma.PrismaPromise<GetAuditTrailAggregateType<T>>

    /**
     * Group by AuditTrail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditTrailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditTrailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditTrailGroupByArgs['orderBy'] }
        : { orderBy?: AuditTrailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditTrailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditTrailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditTrail model
   */
  readonly fields: AuditTrailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditTrail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditTrailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditTrail model
   */ 
  interface AuditTrailFieldRefs {
    readonly id: FieldRef<"AuditTrail", 'String'>
    readonly action: FieldRef<"AuditTrail", 'String'>
    readonly entityType: FieldRef<"AuditTrail", 'String'>
    readonly entityId: FieldRef<"AuditTrail", 'String'>
    readonly oldValues: FieldRef<"AuditTrail", 'Json'>
    readonly newValues: FieldRef<"AuditTrail", 'Json'>
    readonly ipAddress: FieldRef<"AuditTrail", 'String'>
    readonly userAgent: FieldRef<"AuditTrail", 'String'>
    readonly createdAt: FieldRef<"AuditTrail", 'DateTime'>
    readonly userId: FieldRef<"AuditTrail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditTrail findUnique
   */
  export type AuditTrailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrail to fetch.
     */
    where: AuditTrailWhereUniqueInput
  }

  /**
   * AuditTrail findUniqueOrThrow
   */
  export type AuditTrailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrail to fetch.
     */
    where: AuditTrailWhereUniqueInput
  }

  /**
   * AuditTrail findFirst
   */
  export type AuditTrailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrail to fetch.
     */
    where?: AuditTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrails to fetch.
     */
    orderBy?: AuditTrailOrderByWithRelationInput | AuditTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditTrails.
     */
    cursor?: AuditTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditTrails.
     */
    distinct?: AuditTrailScalarFieldEnum | AuditTrailScalarFieldEnum[]
  }

  /**
   * AuditTrail findFirstOrThrow
   */
  export type AuditTrailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrail to fetch.
     */
    where?: AuditTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrails to fetch.
     */
    orderBy?: AuditTrailOrderByWithRelationInput | AuditTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditTrails.
     */
    cursor?: AuditTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditTrails.
     */
    distinct?: AuditTrailScalarFieldEnum | AuditTrailScalarFieldEnum[]
  }

  /**
   * AuditTrail findMany
   */
  export type AuditTrailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter, which AuditTrails to fetch.
     */
    where?: AuditTrailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditTrails to fetch.
     */
    orderBy?: AuditTrailOrderByWithRelationInput | AuditTrailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditTrails.
     */
    cursor?: AuditTrailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditTrails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditTrails.
     */
    skip?: number
    distinct?: AuditTrailScalarFieldEnum | AuditTrailScalarFieldEnum[]
  }

  /**
   * AuditTrail create
   */
  export type AuditTrailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditTrail.
     */
    data: XOR<AuditTrailCreateInput, AuditTrailUncheckedCreateInput>
  }

  /**
   * AuditTrail createMany
   */
  export type AuditTrailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditTrails.
     */
    data: AuditTrailCreateManyInput | AuditTrailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditTrail createManyAndReturn
   */
  export type AuditTrailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditTrails.
     */
    data: AuditTrailCreateManyInput | AuditTrailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditTrail update
   */
  export type AuditTrailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditTrail.
     */
    data: XOR<AuditTrailUpdateInput, AuditTrailUncheckedUpdateInput>
    /**
     * Choose, which AuditTrail to update.
     */
    where: AuditTrailWhereUniqueInput
  }

  /**
   * AuditTrail updateMany
   */
  export type AuditTrailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditTrails.
     */
    data: XOR<AuditTrailUpdateManyMutationInput, AuditTrailUncheckedUpdateManyInput>
    /**
     * Filter which AuditTrails to update
     */
    where?: AuditTrailWhereInput
  }

  /**
   * AuditTrail upsert
   */
  export type AuditTrailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditTrail to update in case it exists.
     */
    where: AuditTrailWhereUniqueInput
    /**
     * In case the AuditTrail found by the `where` argument doesn't exist, create a new AuditTrail with this data.
     */
    create: XOR<AuditTrailCreateInput, AuditTrailUncheckedCreateInput>
    /**
     * In case the AuditTrail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditTrailUpdateInput, AuditTrailUncheckedUpdateInput>
  }

  /**
   * AuditTrail delete
   */
  export type AuditTrailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
    /**
     * Filter which AuditTrail to delete.
     */
    where: AuditTrailWhereUniqueInput
  }

  /**
   * AuditTrail deleteMany
   */
  export type AuditTrailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditTrails to delete
     */
    where?: AuditTrailWhereInput
  }

  /**
   * AuditTrail without action
   */
  export type AuditTrailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditTrail
     */
    select?: AuditTrailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditTrailInclude<ExtArgs> | null
  }


  /**
   * Model ProjectMember
   */

  export type AggregateProjectMember = {
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  export type ProjectMemberMinAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectRole | null
    joinedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberMaxAggregateOutputType = {
    id: string | null
    role: $Enums.ProjectRole | null
    joinedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectMemberCountAggregateOutputType = {
    id: number
    role: number
    joinedAt: number
    userId: number
    projectId: number
    _all: number
  }


  export type ProjectMemberMinAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberMaxAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectMemberCountAggregateInputType = {
    id?: true
    role?: true
    joinedAt?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ProjectMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMember to aggregate.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectMembers
    **/
    _count?: true | ProjectMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type GetProjectMemberAggregateType<T extends ProjectMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectMember[P]>
      : GetScalarType<T[P], AggregateProjectMember[P]>
  }




  export type ProjectMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectMemberWhereInput
    orderBy?: ProjectMemberOrderByWithAggregationInput | ProjectMemberOrderByWithAggregationInput[]
    by: ProjectMemberScalarFieldEnum[] | ProjectMemberScalarFieldEnum
    having?: ProjectMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectMemberCountAggregateInputType | true
    _min?: ProjectMemberMinAggregateInputType
    _max?: ProjectMemberMaxAggregateInputType
  }

  export type ProjectMemberGroupByOutputType = {
    id: string
    role: $Enums.ProjectRole
    joinedAt: Date
    userId: string
    projectId: string
    _count: ProjectMemberCountAggregateOutputType | null
    _min: ProjectMemberMinAggregateOutputType | null
    _max: ProjectMemberMaxAggregateOutputType | null
  }

  type GetProjectMemberGroupByPayload<T extends ProjectMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectMemberGroupByOutputType[P]>
        }
      >
    >


  export type ProjectMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectMember"]>

  export type ProjectMemberSelectScalar = {
    id?: boolean
    role?: boolean
    joinedAt?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ProjectMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ProjectMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.ProjectRole
      joinedAt: Date
      userId: string
      projectId: string
    }, ExtArgs["result"]["projectMember"]>
    composites: {}
  }

  type ProjectMemberGetPayload<S extends boolean | null | undefined | ProjectMemberDefaultArgs> = $Result.GetResult<Prisma.$ProjectMemberPayload, S>

  type ProjectMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectMemberCountAggregateInputType | true
    }

  export interface ProjectMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectMember'], meta: { name: 'ProjectMember' } }
    /**
     * Find zero or one ProjectMember that matches the filter.
     * @param {ProjectMemberFindUniqueArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectMemberFindUniqueArgs>(args: SelectSubset<T, ProjectMemberFindUniqueArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectMemberFindUniqueOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectMemberFindFirstArgs>(args?: SelectSubset<T, ProjectMemberFindFirstArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindFirstOrThrowArgs} args - Arguments to find a ProjectMember
     * @example
     * // Get one ProjectMember
     * const projectMember = await prisma.projectMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany()
     * 
     * // Get first 10 ProjectMembers
     * const projectMembers = await prisma.projectMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectMemberFindManyArgs>(args?: SelectSubset<T, ProjectMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectMember.
     * @param {ProjectMemberCreateArgs} args - Arguments to create a ProjectMember.
     * @example
     * // Create one ProjectMember
     * const ProjectMember = await prisma.projectMember.create({
     *   data: {
     *     // ... data to create a ProjectMember
     *   }
     * })
     * 
     */
    create<T extends ProjectMemberCreateArgs>(args: SelectSubset<T, ProjectMemberCreateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectMembers.
     * @param {ProjectMemberCreateManyArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectMemberCreateManyArgs>(args?: SelectSubset<T, ProjectMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectMembers and returns the data saved in the database.
     * @param {ProjectMemberCreateManyAndReturnArgs} args - Arguments to create many ProjectMembers.
     * @example
     * // Create many ProjectMembers
     * const projectMember = await prisma.projectMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectMembers and only return the `id`
     * const projectMemberWithIdOnly = await prisma.projectMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectMember.
     * @param {ProjectMemberDeleteArgs} args - Arguments to delete one ProjectMember.
     * @example
     * // Delete one ProjectMember
     * const ProjectMember = await prisma.projectMember.delete({
     *   where: {
     *     // ... filter to delete one ProjectMember
     *   }
     * })
     * 
     */
    delete<T extends ProjectMemberDeleteArgs>(args: SelectSubset<T, ProjectMemberDeleteArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectMember.
     * @param {ProjectMemberUpdateArgs} args - Arguments to update one ProjectMember.
     * @example
     * // Update one ProjectMember
     * const projectMember = await prisma.projectMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectMemberUpdateArgs>(args: SelectSubset<T, ProjectMemberUpdateArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectMembers.
     * @param {ProjectMemberDeleteManyArgs} args - Arguments to filter ProjectMembers to delete.
     * @example
     * // Delete a few ProjectMembers
     * const { count } = await prisma.projectMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectMemberDeleteManyArgs>(args?: SelectSubset<T, ProjectMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectMembers
     * const projectMember = await prisma.projectMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectMemberUpdateManyArgs>(args: SelectSubset<T, ProjectMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectMember.
     * @param {ProjectMemberUpsertArgs} args - Arguments to update or create a ProjectMember.
     * @example
     * // Update or create a ProjectMember
     * const projectMember = await prisma.projectMember.upsert({
     *   create: {
     *     // ... data to create a ProjectMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectMember we want to update
     *   }
     * })
     */
    upsert<T extends ProjectMemberUpsertArgs>(args: SelectSubset<T, ProjectMemberUpsertArgs<ExtArgs>>): Prisma__ProjectMemberClient<$Result.GetResult<Prisma.$ProjectMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberCountArgs} args - Arguments to filter ProjectMembers to count.
     * @example
     * // Count the number of ProjectMembers
     * const count = await prisma.projectMember.count({
     *   where: {
     *     // ... the filter for the ProjectMembers we want to count
     *   }
     * })
    **/
    count<T extends ProjectMemberCountArgs>(
      args?: Subset<T, ProjectMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectMemberAggregateArgs>(args: Subset<T, ProjectMemberAggregateArgs>): Prisma.PrismaPromise<GetProjectMemberAggregateType<T>>

    /**
     * Group by ProjectMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectMemberGroupByArgs['orderBy'] }
        : { orderBy?: ProjectMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectMember model
   */
  readonly fields: ProjectMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectMember model
   */ 
  interface ProjectMemberFieldRefs {
    readonly id: FieldRef<"ProjectMember", 'String'>
    readonly role: FieldRef<"ProjectMember", 'ProjectRole'>
    readonly joinedAt: FieldRef<"ProjectMember", 'DateTime'>
    readonly userId: FieldRef<"ProjectMember", 'String'>
    readonly projectId: FieldRef<"ProjectMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectMember findUnique
   */
  export type ProjectMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findUniqueOrThrow
   */
  export type ProjectMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember findFirst
   */
  export type ProjectMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findFirstOrThrow
   */
  export type ProjectMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMember to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectMembers.
     */
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember findMany
   */
  export type ProjectMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter, which ProjectMembers to fetch.
     */
    where?: ProjectMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectMembers to fetch.
     */
    orderBy?: ProjectMemberOrderByWithRelationInput | ProjectMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectMembers.
     */
    cursor?: ProjectMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectMembers.
     */
    skip?: number
    distinct?: ProjectMemberScalarFieldEnum | ProjectMemberScalarFieldEnum[]
  }

  /**
   * ProjectMember create
   */
  export type ProjectMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectMember.
     */
    data: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
  }

  /**
   * ProjectMember createMany
   */
  export type ProjectMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectMember createManyAndReturn
   */
  export type ProjectMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectMembers.
     */
    data: ProjectMemberCreateManyInput | ProjectMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectMember update
   */
  export type ProjectMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectMember.
     */
    data: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
    /**
     * Choose, which ProjectMember to update.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember updateMany
   */
  export type ProjectMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectMembers.
     */
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyInput>
    /**
     * Filter which ProjectMembers to update
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember upsert
   */
  export type ProjectMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectMember to update in case it exists.
     */
    where: ProjectMemberWhereUniqueInput
    /**
     * In case the ProjectMember found by the `where` argument doesn't exist, create a new ProjectMember with this data.
     */
    create: XOR<ProjectMemberCreateInput, ProjectMemberUncheckedCreateInput>
    /**
     * In case the ProjectMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectMemberUpdateInput, ProjectMemberUncheckedUpdateInput>
  }

  /**
   * ProjectMember delete
   */
  export type ProjectMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
    /**
     * Filter which ProjectMember to delete.
     */
    where: ProjectMemberWhereUniqueInput
  }

  /**
   * ProjectMember deleteMany
   */
  export type ProjectMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectMembers to delete
     */
    where?: ProjectMemberWhereInput
  }

  /**
   * ProjectMember without action
   */
  export type ProjectMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectMember
     */
    select?: ProjectMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectMemberInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    department: 'department',
    industry: 'industry',
    status: 'status',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    archivedAt: 'archivedAt',
    createdById: 'createdById'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProcessFlowScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    sequence: 'sequence',
    input: 'input',
    output: 'output',
    resources: 'resources',
    controls: 'controls',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type ProcessFlowScalarFieldEnum = (typeof ProcessFlowScalarFieldEnum)[keyof typeof ProcessFlowScalarFieldEnum]


  export const ProcessScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    sequence: 'sequence',
    processType: 'processType',
    input: 'input',
    output: 'output',
    resources: 'resources',
    controls: 'controls',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    processFlowId: 'processFlowId'
  };

  export type ProcessScalarFieldEnum = (typeof ProcessScalarFieldEnum)[keyof typeof ProcessScalarFieldEnum]


  export const FmeaScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    fmeaType: 'fmeaType',
    status: 'status',
    version: 'version',
    approvalDate: 'approvalDate',
    nextReviewDate: 'nextReviewDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    processFlowId: 'processFlowId',
    createdById: 'createdById'
  };

  export type FmeaScalarFieldEnum = (typeof FmeaScalarFieldEnum)[keyof typeof FmeaScalarFieldEnum]


  export const FailureModeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    potential_failure: 'potential_failure',
    potential_effects: 'potential_effects',
    severity: 'severity',
    potential_causes: 'potential_causes',
    occurrence: 'occurrence',
    current_controls: 'current_controls',
    detection: 'detection',
    rpn: 'rpn',
    recommended_actions: 'recommended_actions',
    responsibility: 'responsibility',
    target_date: 'target_date',
    actions_taken: 'actions_taken',
    revised_severity: 'revised_severity',
    revised_occurrence: 'revised_occurrence',
    revised_detection: 'revised_detection',
    revised_rpn: 'revised_rpn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fmeaId: 'fmeaId',
    processId: 'processId'
  };

  export type FailureModeScalarFieldEnum = (typeof FailureModeScalarFieldEnum)[keyof typeof FailureModeScalarFieldEnum]


  export const ControlPlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    process_step: 'process_step',
    control_method: 'control_method',
    specification: 'specification',
    measurement_technique: 'measurement_technique',
    sample_size: 'sample_size',
    frequency: 'frequency',
    control_method_type: 'control_method_type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    fmeaId: 'fmeaId'
  };

  export type ControlPlanScalarFieldEnum = (typeof ControlPlanScalarFieldEnum)[keyof typeof ControlPlanScalarFieldEnum]


  export const ActionItemScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    priority: 'priority',
    status: 'status',
    dueDate: 'dueDate',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    failureModeId: 'failureModeId',
    assigneeId: 'assigneeId',
    createdById: 'createdById'
  };

  export type ActionItemScalarFieldEnum = (typeof ActionItemScalarFieldEnum)[keyof typeof ActionItemScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    authorId: 'authorId',
    projectId: 'projectId',
    fmeaId: 'fmeaId',
    failureModeId: 'failureModeId',
    actionItemId: 'actionItemId',
    parentId: 'parentId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    message: 'message',
    type: 'type',
    read: 'read',
    createdAt: 'createdAt',
    userId: 'userId',
    projectId: 'projectId',
    actionItemId: 'actionItemId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const ChangeEventScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    changeType: 'changeType',
    oldValues: 'oldValues',
    newValues: 'newValues',
    description: 'description',
    reason: 'reason',
    createdAt: 'createdAt',
    createdById: 'createdById',
    projectId: 'projectId'
  };

  export type ChangeEventScalarFieldEnum = (typeof ChangeEventScalarFieldEnum)[keyof typeof ChangeEventScalarFieldEnum]


  export const ComplianceReportScalarFieldEnum: {
    id: 'id',
    standard: 'standard',
    status: 'status',
    score: 'score',
    findings: 'findings',
    recommendations: 'recommendations',
    assessedAt: 'assessedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId',
    assessedById: 'assessedById'
  };

  export type ComplianceReportScalarFieldEnum = (typeof ComplianceReportScalarFieldEnum)[keyof typeof ComplianceReportScalarFieldEnum]


  export const RiskAnalyticsScalarFieldEnum: {
    id: 'id',
    period: 'period',
    totalRpn: 'totalRpn',
    avgSeverity: 'avgSeverity',
    avgOccurrence: 'avgOccurrence',
    avgDetection: 'avgDetection',
    highRiskCount: 'highRiskCount',
    trendData: 'trendData',
    createdAt: 'createdAt',
    projectId: 'projectId',
    fmeaId: 'fmeaId'
  };

  export type RiskAnalyticsScalarFieldEnum = (typeof RiskAnalyticsScalarFieldEnum)[keyof typeof RiskAnalyticsScalarFieldEnum]


  export const AuditTrailScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type AuditTrailScalarFieldEnum = (typeof AuditTrailScalarFieldEnum)[keyof typeof AuditTrailScalarFieldEnum]


  export const ProjectMemberScalarFieldEnum: {
    id: 'id',
    role: 'role',
    joinedAt: 'joinedAt',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectMemberScalarFieldEnum = (typeof ProjectMemberScalarFieldEnum)[keyof typeof ProjectMemberScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Industry'
   */
  export type EnumIndustryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Industry'>
    


  /**
   * Reference to a field of type 'Industry[]'
   */
  export type ListEnumIndustryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Industry[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'FmeaType'
   */
  export type EnumFmeaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FmeaType'>
    


  /**
   * Reference to a field of type 'FmeaType[]'
   */
  export type ListEnumFmeaTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FmeaType[]'>
    


  /**
   * Reference to a field of type 'FmeaStatus'
   */
  export type EnumFmeaStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FmeaStatus'>
    


  /**
   * Reference to a field of type 'FmeaStatus[]'
   */
  export type ListEnumFmeaStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FmeaStatus[]'>
    


  /**
   * Reference to a field of type 'ControlMethodType'
   */
  export type EnumControlMethodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ControlMethodType'>
    


  /**
   * Reference to a field of type 'ControlMethodType[]'
   */
  export type ListEnumControlMethodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ControlMethodType[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'ActionStatus'
   */
  export type EnumActionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionStatus'>
    


  /**
   * Reference to a field of type 'ActionStatus[]'
   */
  export type ListEnumActionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'ChangeType'
   */
  export type EnumChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChangeType'>
    


  /**
   * Reference to a field of type 'ChangeType[]'
   */
  export type ListEnumChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChangeType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ComplianceStandard'
   */
  export type EnumComplianceStandardFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStandard'>
    


  /**
   * Reference to a field of type 'ComplianceStandard[]'
   */
  export type ListEnumComplianceStandardFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStandard[]'>
    


  /**
   * Reference to a field of type 'ComplianceStatus'
   */
  export type EnumComplianceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStatus'>
    


  /**
   * Reference to a field of type 'ComplianceStatus[]'
   */
  export type ListEnumComplianceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplianceStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ProjectRole'
   */
  export type EnumProjectRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectRole'>
    


  /**
   * Reference to a field of type 'ProjectRole[]'
   */
  export type ListEnumProjectRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectRole[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdProjects?: ProjectListRelationFilter
    assignedProjects?: ProjectMemberListRelationFilter
    createdFmeas?: FmeaListRelationFilter
    assignedActions?: ActionItemListRelationFilter
    createdActions?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    changeEvents?: ChangeEventListRelationFilter
    complianceReports?: ComplianceReportListRelationFilter
    auditTrail?: AuditTrailListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdProjects?: ProjectOrderByRelationAggregateInput
    assignedProjects?: ProjectMemberOrderByRelationAggregateInput
    createdFmeas?: FmeaOrderByRelationAggregateInput
    assignedActions?: ActionItemOrderByRelationAggregateInput
    createdActions?: ActionItemOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    changeEvents?: ChangeEventOrderByRelationAggregateInput
    complianceReports?: ComplianceReportOrderByRelationAggregateInput
    auditTrail?: AuditTrailOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdProjects?: ProjectListRelationFilter
    assignedProjects?: ProjectMemberListRelationFilter
    createdFmeas?: FmeaListRelationFilter
    assignedActions?: ActionItemListRelationFilter
    createdActions?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    changeEvents?: ChangeEventListRelationFilter
    complianceReports?: ComplianceReportListRelationFilter
    auditTrail?: AuditTrailListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    department?: StringNullableFilter<"Project"> | string | null
    industry?: EnumIndustryFilter<"Project"> | $Enums.Industry
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    version?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    archivedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    createdById?: StringFilter<"Project"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    members?: ProjectMemberListRelationFilter
    processFlows?: ProcessFlowListRelationFilter
    fmeas?: FmeaListRelationFilter
    controlPlans?: ControlPlanListRelationFilter
    actionItems?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    changeEvents?: ChangeEventListRelationFilter
    complianceReports?: ComplianceReportListRelationFilter
    riskAnalytics?: RiskAnalyticsListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    industry?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    members?: ProjectMemberOrderByRelationAggregateInput
    processFlows?: ProcessFlowOrderByRelationAggregateInput
    fmeas?: FmeaOrderByRelationAggregateInput
    controlPlans?: ControlPlanOrderByRelationAggregateInput
    actionItems?: ActionItemOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    changeEvents?: ChangeEventOrderByRelationAggregateInput
    complianceReports?: ComplianceReportOrderByRelationAggregateInput
    riskAnalytics?: RiskAnalyticsOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    department?: StringNullableFilter<"Project"> | string | null
    industry?: EnumIndustryFilter<"Project"> | $Enums.Industry
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    version?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    archivedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    createdById?: StringFilter<"Project"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    members?: ProjectMemberListRelationFilter
    processFlows?: ProcessFlowListRelationFilter
    fmeas?: FmeaListRelationFilter
    controlPlans?: ControlPlanListRelationFilter
    actionItems?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
    changeEvents?: ChangeEventListRelationFilter
    complianceReports?: ComplianceReportListRelationFilter
    riskAnalytics?: RiskAnalyticsListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    industry?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    description?: StringNullableWithAggregatesFilter<"Project"> | string | null
    department?: StringNullableWithAggregatesFilter<"Project"> | string | null
    industry?: EnumIndustryWithAggregatesFilter<"Project"> | $Enums.Industry
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    version?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    archivedAt?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    createdById?: StringWithAggregatesFilter<"Project"> | string
  }

  export type ProcessFlowWhereInput = {
    AND?: ProcessFlowWhereInput | ProcessFlowWhereInput[]
    OR?: ProcessFlowWhereInput[]
    NOT?: ProcessFlowWhereInput | ProcessFlowWhereInput[]
    id?: StringFilter<"ProcessFlow"> | string
    name?: StringFilter<"ProcessFlow"> | string
    description?: StringNullableFilter<"ProcessFlow"> | string | null
    sequence?: IntFilter<"ProcessFlow"> | number
    input?: StringNullableFilter<"ProcessFlow"> | string | null
    output?: StringNullableFilter<"ProcessFlow"> | string | null
    resources?: StringNullableFilter<"ProcessFlow"> | string | null
    controls?: StringNullableFilter<"ProcessFlow"> | string | null
    createdAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    projectId?: StringFilter<"ProcessFlow"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    processes?: ProcessListRelationFilter
    fmeas?: FmeaListRelationFilter
  }

  export type ProcessFlowOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    controls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
    processes?: ProcessOrderByRelationAggregateInput
    fmeas?: FmeaOrderByRelationAggregateInput
  }

  export type ProcessFlowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessFlowWhereInput | ProcessFlowWhereInput[]
    OR?: ProcessFlowWhereInput[]
    NOT?: ProcessFlowWhereInput | ProcessFlowWhereInput[]
    name?: StringFilter<"ProcessFlow"> | string
    description?: StringNullableFilter<"ProcessFlow"> | string | null
    sequence?: IntFilter<"ProcessFlow"> | number
    input?: StringNullableFilter<"ProcessFlow"> | string | null
    output?: StringNullableFilter<"ProcessFlow"> | string | null
    resources?: StringNullableFilter<"ProcessFlow"> | string | null
    controls?: StringNullableFilter<"ProcessFlow"> | string | null
    createdAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    projectId?: StringFilter<"ProcessFlow"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    processes?: ProcessListRelationFilter
    fmeas?: FmeaListRelationFilter
  }, "id">

  export type ProcessFlowOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    controls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: ProcessFlowCountOrderByAggregateInput
    _avg?: ProcessFlowAvgOrderByAggregateInput
    _max?: ProcessFlowMaxOrderByAggregateInput
    _min?: ProcessFlowMinOrderByAggregateInput
    _sum?: ProcessFlowSumOrderByAggregateInput
  }

  export type ProcessFlowScalarWhereWithAggregatesInput = {
    AND?: ProcessFlowScalarWhereWithAggregatesInput | ProcessFlowScalarWhereWithAggregatesInput[]
    OR?: ProcessFlowScalarWhereWithAggregatesInput[]
    NOT?: ProcessFlowScalarWhereWithAggregatesInput | ProcessFlowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProcessFlow"> | string
    name?: StringWithAggregatesFilter<"ProcessFlow"> | string
    description?: StringNullableWithAggregatesFilter<"ProcessFlow"> | string | null
    sequence?: IntWithAggregatesFilter<"ProcessFlow"> | number
    input?: StringNullableWithAggregatesFilter<"ProcessFlow"> | string | null
    output?: StringNullableWithAggregatesFilter<"ProcessFlow"> | string | null
    resources?: StringNullableWithAggregatesFilter<"ProcessFlow"> | string | null
    controls?: StringNullableWithAggregatesFilter<"ProcessFlow"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProcessFlow"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProcessFlow"> | Date | string
    projectId?: StringWithAggregatesFilter<"ProcessFlow"> | string
  }

  export type ProcessWhereInput = {
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    id?: StringFilter<"Process"> | string
    name?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    sequence?: IntFilter<"Process"> | number
    processType?: StringNullableFilter<"Process"> | string | null
    input?: StringNullableFilter<"Process"> | string | null
    output?: StringNullableFilter<"Process"> | string | null
    resources?: StringNullableFilter<"Process"> | string | null
    controls?: StringNullableFilter<"Process"> | string | null
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    processFlowId?: StringFilter<"Process"> | string
    processFlow?: XOR<ProcessFlowRelationFilter, ProcessFlowWhereInput>
    failureModes?: FailureModeListRelationFilter
  }

  export type ProcessOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    processType?: SortOrderInput | SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    controls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    processFlowId?: SortOrder
    processFlow?: ProcessFlowOrderByWithRelationInput
    failureModes?: FailureModeOrderByRelationAggregateInput
  }

  export type ProcessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProcessWhereInput | ProcessWhereInput[]
    OR?: ProcessWhereInput[]
    NOT?: ProcessWhereInput | ProcessWhereInput[]
    name?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    sequence?: IntFilter<"Process"> | number
    processType?: StringNullableFilter<"Process"> | string | null
    input?: StringNullableFilter<"Process"> | string | null
    output?: StringNullableFilter<"Process"> | string | null
    resources?: StringNullableFilter<"Process"> | string | null
    controls?: StringNullableFilter<"Process"> | string | null
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    processFlowId?: StringFilter<"Process"> | string
    processFlow?: XOR<ProcessFlowRelationFilter, ProcessFlowWhereInput>
    failureModes?: FailureModeListRelationFilter
  }, "id">

  export type ProcessOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sequence?: SortOrder
    processType?: SortOrderInput | SortOrder
    input?: SortOrderInput | SortOrder
    output?: SortOrderInput | SortOrder
    resources?: SortOrderInput | SortOrder
    controls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    processFlowId?: SortOrder
    _count?: ProcessCountOrderByAggregateInput
    _avg?: ProcessAvgOrderByAggregateInput
    _max?: ProcessMaxOrderByAggregateInput
    _min?: ProcessMinOrderByAggregateInput
    _sum?: ProcessSumOrderByAggregateInput
  }

  export type ProcessScalarWhereWithAggregatesInput = {
    AND?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    OR?: ProcessScalarWhereWithAggregatesInput[]
    NOT?: ProcessScalarWhereWithAggregatesInput | ProcessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Process"> | string
    name?: StringWithAggregatesFilter<"Process"> | string
    description?: StringNullableWithAggregatesFilter<"Process"> | string | null
    sequence?: IntWithAggregatesFilter<"Process"> | number
    processType?: StringNullableWithAggregatesFilter<"Process"> | string | null
    input?: StringNullableWithAggregatesFilter<"Process"> | string | null
    output?: StringNullableWithAggregatesFilter<"Process"> | string | null
    resources?: StringNullableWithAggregatesFilter<"Process"> | string | null
    controls?: StringNullableWithAggregatesFilter<"Process"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Process"> | Date | string
    processFlowId?: StringWithAggregatesFilter<"Process"> | string
  }

  export type FmeaWhereInput = {
    AND?: FmeaWhereInput | FmeaWhereInput[]
    OR?: FmeaWhereInput[]
    NOT?: FmeaWhereInput | FmeaWhereInput[]
    id?: StringFilter<"Fmea"> | string
    name?: StringFilter<"Fmea"> | string
    description?: StringNullableFilter<"Fmea"> | string | null
    fmeaType?: EnumFmeaTypeFilter<"Fmea"> | $Enums.FmeaType
    status?: EnumFmeaStatusFilter<"Fmea"> | $Enums.FmeaStatus
    version?: StringFilter<"Fmea"> | string
    approvalDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    createdAt?: DateTimeFilter<"Fmea"> | Date | string
    updatedAt?: DateTimeFilter<"Fmea"> | Date | string
    projectId?: StringFilter<"Fmea"> | string
    processFlowId?: StringNullableFilter<"Fmea"> | string | null
    createdById?: StringFilter<"Fmea"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    processFlow?: XOR<ProcessFlowNullableRelationFilter, ProcessFlowWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    failureModes?: FailureModeListRelationFilter
    controlPlans?: ControlPlanListRelationFilter
    comments?: CommentListRelationFilter
    riskAnalytics?: RiskAnalyticsListRelationFilter
  }

  export type FmeaOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    fmeaType?: SortOrder
    status?: SortOrder
    version?: SortOrder
    approvalDate?: SortOrderInput | SortOrder
    nextReviewDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    processFlowId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    project?: ProjectOrderByWithRelationInput
    processFlow?: ProcessFlowOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    failureModes?: FailureModeOrderByRelationAggregateInput
    controlPlans?: ControlPlanOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    riskAnalytics?: RiskAnalyticsOrderByRelationAggregateInput
  }

  export type FmeaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FmeaWhereInput | FmeaWhereInput[]
    OR?: FmeaWhereInput[]
    NOT?: FmeaWhereInput | FmeaWhereInput[]
    name?: StringFilter<"Fmea"> | string
    description?: StringNullableFilter<"Fmea"> | string | null
    fmeaType?: EnumFmeaTypeFilter<"Fmea"> | $Enums.FmeaType
    status?: EnumFmeaStatusFilter<"Fmea"> | $Enums.FmeaStatus
    version?: StringFilter<"Fmea"> | string
    approvalDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    createdAt?: DateTimeFilter<"Fmea"> | Date | string
    updatedAt?: DateTimeFilter<"Fmea"> | Date | string
    projectId?: StringFilter<"Fmea"> | string
    processFlowId?: StringNullableFilter<"Fmea"> | string | null
    createdById?: StringFilter<"Fmea"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    processFlow?: XOR<ProcessFlowNullableRelationFilter, ProcessFlowWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    failureModes?: FailureModeListRelationFilter
    controlPlans?: ControlPlanListRelationFilter
    comments?: CommentListRelationFilter
    riskAnalytics?: RiskAnalyticsListRelationFilter
  }, "id">

  export type FmeaOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    fmeaType?: SortOrder
    status?: SortOrder
    version?: SortOrder
    approvalDate?: SortOrderInput | SortOrder
    nextReviewDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    processFlowId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: FmeaCountOrderByAggregateInput
    _max?: FmeaMaxOrderByAggregateInput
    _min?: FmeaMinOrderByAggregateInput
  }

  export type FmeaScalarWhereWithAggregatesInput = {
    AND?: FmeaScalarWhereWithAggregatesInput | FmeaScalarWhereWithAggregatesInput[]
    OR?: FmeaScalarWhereWithAggregatesInput[]
    NOT?: FmeaScalarWhereWithAggregatesInput | FmeaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fmea"> | string
    name?: StringWithAggregatesFilter<"Fmea"> | string
    description?: StringNullableWithAggregatesFilter<"Fmea"> | string | null
    fmeaType?: EnumFmeaTypeWithAggregatesFilter<"Fmea"> | $Enums.FmeaType
    status?: EnumFmeaStatusWithAggregatesFilter<"Fmea"> | $Enums.FmeaStatus
    version?: StringWithAggregatesFilter<"Fmea"> | string
    approvalDate?: DateTimeNullableWithAggregatesFilter<"Fmea"> | Date | string | null
    nextReviewDate?: DateTimeNullableWithAggregatesFilter<"Fmea"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Fmea"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Fmea"> | Date | string
    projectId?: StringWithAggregatesFilter<"Fmea"> | string
    processFlowId?: StringNullableWithAggregatesFilter<"Fmea"> | string | null
    createdById?: StringWithAggregatesFilter<"Fmea"> | string
  }

  export type FailureModeWhereInput = {
    AND?: FailureModeWhereInput | FailureModeWhereInput[]
    OR?: FailureModeWhereInput[]
    NOT?: FailureModeWhereInput | FailureModeWhereInput[]
    id?: StringFilter<"FailureMode"> | string
    name?: StringFilter<"FailureMode"> | string
    description?: StringNullableFilter<"FailureMode"> | string | null
    potential_failure?: StringFilter<"FailureMode"> | string
    potential_effects?: StringFilter<"FailureMode"> | string
    severity?: IntFilter<"FailureMode"> | number
    potential_causes?: StringFilter<"FailureMode"> | string
    occurrence?: IntFilter<"FailureMode"> | number
    current_controls?: StringNullableFilter<"FailureMode"> | string | null
    detection?: IntFilter<"FailureMode"> | number
    rpn?: IntFilter<"FailureMode"> | number
    recommended_actions?: StringNullableFilter<"FailureMode"> | string | null
    responsibility?: StringNullableFilter<"FailureMode"> | string | null
    target_date?: DateTimeNullableFilter<"FailureMode"> | Date | string | null
    actions_taken?: StringNullableFilter<"FailureMode"> | string | null
    revised_severity?: IntNullableFilter<"FailureMode"> | number | null
    revised_occurrence?: IntNullableFilter<"FailureMode"> | number | null
    revised_detection?: IntNullableFilter<"FailureMode"> | number | null
    revised_rpn?: IntNullableFilter<"FailureMode"> | number | null
    createdAt?: DateTimeFilter<"FailureMode"> | Date | string
    updatedAt?: DateTimeFilter<"FailureMode"> | Date | string
    fmeaId?: StringFilter<"FailureMode"> | string
    processId?: StringNullableFilter<"FailureMode"> | string | null
    fmea?: XOR<FmeaRelationFilter, FmeaWhereInput>
    process?: XOR<ProcessNullableRelationFilter, ProcessWhereInput> | null
    actionItems?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type FailureModeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    potential_failure?: SortOrder
    potential_effects?: SortOrder
    severity?: SortOrder
    potential_causes?: SortOrder
    occurrence?: SortOrder
    current_controls?: SortOrderInput | SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    recommended_actions?: SortOrderInput | SortOrder
    responsibility?: SortOrderInput | SortOrder
    target_date?: SortOrderInput | SortOrder
    actions_taken?: SortOrderInput | SortOrder
    revised_severity?: SortOrderInput | SortOrder
    revised_occurrence?: SortOrderInput | SortOrder
    revised_detection?: SortOrderInput | SortOrder
    revised_rpn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fmeaId?: SortOrder
    processId?: SortOrderInput | SortOrder
    fmea?: FmeaOrderByWithRelationInput
    process?: ProcessOrderByWithRelationInput
    actionItems?: ActionItemOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type FailureModeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FailureModeWhereInput | FailureModeWhereInput[]
    OR?: FailureModeWhereInput[]
    NOT?: FailureModeWhereInput | FailureModeWhereInput[]
    name?: StringFilter<"FailureMode"> | string
    description?: StringNullableFilter<"FailureMode"> | string | null
    potential_failure?: StringFilter<"FailureMode"> | string
    potential_effects?: StringFilter<"FailureMode"> | string
    severity?: IntFilter<"FailureMode"> | number
    potential_causes?: StringFilter<"FailureMode"> | string
    occurrence?: IntFilter<"FailureMode"> | number
    current_controls?: StringNullableFilter<"FailureMode"> | string | null
    detection?: IntFilter<"FailureMode"> | number
    rpn?: IntFilter<"FailureMode"> | number
    recommended_actions?: StringNullableFilter<"FailureMode"> | string | null
    responsibility?: StringNullableFilter<"FailureMode"> | string | null
    target_date?: DateTimeNullableFilter<"FailureMode"> | Date | string | null
    actions_taken?: StringNullableFilter<"FailureMode"> | string | null
    revised_severity?: IntNullableFilter<"FailureMode"> | number | null
    revised_occurrence?: IntNullableFilter<"FailureMode"> | number | null
    revised_detection?: IntNullableFilter<"FailureMode"> | number | null
    revised_rpn?: IntNullableFilter<"FailureMode"> | number | null
    createdAt?: DateTimeFilter<"FailureMode"> | Date | string
    updatedAt?: DateTimeFilter<"FailureMode"> | Date | string
    fmeaId?: StringFilter<"FailureMode"> | string
    processId?: StringNullableFilter<"FailureMode"> | string | null
    fmea?: XOR<FmeaRelationFilter, FmeaWhereInput>
    process?: XOR<ProcessNullableRelationFilter, ProcessWhereInput> | null
    actionItems?: ActionItemListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type FailureModeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    potential_failure?: SortOrder
    potential_effects?: SortOrder
    severity?: SortOrder
    potential_causes?: SortOrder
    occurrence?: SortOrder
    current_controls?: SortOrderInput | SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    recommended_actions?: SortOrderInput | SortOrder
    responsibility?: SortOrderInput | SortOrder
    target_date?: SortOrderInput | SortOrder
    actions_taken?: SortOrderInput | SortOrder
    revised_severity?: SortOrderInput | SortOrder
    revised_occurrence?: SortOrderInput | SortOrder
    revised_detection?: SortOrderInput | SortOrder
    revised_rpn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fmeaId?: SortOrder
    processId?: SortOrderInput | SortOrder
    _count?: FailureModeCountOrderByAggregateInput
    _avg?: FailureModeAvgOrderByAggregateInput
    _max?: FailureModeMaxOrderByAggregateInput
    _min?: FailureModeMinOrderByAggregateInput
    _sum?: FailureModeSumOrderByAggregateInput
  }

  export type FailureModeScalarWhereWithAggregatesInput = {
    AND?: FailureModeScalarWhereWithAggregatesInput | FailureModeScalarWhereWithAggregatesInput[]
    OR?: FailureModeScalarWhereWithAggregatesInput[]
    NOT?: FailureModeScalarWhereWithAggregatesInput | FailureModeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FailureMode"> | string
    name?: StringWithAggregatesFilter<"FailureMode"> | string
    description?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
    potential_failure?: StringWithAggregatesFilter<"FailureMode"> | string
    potential_effects?: StringWithAggregatesFilter<"FailureMode"> | string
    severity?: IntWithAggregatesFilter<"FailureMode"> | number
    potential_causes?: StringWithAggregatesFilter<"FailureMode"> | string
    occurrence?: IntWithAggregatesFilter<"FailureMode"> | number
    current_controls?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
    detection?: IntWithAggregatesFilter<"FailureMode"> | number
    rpn?: IntWithAggregatesFilter<"FailureMode"> | number
    recommended_actions?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
    responsibility?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
    target_date?: DateTimeNullableWithAggregatesFilter<"FailureMode"> | Date | string | null
    actions_taken?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
    revised_severity?: IntNullableWithAggregatesFilter<"FailureMode"> | number | null
    revised_occurrence?: IntNullableWithAggregatesFilter<"FailureMode"> | number | null
    revised_detection?: IntNullableWithAggregatesFilter<"FailureMode"> | number | null
    revised_rpn?: IntNullableWithAggregatesFilter<"FailureMode"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"FailureMode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FailureMode"> | Date | string
    fmeaId?: StringWithAggregatesFilter<"FailureMode"> | string
    processId?: StringNullableWithAggregatesFilter<"FailureMode"> | string | null
  }

  export type ControlPlanWhereInput = {
    AND?: ControlPlanWhereInput | ControlPlanWhereInput[]
    OR?: ControlPlanWhereInput[]
    NOT?: ControlPlanWhereInput | ControlPlanWhereInput[]
    id?: StringFilter<"ControlPlan"> | string
    name?: StringFilter<"ControlPlan"> | string
    description?: StringNullableFilter<"ControlPlan"> | string | null
    process_step?: StringFilter<"ControlPlan"> | string
    control_method?: StringFilter<"ControlPlan"> | string
    specification?: StringNullableFilter<"ControlPlan"> | string | null
    measurement_technique?: StringNullableFilter<"ControlPlan"> | string | null
    sample_size?: StringNullableFilter<"ControlPlan"> | string | null
    frequency?: StringNullableFilter<"ControlPlan"> | string | null
    control_method_type?: EnumControlMethodTypeFilter<"ControlPlan"> | $Enums.ControlMethodType
    createdAt?: DateTimeFilter<"ControlPlan"> | Date | string
    updatedAt?: DateTimeFilter<"ControlPlan"> | Date | string
    projectId?: StringFilter<"ControlPlan"> | string
    fmeaId?: StringNullableFilter<"ControlPlan"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
  }

  export type ControlPlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    process_step?: SortOrder
    control_method?: SortOrder
    specification?: SortOrderInput | SortOrder
    measurement_technique?: SortOrderInput | SortOrder
    sample_size?: SortOrderInput | SortOrder
    frequency?: SortOrderInput | SortOrder
    control_method_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    fmea?: FmeaOrderByWithRelationInput
  }

  export type ControlPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ControlPlanWhereInput | ControlPlanWhereInput[]
    OR?: ControlPlanWhereInput[]
    NOT?: ControlPlanWhereInput | ControlPlanWhereInput[]
    name?: StringFilter<"ControlPlan"> | string
    description?: StringNullableFilter<"ControlPlan"> | string | null
    process_step?: StringFilter<"ControlPlan"> | string
    control_method?: StringFilter<"ControlPlan"> | string
    specification?: StringNullableFilter<"ControlPlan"> | string | null
    measurement_technique?: StringNullableFilter<"ControlPlan"> | string | null
    sample_size?: StringNullableFilter<"ControlPlan"> | string | null
    frequency?: StringNullableFilter<"ControlPlan"> | string | null
    control_method_type?: EnumControlMethodTypeFilter<"ControlPlan"> | $Enums.ControlMethodType
    createdAt?: DateTimeFilter<"ControlPlan"> | Date | string
    updatedAt?: DateTimeFilter<"ControlPlan"> | Date | string
    projectId?: StringFilter<"ControlPlan"> | string
    fmeaId?: StringNullableFilter<"ControlPlan"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
  }, "id">

  export type ControlPlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    process_step?: SortOrder
    control_method?: SortOrder
    specification?: SortOrderInput | SortOrder
    measurement_technique?: SortOrderInput | SortOrder
    sample_size?: SortOrderInput | SortOrder
    frequency?: SortOrderInput | SortOrder
    control_method_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrderInput | SortOrder
    _count?: ControlPlanCountOrderByAggregateInput
    _max?: ControlPlanMaxOrderByAggregateInput
    _min?: ControlPlanMinOrderByAggregateInput
  }

  export type ControlPlanScalarWhereWithAggregatesInput = {
    AND?: ControlPlanScalarWhereWithAggregatesInput | ControlPlanScalarWhereWithAggregatesInput[]
    OR?: ControlPlanScalarWhereWithAggregatesInput[]
    NOT?: ControlPlanScalarWhereWithAggregatesInput | ControlPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ControlPlan"> | string
    name?: StringWithAggregatesFilter<"ControlPlan"> | string
    description?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
    process_step?: StringWithAggregatesFilter<"ControlPlan"> | string
    control_method?: StringWithAggregatesFilter<"ControlPlan"> | string
    specification?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
    measurement_technique?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
    sample_size?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
    frequency?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
    control_method_type?: EnumControlMethodTypeWithAggregatesFilter<"ControlPlan"> | $Enums.ControlMethodType
    createdAt?: DateTimeWithAggregatesFilter<"ControlPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ControlPlan"> | Date | string
    projectId?: StringWithAggregatesFilter<"ControlPlan"> | string
    fmeaId?: StringNullableWithAggregatesFilter<"ControlPlan"> | string | null
  }

  export type ActionItemWhereInput = {
    AND?: ActionItemWhereInput | ActionItemWhereInput[]
    OR?: ActionItemWhereInput[]
    NOT?: ActionItemWhereInput | ActionItemWhereInput[]
    id?: StringFilter<"ActionItem"> | string
    title?: StringFilter<"ActionItem"> | string
    description?: StringNullableFilter<"ActionItem"> | string | null
    priority?: EnumPriorityFilter<"ActionItem"> | $Enums.Priority
    status?: EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
    dueDate?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    createdAt?: DateTimeFilter<"ActionItem"> | Date | string
    updatedAt?: DateTimeFilter<"ActionItem"> | Date | string
    projectId?: StringFilter<"ActionItem"> | string
    failureModeId?: StringNullableFilter<"ActionItem"> | string | null
    assigneeId?: StringNullableFilter<"ActionItem"> | string | null
    createdById?: StringFilter<"ActionItem"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    failureMode?: XOR<FailureModeNullableRelationFilter, FailureModeWhereInput> | null
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type ActionItemOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    failureModeId?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    project?: ProjectOrderByWithRelationInput
    failureMode?: FailureModeOrderByWithRelationInput
    assignee?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type ActionItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActionItemWhereInput | ActionItemWhereInput[]
    OR?: ActionItemWhereInput[]
    NOT?: ActionItemWhereInput | ActionItemWhereInput[]
    title?: StringFilter<"ActionItem"> | string
    description?: StringNullableFilter<"ActionItem"> | string | null
    priority?: EnumPriorityFilter<"ActionItem"> | $Enums.Priority
    status?: EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
    dueDate?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    createdAt?: DateTimeFilter<"ActionItem"> | Date | string
    updatedAt?: DateTimeFilter<"ActionItem"> | Date | string
    projectId?: StringFilter<"ActionItem"> | string
    failureModeId?: StringNullableFilter<"ActionItem"> | string | null
    assigneeId?: StringNullableFilter<"ActionItem"> | string | null
    createdById?: StringFilter<"ActionItem"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    failureMode?: XOR<FailureModeNullableRelationFilter, FailureModeWhereInput> | null
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id">

  export type ActionItemOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    failureModeId?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    _count?: ActionItemCountOrderByAggregateInput
    _max?: ActionItemMaxOrderByAggregateInput
    _min?: ActionItemMinOrderByAggregateInput
  }

  export type ActionItemScalarWhereWithAggregatesInput = {
    AND?: ActionItemScalarWhereWithAggregatesInput | ActionItemScalarWhereWithAggregatesInput[]
    OR?: ActionItemScalarWhereWithAggregatesInput[]
    NOT?: ActionItemScalarWhereWithAggregatesInput | ActionItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActionItem"> | string
    title?: StringWithAggregatesFilter<"ActionItem"> | string
    description?: StringNullableWithAggregatesFilter<"ActionItem"> | string | null
    priority?: EnumPriorityWithAggregatesFilter<"ActionItem"> | $Enums.Priority
    status?: EnumActionStatusWithAggregatesFilter<"ActionItem"> | $Enums.ActionStatus
    dueDate?: DateTimeNullableWithAggregatesFilter<"ActionItem"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ActionItem"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ActionItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ActionItem"> | Date | string
    projectId?: StringWithAggregatesFilter<"ActionItem"> | string
    failureModeId?: StringNullableWithAggregatesFilter<"ActionItem"> | string | null
    assigneeId?: StringNullableWithAggregatesFilter<"ActionItem"> | string | null
    createdById?: StringWithAggregatesFilter<"ActionItem"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    fmeaId?: StringNullableFilter<"Comment"> | string | null
    failureModeId?: StringNullableFilter<"Comment"> | string | null
    actionItemId?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
    failureMode?: XOR<FailureModeNullableRelationFilter, FailureModeWhereInput> | null
    actionItem?: XOR<ActionItemNullableRelationFilter, ActionItemWhereInput> | null
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    fmeaId?: SortOrderInput | SortOrder
    failureModeId?: SortOrderInput | SortOrder
    actionItemId?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    fmea?: FmeaOrderByWithRelationInput
    failureMode?: FailureModeOrderByWithRelationInput
    actionItem?: ActionItemOrderByWithRelationInput
    parent?: CommentOrderByWithRelationInput
    replies?: CommentOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    fmeaId?: StringNullableFilter<"Comment"> | string | null
    failureModeId?: StringNullableFilter<"Comment"> | string | null
    actionItemId?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
    failureMode?: XOR<FailureModeNullableRelationFilter, FailureModeWhereInput> | null
    actionItem?: XOR<ActionItemNullableRelationFilter, ActionItemWhereInput> | null
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    replies?: CommentListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    fmeaId?: SortOrderInput | SortOrder
    failureModeId?: SortOrderInput | SortOrder
    actionItemId?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    projectId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    fmeaId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    failureModeId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    actionItemId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    projectId?: StringNullableFilter<"Notification"> | string | null
    actionItemId?: StringNullableFilter<"Notification"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    actionItem?: XOR<ActionItemNullableRelationFilter, ActionItemWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    actionItemId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    actionItem?: ActionItemOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    projectId?: StringNullableFilter<"Notification"> | string | null
    actionItemId?: StringNullableFilter<"Notification"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    actionItem?: XOR<ActionItemNullableRelationFilter, ActionItemWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    actionItemId?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    projectId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    actionItemId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
  }

  export type ChangeEventWhereInput = {
    AND?: ChangeEventWhereInput | ChangeEventWhereInput[]
    OR?: ChangeEventWhereInput[]
    NOT?: ChangeEventWhereInput | ChangeEventWhereInput[]
    id?: StringFilter<"ChangeEvent"> | string
    entityType?: StringFilter<"ChangeEvent"> | string
    entityId?: StringFilter<"ChangeEvent"> | string
    changeType?: EnumChangeTypeFilter<"ChangeEvent"> | $Enums.ChangeType
    oldValues?: JsonNullableFilter<"ChangeEvent">
    newValues?: JsonNullableFilter<"ChangeEvent">
    description?: StringNullableFilter<"ChangeEvent"> | string | null
    reason?: StringNullableFilter<"ChangeEvent"> | string | null
    createdAt?: DateTimeFilter<"ChangeEvent"> | Date | string
    createdById?: StringFilter<"ChangeEvent"> | string
    projectId?: StringFilter<"ChangeEvent"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ChangeEventOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    projectId?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ChangeEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ChangeEventWhereInput | ChangeEventWhereInput[]
    OR?: ChangeEventWhereInput[]
    NOT?: ChangeEventWhereInput | ChangeEventWhereInput[]
    entityType?: StringFilter<"ChangeEvent"> | string
    entityId?: StringFilter<"ChangeEvent"> | string
    changeType?: EnumChangeTypeFilter<"ChangeEvent"> | $Enums.ChangeType
    oldValues?: JsonNullableFilter<"ChangeEvent">
    newValues?: JsonNullableFilter<"ChangeEvent">
    description?: StringNullableFilter<"ChangeEvent"> | string | null
    reason?: StringNullableFilter<"ChangeEvent"> | string | null
    createdAt?: DateTimeFilter<"ChangeEvent"> | Date | string
    createdById?: StringFilter<"ChangeEvent"> | string
    projectId?: StringFilter<"ChangeEvent"> | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id">

  export type ChangeEventOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    reason?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    projectId?: SortOrder
    _count?: ChangeEventCountOrderByAggregateInput
    _max?: ChangeEventMaxOrderByAggregateInput
    _min?: ChangeEventMinOrderByAggregateInput
  }

  export type ChangeEventScalarWhereWithAggregatesInput = {
    AND?: ChangeEventScalarWhereWithAggregatesInput | ChangeEventScalarWhereWithAggregatesInput[]
    OR?: ChangeEventScalarWhereWithAggregatesInput[]
    NOT?: ChangeEventScalarWhereWithAggregatesInput | ChangeEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChangeEvent"> | string
    entityType?: StringWithAggregatesFilter<"ChangeEvent"> | string
    entityId?: StringWithAggregatesFilter<"ChangeEvent"> | string
    changeType?: EnumChangeTypeWithAggregatesFilter<"ChangeEvent"> | $Enums.ChangeType
    oldValues?: JsonNullableWithAggregatesFilter<"ChangeEvent">
    newValues?: JsonNullableWithAggregatesFilter<"ChangeEvent">
    description?: StringNullableWithAggregatesFilter<"ChangeEvent"> | string | null
    reason?: StringNullableWithAggregatesFilter<"ChangeEvent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChangeEvent"> | Date | string
    createdById?: StringWithAggregatesFilter<"ChangeEvent"> | string
    projectId?: StringWithAggregatesFilter<"ChangeEvent"> | string
  }

  export type ComplianceReportWhereInput = {
    AND?: ComplianceReportWhereInput | ComplianceReportWhereInput[]
    OR?: ComplianceReportWhereInput[]
    NOT?: ComplianceReportWhereInput | ComplianceReportWhereInput[]
    id?: StringFilter<"ComplianceReport"> | string
    standard?: EnumComplianceStandardFilter<"ComplianceReport"> | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFilter<"ComplianceReport"> | $Enums.ComplianceStatus
    score?: FloatNullableFilter<"ComplianceReport"> | number | null
    findings?: JsonNullableFilter<"ComplianceReport">
    recommendations?: JsonNullableFilter<"ComplianceReport">
    assessedAt?: DateTimeNullableFilter<"ComplianceReport"> | Date | string | null
    createdAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    updatedAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    projectId?: StringFilter<"ComplianceReport"> | string
    assessedById?: StringNullableFilter<"ComplianceReport"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    assessedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type ComplianceReportOrderByWithRelationInput = {
    id?: SortOrder
    standard?: SortOrder
    status?: SortOrder
    score?: SortOrderInput | SortOrder
    findings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    assessedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assessedById?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    assessedBy?: UserOrderByWithRelationInput
  }

  export type ComplianceReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComplianceReportWhereInput | ComplianceReportWhereInput[]
    OR?: ComplianceReportWhereInput[]
    NOT?: ComplianceReportWhereInput | ComplianceReportWhereInput[]
    standard?: EnumComplianceStandardFilter<"ComplianceReport"> | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFilter<"ComplianceReport"> | $Enums.ComplianceStatus
    score?: FloatNullableFilter<"ComplianceReport"> | number | null
    findings?: JsonNullableFilter<"ComplianceReport">
    recommendations?: JsonNullableFilter<"ComplianceReport">
    assessedAt?: DateTimeNullableFilter<"ComplianceReport"> | Date | string | null
    createdAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    updatedAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    projectId?: StringFilter<"ComplianceReport"> | string
    assessedById?: StringNullableFilter<"ComplianceReport"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    assessedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type ComplianceReportOrderByWithAggregationInput = {
    id?: SortOrder
    standard?: SortOrder
    status?: SortOrder
    score?: SortOrderInput | SortOrder
    findings?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    assessedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assessedById?: SortOrderInput | SortOrder
    _count?: ComplianceReportCountOrderByAggregateInput
    _avg?: ComplianceReportAvgOrderByAggregateInput
    _max?: ComplianceReportMaxOrderByAggregateInput
    _min?: ComplianceReportMinOrderByAggregateInput
    _sum?: ComplianceReportSumOrderByAggregateInput
  }

  export type ComplianceReportScalarWhereWithAggregatesInput = {
    AND?: ComplianceReportScalarWhereWithAggregatesInput | ComplianceReportScalarWhereWithAggregatesInput[]
    OR?: ComplianceReportScalarWhereWithAggregatesInput[]
    NOT?: ComplianceReportScalarWhereWithAggregatesInput | ComplianceReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComplianceReport"> | string
    standard?: EnumComplianceStandardWithAggregatesFilter<"ComplianceReport"> | $Enums.ComplianceStandard
    status?: EnumComplianceStatusWithAggregatesFilter<"ComplianceReport"> | $Enums.ComplianceStatus
    score?: FloatNullableWithAggregatesFilter<"ComplianceReport"> | number | null
    findings?: JsonNullableWithAggregatesFilter<"ComplianceReport">
    recommendations?: JsonNullableWithAggregatesFilter<"ComplianceReport">
    assessedAt?: DateTimeNullableWithAggregatesFilter<"ComplianceReport"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ComplianceReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ComplianceReport"> | Date | string
    projectId?: StringWithAggregatesFilter<"ComplianceReport"> | string
    assessedById?: StringNullableWithAggregatesFilter<"ComplianceReport"> | string | null
  }

  export type RiskAnalyticsWhereInput = {
    AND?: RiskAnalyticsWhereInput | RiskAnalyticsWhereInput[]
    OR?: RiskAnalyticsWhereInput[]
    NOT?: RiskAnalyticsWhereInput | RiskAnalyticsWhereInput[]
    id?: StringFilter<"RiskAnalytics"> | string
    period?: DateTimeFilter<"RiskAnalytics"> | Date | string
    totalRpn?: IntFilter<"RiskAnalytics"> | number
    avgSeverity?: FloatFilter<"RiskAnalytics"> | number
    avgOccurrence?: FloatFilter<"RiskAnalytics"> | number
    avgDetection?: FloatFilter<"RiskAnalytics"> | number
    highRiskCount?: IntFilter<"RiskAnalytics"> | number
    trendData?: JsonNullableFilter<"RiskAnalytics">
    createdAt?: DateTimeFilter<"RiskAnalytics"> | Date | string
    projectId?: StringFilter<"RiskAnalytics"> | string
    fmeaId?: StringNullableFilter<"RiskAnalytics"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
  }

  export type RiskAnalyticsOrderByWithRelationInput = {
    id?: SortOrder
    period?: SortOrder
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
    trendData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    fmea?: FmeaOrderByWithRelationInput
  }

  export type RiskAnalyticsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RiskAnalyticsWhereInput | RiskAnalyticsWhereInput[]
    OR?: RiskAnalyticsWhereInput[]
    NOT?: RiskAnalyticsWhereInput | RiskAnalyticsWhereInput[]
    period?: DateTimeFilter<"RiskAnalytics"> | Date | string
    totalRpn?: IntFilter<"RiskAnalytics"> | number
    avgSeverity?: FloatFilter<"RiskAnalytics"> | number
    avgOccurrence?: FloatFilter<"RiskAnalytics"> | number
    avgDetection?: FloatFilter<"RiskAnalytics"> | number
    highRiskCount?: IntFilter<"RiskAnalytics"> | number
    trendData?: JsonNullableFilter<"RiskAnalytics">
    createdAt?: DateTimeFilter<"RiskAnalytics"> | Date | string
    projectId?: StringFilter<"RiskAnalytics"> | string
    fmeaId?: StringNullableFilter<"RiskAnalytics"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    fmea?: XOR<FmeaNullableRelationFilter, FmeaWhereInput> | null
  }, "id">

  export type RiskAnalyticsOrderByWithAggregationInput = {
    id?: SortOrder
    period?: SortOrder
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
    trendData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrderInput | SortOrder
    _count?: RiskAnalyticsCountOrderByAggregateInput
    _avg?: RiskAnalyticsAvgOrderByAggregateInput
    _max?: RiskAnalyticsMaxOrderByAggregateInput
    _min?: RiskAnalyticsMinOrderByAggregateInput
    _sum?: RiskAnalyticsSumOrderByAggregateInput
  }

  export type RiskAnalyticsScalarWhereWithAggregatesInput = {
    AND?: RiskAnalyticsScalarWhereWithAggregatesInput | RiskAnalyticsScalarWhereWithAggregatesInput[]
    OR?: RiskAnalyticsScalarWhereWithAggregatesInput[]
    NOT?: RiskAnalyticsScalarWhereWithAggregatesInput | RiskAnalyticsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RiskAnalytics"> | string
    period?: DateTimeWithAggregatesFilter<"RiskAnalytics"> | Date | string
    totalRpn?: IntWithAggregatesFilter<"RiskAnalytics"> | number
    avgSeverity?: FloatWithAggregatesFilter<"RiskAnalytics"> | number
    avgOccurrence?: FloatWithAggregatesFilter<"RiskAnalytics"> | number
    avgDetection?: FloatWithAggregatesFilter<"RiskAnalytics"> | number
    highRiskCount?: IntWithAggregatesFilter<"RiskAnalytics"> | number
    trendData?: JsonNullableWithAggregatesFilter<"RiskAnalytics">
    createdAt?: DateTimeWithAggregatesFilter<"RiskAnalytics"> | Date | string
    projectId?: StringWithAggregatesFilter<"RiskAnalytics"> | string
    fmeaId?: StringNullableWithAggregatesFilter<"RiskAnalytics"> | string | null
  }

  export type AuditTrailWhereInput = {
    AND?: AuditTrailWhereInput | AuditTrailWhereInput[]
    OR?: AuditTrailWhereInput[]
    NOT?: AuditTrailWhereInput | AuditTrailWhereInput[]
    id?: StringFilter<"AuditTrail"> | string
    action?: StringFilter<"AuditTrail"> | string
    entityType?: StringFilter<"AuditTrail"> | string
    entityId?: StringFilter<"AuditTrail"> | string
    oldValues?: JsonNullableFilter<"AuditTrail">
    newValues?: JsonNullableFilter<"AuditTrail">
    ipAddress?: StringNullableFilter<"AuditTrail"> | string | null
    userAgent?: StringNullableFilter<"AuditTrail"> | string | null
    createdAt?: DateTimeFilter<"AuditTrail"> | Date | string
    userId?: StringFilter<"AuditTrail"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditTrailOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditTrailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditTrailWhereInput | AuditTrailWhereInput[]
    OR?: AuditTrailWhereInput[]
    NOT?: AuditTrailWhereInput | AuditTrailWhereInput[]
    action?: StringFilter<"AuditTrail"> | string
    entityType?: StringFilter<"AuditTrail"> | string
    entityId?: StringFilter<"AuditTrail"> | string
    oldValues?: JsonNullableFilter<"AuditTrail">
    newValues?: JsonNullableFilter<"AuditTrail">
    ipAddress?: StringNullableFilter<"AuditTrail"> | string | null
    userAgent?: StringNullableFilter<"AuditTrail"> | string | null
    createdAt?: DateTimeFilter<"AuditTrail"> | Date | string
    userId?: StringFilter<"AuditTrail"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditTrailOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: AuditTrailCountOrderByAggregateInput
    _max?: AuditTrailMaxOrderByAggregateInput
    _min?: AuditTrailMinOrderByAggregateInput
  }

  export type AuditTrailScalarWhereWithAggregatesInput = {
    AND?: AuditTrailScalarWhereWithAggregatesInput | AuditTrailScalarWhereWithAggregatesInput[]
    OR?: AuditTrailScalarWhereWithAggregatesInput[]
    NOT?: AuditTrailScalarWhereWithAggregatesInput | AuditTrailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditTrail"> | string
    action?: StringWithAggregatesFilter<"AuditTrail"> | string
    entityType?: StringWithAggregatesFilter<"AuditTrail"> | string
    entityId?: StringWithAggregatesFilter<"AuditTrail"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditTrail">
    newValues?: JsonNullableWithAggregatesFilter<"AuditTrail">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditTrail"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditTrail"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditTrail"> | Date | string
    userId?: StringWithAggregatesFilter<"AuditTrail"> | string
  }

  export type ProjectMemberWhereInput = {
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectMemberOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    user?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ProjectMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_projectId?: ProjectMemberUserIdProjectIdCompoundUniqueInput
    AND?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    OR?: ProjectMemberWhereInput[]
    NOT?: ProjectMemberWhereInput | ProjectMemberWhereInput[]
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "userId_projectId">

  export type ProjectMemberOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    _count?: ProjectMemberCountOrderByAggregateInput
    _max?: ProjectMemberMaxOrderByAggregateInput
    _min?: ProjectMemberMinOrderByAggregateInput
  }

  export type ProjectMemberScalarWhereWithAggregatesInput = {
    AND?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    OR?: ProjectMemberScalarWhereWithAggregatesInput[]
    NOT?: ProjectMemberScalarWhereWithAggregatesInput | ProjectMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectMember"> | string
    role?: EnumProjectRoleWithAggregatesFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeWithAggregatesFilter<"ProjectMember"> | Date | string
    userId?: StringWithAggregatesFilter<"ProjectMember"> | string
    projectId?: StringWithAggregatesFilter<"ProjectMember"> | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessFlowCreateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutProcessFlowsInput
    processes?: ProcessCreateNestedManyWithoutProcessFlowInput
    fmeas?: FmeaCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processes?: ProcessUncheckedCreateNestedManyWithoutProcessFlowInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutProcessFlowsNestedInput
    processes?: ProcessUpdateManyWithoutProcessFlowNestedInput
    fmeas?: FmeaUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUncheckedUpdateManyWithoutProcessFlowNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ProcessFlowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessFlowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessCreateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlow: ProcessFlowCreateNestedOneWithoutProcessesInput
    failureModes?: FailureModeCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlowId: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlow?: ProcessFlowUpdateOneRequiredWithoutProcessesNestedInput
    failureModes?: FailureModeUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlowId?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlowId: string
  }

  export type ProcessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlowId?: StringFieldUpdateOperationsInput | string
  }

  export type FmeaCreateInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
  }

  export type FmeaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FmeaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type FailureModeCreateInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmea: FmeaCreateNestedOneWithoutFailureModesInput
    process?: ProcessCreateNestedOneWithoutFailureModesInput
    actionItems?: ActionItemCreateNestedManyWithoutFailureModeInput
    comments?: CommentCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
    processId?: string | null
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutFailureModeInput
    comments?: CommentUncheckedCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneRequiredWithoutFailureModesNestedInput
    process?: ProcessUpdateOneWithoutFailureModesNestedInput
    actionItems?: ActionItemUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: ActionItemUncheckedUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
    processId?: string | null
  }

  export type FailureModeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FailureModeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ControlPlanCreateInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutControlPlansInput
    fmea?: FmeaCreateNestedOneWithoutControlPlansInput
  }

  export type ControlPlanUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    fmeaId?: string | null
  }

  export type ControlPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutControlPlansNestedInput
    fmea?: FmeaUpdateOneWithoutControlPlansNestedInput
  }

  export type ControlPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ControlPlanCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    fmeaId?: string | null
  }

  export type ControlPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActionItemCreateInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
  }

  export type ActionItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActionItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    project?: ProjectCreateNestedOneWithoutNotificationsInput
    actionItem?: ActionItemCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
    actionItemId?: string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    project?: ProjectUpdateOneWithoutNotificationsNestedInput
    actionItem?: ActionItemUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
    actionItemId?: string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChangeEventCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutChangeEventsInput
    project: ProjectCreateNestedOneWithoutChangeEventsInput
  }

  export type ChangeEventUncheckedCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdById: string
    projectId: string
  }

  export type ChangeEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutChangeEventsNestedInput
    project?: ProjectUpdateOneRequiredWithoutChangeEventsNestedInput
  }

  export type ChangeEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ChangeEventCreateManyInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdById: string
    projectId: string
  }

  export type ChangeEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChangeEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ComplianceReportCreateInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutComplianceReportsInput
    assessedBy?: UserCreateNestedOneWithoutComplianceReportsInput
  }

  export type ComplianceReportUncheckedCreateInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assessedById?: string | null
  }

  export type ComplianceReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutComplianceReportsNestedInput
    assessedBy?: UserUpdateOneWithoutComplianceReportsNestedInput
  }

  export type ComplianceReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assessedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplianceReportCreateManyInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assessedById?: string | null
  }

  export type ComplianceReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplianceReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assessedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskAnalyticsCreateInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutRiskAnalyticsInput
    fmea?: FmeaCreateNestedOneWithoutRiskAnalyticsInput
  }

  export type RiskAnalyticsUncheckedCreateInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    projectId: string
    fmeaId?: string | null
  }

  export type RiskAnalyticsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutRiskAnalyticsNestedInput
    fmea?: FmeaUpdateOneWithoutRiskAnalyticsNestedInput
  }

  export type RiskAnalyticsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskAnalyticsCreateManyInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    projectId: string
    fmeaId?: string | null
  }

  export type RiskAnalyticsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RiskAnalyticsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditTrailCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditTrailInput
  }

  export type AuditTrailUncheckedCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type AuditTrailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditTrailNestedInput
  }

  export type AuditTrailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditTrailCreateManyInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    userId: string
  }

  export type AuditTrailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditTrailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutAssignedProjectsInput
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssignedProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberCreateManyInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type ProjectMemberListRelationFilter = {
    every?: ProjectMemberWhereInput
    some?: ProjectMemberWhereInput
    none?: ProjectMemberWhereInput
  }

  export type FmeaListRelationFilter = {
    every?: FmeaWhereInput
    some?: FmeaWhereInput
    none?: FmeaWhereInput
  }

  export type ActionItemListRelationFilter = {
    every?: ActionItemWhereInput
    some?: ActionItemWhereInput
    none?: ActionItemWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ChangeEventListRelationFilter = {
    every?: ChangeEventWhereInput
    some?: ChangeEventWhereInput
    none?: ChangeEventWhereInput
  }

  export type ComplianceReportListRelationFilter = {
    every?: ComplianceReportWhereInput
    some?: ComplianceReportWhereInput
    none?: ComplianceReportWhereInput
  }

  export type AuditTrailListRelationFilter = {
    every?: AuditTrailWhereInput
    some?: AuditTrailWhereInput
    none?: AuditTrailWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FmeaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActionItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChangeEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplianceReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditTrailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumIndustryFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryFilter<$PrismaModel> | $Enums.Industry
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProcessFlowListRelationFilter = {
    every?: ProcessFlowWhereInput
    some?: ProcessFlowWhereInput
    none?: ProcessFlowWhereInput
  }

  export type ControlPlanListRelationFilter = {
    every?: ControlPlanWhereInput
    some?: ControlPlanWhereInput
    none?: ControlPlanWhereInput
  }

  export type RiskAnalyticsListRelationFilter = {
    every?: RiskAnalyticsWhereInput
    some?: RiskAnalyticsWhereInput
    none?: RiskAnalyticsWhereInput
  }

  export type ProcessFlowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ControlPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RiskAnalyticsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    department?: SortOrder
    industry?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    department?: SortOrder
    industry?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    department?: SortOrder
    industry?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    archivedAt?: SortOrder
    createdById?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumIndustryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryWithAggregatesFilter<$PrismaModel> | $Enums.Industry
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryFilter<$PrismaModel>
    _max?: NestedEnumIndustryFilter<$PrismaModel>
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type ProcessListRelationFilter = {
    every?: ProcessWhereInput
    some?: ProcessWhereInput
    none?: ProcessWhereInput
  }

  export type ProcessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessFlowCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProcessFlowAvgOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type ProcessFlowMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProcessFlowMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type ProcessFlowSumOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProcessFlowRelationFilter = {
    is?: ProcessFlowWhereInput
    isNot?: ProcessFlowWhereInput
  }

  export type FailureModeListRelationFilter = {
    every?: FailureModeWhereInput
    some?: FailureModeWhereInput
    none?: FailureModeWhereInput
  }

  export type FailureModeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcessCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    processType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    processFlowId?: SortOrder
  }

  export type ProcessAvgOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type ProcessMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    processType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    processFlowId?: SortOrder
  }

  export type ProcessMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sequence?: SortOrder
    processType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    resources?: SortOrder
    controls?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    processFlowId?: SortOrder
  }

  export type ProcessSumOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type EnumFmeaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaType | EnumFmeaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaTypeFilter<$PrismaModel> | $Enums.FmeaType
  }

  export type EnumFmeaStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaStatus | EnumFmeaStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaStatusFilter<$PrismaModel> | $Enums.FmeaStatus
  }

  export type ProcessFlowNullableRelationFilter = {
    is?: ProcessFlowWhereInput | null
    isNot?: ProcessFlowWhereInput | null
  }

  export type FmeaCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fmeaType?: SortOrder
    status?: SortOrder
    version?: SortOrder
    approvalDate?: SortOrder
    nextReviewDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    processFlowId?: SortOrder
    createdById?: SortOrder
  }

  export type FmeaMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fmeaType?: SortOrder
    status?: SortOrder
    version?: SortOrder
    approvalDate?: SortOrder
    nextReviewDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    processFlowId?: SortOrder
    createdById?: SortOrder
  }

  export type FmeaMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    fmeaType?: SortOrder
    status?: SortOrder
    version?: SortOrder
    approvalDate?: SortOrder
    nextReviewDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    processFlowId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumFmeaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaType | EnumFmeaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaTypeWithAggregatesFilter<$PrismaModel> | $Enums.FmeaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFmeaTypeFilter<$PrismaModel>
    _max?: NestedEnumFmeaTypeFilter<$PrismaModel>
  }

  export type EnumFmeaStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaStatus | EnumFmeaStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaStatusWithAggregatesFilter<$PrismaModel> | $Enums.FmeaStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFmeaStatusFilter<$PrismaModel>
    _max?: NestedEnumFmeaStatusFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FmeaRelationFilter = {
    is?: FmeaWhereInput
    isNot?: FmeaWhereInput
  }

  export type ProcessNullableRelationFilter = {
    is?: ProcessWhereInput | null
    isNot?: ProcessWhereInput | null
  }

  export type FailureModeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    potential_failure?: SortOrder
    potential_effects?: SortOrder
    severity?: SortOrder
    potential_causes?: SortOrder
    occurrence?: SortOrder
    current_controls?: SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    recommended_actions?: SortOrder
    responsibility?: SortOrder
    target_date?: SortOrder
    actions_taken?: SortOrder
    revised_severity?: SortOrder
    revised_occurrence?: SortOrder
    revised_detection?: SortOrder
    revised_rpn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fmeaId?: SortOrder
    processId?: SortOrder
  }

  export type FailureModeAvgOrderByAggregateInput = {
    severity?: SortOrder
    occurrence?: SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    revised_severity?: SortOrder
    revised_occurrence?: SortOrder
    revised_detection?: SortOrder
    revised_rpn?: SortOrder
  }

  export type FailureModeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    potential_failure?: SortOrder
    potential_effects?: SortOrder
    severity?: SortOrder
    potential_causes?: SortOrder
    occurrence?: SortOrder
    current_controls?: SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    recommended_actions?: SortOrder
    responsibility?: SortOrder
    target_date?: SortOrder
    actions_taken?: SortOrder
    revised_severity?: SortOrder
    revised_occurrence?: SortOrder
    revised_detection?: SortOrder
    revised_rpn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fmeaId?: SortOrder
    processId?: SortOrder
  }

  export type FailureModeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    potential_failure?: SortOrder
    potential_effects?: SortOrder
    severity?: SortOrder
    potential_causes?: SortOrder
    occurrence?: SortOrder
    current_controls?: SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    recommended_actions?: SortOrder
    responsibility?: SortOrder
    target_date?: SortOrder
    actions_taken?: SortOrder
    revised_severity?: SortOrder
    revised_occurrence?: SortOrder
    revised_detection?: SortOrder
    revised_rpn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fmeaId?: SortOrder
    processId?: SortOrder
  }

  export type FailureModeSumOrderByAggregateInput = {
    severity?: SortOrder
    occurrence?: SortOrder
    detection?: SortOrder
    rpn?: SortOrder
    revised_severity?: SortOrder
    revised_occurrence?: SortOrder
    revised_detection?: SortOrder
    revised_rpn?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumControlMethodTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ControlMethodType | EnumControlMethodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumControlMethodTypeFilter<$PrismaModel> | $Enums.ControlMethodType
  }

  export type FmeaNullableRelationFilter = {
    is?: FmeaWhereInput | null
    isNot?: FmeaWhereInput | null
  }

  export type ControlPlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    process_step?: SortOrder
    control_method?: SortOrder
    specification?: SortOrder
    measurement_technique?: SortOrder
    sample_size?: SortOrder
    frequency?: SortOrder
    control_method_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type ControlPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    process_step?: SortOrder
    control_method?: SortOrder
    specification?: SortOrder
    measurement_technique?: SortOrder
    sample_size?: SortOrder
    frequency?: SortOrder
    control_method_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type ControlPlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    process_step?: SortOrder
    control_method?: SortOrder
    specification?: SortOrder
    measurement_technique?: SortOrder
    sample_size?: SortOrder
    frequency?: SortOrder
    control_method_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type EnumControlMethodTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ControlMethodType | EnumControlMethodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumControlMethodTypeWithAggregatesFilter<$PrismaModel> | $Enums.ControlMethodType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumControlMethodTypeFilter<$PrismaModel>
    _max?: NestedEnumControlMethodTypeFilter<$PrismaModel>
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type EnumActionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionStatus | EnumActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActionStatusFilter<$PrismaModel> | $Enums.ActionStatus
  }

  export type FailureModeNullableRelationFilter = {
    is?: FailureModeWhereInput | null
    isNot?: FailureModeWhereInput | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ActionItemCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    failureModeId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
  }

  export type ActionItemMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    failureModeId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
  }

  export type ActionItemMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    failureModeId?: SortOrder
    assigneeId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type EnumActionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionStatus | EnumActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ActionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionStatusFilter<$PrismaModel>
    _max?: NestedEnumActionStatusFilter<$PrismaModel>
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ActionItemNullableRelationFilter = {
    is?: ActionItemWhereInput | null
    isNot?: ActionItemWhereInput | null
  }

  export type CommentNullableRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
    failureModeId?: SortOrder
    actionItemId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
    failureModeId?: SortOrder
    actionItemId?: SortOrder
    parentId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
    failureModeId?: SortOrder
    actionItemId?: SortOrder
    parentId?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    actionItemId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    actionItemId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    actionItemId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeFilter<$PrismaModel> | $Enums.ChangeType
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChangeEventCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    description?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    projectId?: SortOrder
  }

  export type ChangeEventMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    projectId?: SortOrder
  }

  export type ChangeEventMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    description?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    projectId?: SortOrder
  }

  export type EnumChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumChangeTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumComplianceStandardFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStandard | EnumComplianceStandardFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStandardFilter<$PrismaModel> | $Enums.ComplianceStandard
  }

  export type EnumComplianceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusFilter<$PrismaModel> | $Enums.ComplianceStatus
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ComplianceReportCountOrderByAggregateInput = {
    id?: SortOrder
    standard?: SortOrder
    status?: SortOrder
    score?: SortOrder
    findings?: SortOrder
    recommendations?: SortOrder
    assessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assessedById?: SortOrder
  }

  export type ComplianceReportAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type ComplianceReportMaxOrderByAggregateInput = {
    id?: SortOrder
    standard?: SortOrder
    status?: SortOrder
    score?: SortOrder
    assessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assessedById?: SortOrder
  }

  export type ComplianceReportMinOrderByAggregateInput = {
    id?: SortOrder
    standard?: SortOrder
    status?: SortOrder
    score?: SortOrder
    assessedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    assessedById?: SortOrder
  }

  export type ComplianceReportSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type EnumComplianceStandardWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStandard | EnumComplianceStandardFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStandardWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStandard
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStandardFilter<$PrismaModel>
    _max?: NestedEnumComplianceStandardFilter<$PrismaModel>
  }

  export type EnumComplianceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStatusFilter<$PrismaModel>
    _max?: NestedEnumComplianceStatusFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RiskAnalyticsCountOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
    trendData?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type RiskAnalyticsAvgOrderByAggregateInput = {
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
  }

  export type RiskAnalyticsMaxOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type RiskAnalyticsMinOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
    fmeaId?: SortOrder
  }

  export type RiskAnalyticsSumOrderByAggregateInput = {
    totalRpn?: SortOrder
    avgSeverity?: SortOrder
    avgOccurrence?: SortOrder
    avgDetection?: SortOrder
    highRiskCount?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type AuditTrailCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type AuditTrailMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type AuditTrailMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type EnumProjectRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleFilter<$PrismaModel> | $Enums.ProjectRole
  }

  export type ProjectMemberUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type ProjectMemberCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectMemberMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type EnumProjectRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectRoleFilter<$PrismaModel>
  }

  export type ProjectCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type FmeaCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput> | FmeaCreateWithoutCreatedByInput[] | FmeaUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutCreatedByInput | FmeaCreateOrConnectWithoutCreatedByInput[]
    createMany?: FmeaCreateManyCreatedByInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type ActionItemCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput> | ActionItemCreateWithoutAssigneeInput[] | ActionItemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutAssigneeInput | ActionItemCreateOrConnectWithoutAssigneeInput[]
    createMany?: ActionItemCreateManyAssigneeInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type ActionItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput> | ActionItemCreateWithoutCreatedByInput[] | ActionItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutCreatedByInput | ActionItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ActionItemCreateManyCreatedByInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChangeEventCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput> | ChangeEventCreateWithoutCreatedByInput[] | ChangeEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutCreatedByInput | ChangeEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChangeEventCreateManyCreatedByInputEnvelope
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
  }

  export type ComplianceReportCreateNestedManyWithoutAssessedByInput = {
    create?: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput> | ComplianceReportCreateWithoutAssessedByInput[] | ComplianceReportUncheckedCreateWithoutAssessedByInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutAssessedByInput | ComplianceReportCreateOrConnectWithoutAssessedByInput[]
    createMany?: ComplianceReportCreateManyAssessedByInputEnvelope
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
  }

  export type AuditTrailCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput> | AuditTrailCreateWithoutUserInput[] | AuditTrailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditTrailCreateOrConnectWithoutUserInput | AuditTrailCreateOrConnectWithoutUserInput[]
    createMany?: AuditTrailCreateManyUserInputEnvelope
    connect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type FmeaUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput> | FmeaCreateWithoutCreatedByInput[] | FmeaUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutCreatedByInput | FmeaCreateOrConnectWithoutCreatedByInput[]
    createMany?: FmeaCreateManyCreatedByInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type ActionItemUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput> | ActionItemCreateWithoutAssigneeInput[] | ActionItemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutAssigneeInput | ActionItemCreateOrConnectWithoutAssigneeInput[]
    createMany?: ActionItemCreateManyAssigneeInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type ActionItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput> | ActionItemCreateWithoutCreatedByInput[] | ActionItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutCreatedByInput | ActionItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ActionItemCreateManyCreatedByInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput> | ChangeEventCreateWithoutCreatedByInput[] | ChangeEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutCreatedByInput | ChangeEventCreateOrConnectWithoutCreatedByInput[]
    createMany?: ChangeEventCreateManyCreatedByInputEnvelope
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
  }

  export type ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput = {
    create?: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput> | ComplianceReportCreateWithoutAssessedByInput[] | ComplianceReportUncheckedCreateWithoutAssessedByInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutAssessedByInput | ComplianceReportCreateOrConnectWithoutAssessedByInput[]
    createMany?: ComplianceReportCreateManyAssessedByInputEnvelope
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
  }

  export type AuditTrailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput> | AuditTrailCreateWithoutUserInput[] | AuditTrailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditTrailCreateOrConnectWithoutUserInput | AuditTrailCreateOrConnectWithoutUserInput[]
    createMany?: AuditTrailCreateManyUserInputEnvelope
    connect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProjectUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByInput | ProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByInput | ProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByInput | ProjectUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type FmeaUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput> | FmeaCreateWithoutCreatedByInput[] | FmeaUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutCreatedByInput | FmeaCreateOrConnectWithoutCreatedByInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutCreatedByInput | FmeaUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FmeaCreateManyCreatedByInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutCreatedByInput | FmeaUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutCreatedByInput | FmeaUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ActionItemUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput> | ActionItemCreateWithoutAssigneeInput[] | ActionItemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutAssigneeInput | ActionItemCreateOrConnectWithoutAssigneeInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutAssigneeInput | ActionItemUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: ActionItemCreateManyAssigneeInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutAssigneeInput | ActionItemUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutAssigneeInput | ActionItemUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type ActionItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput> | ActionItemCreateWithoutCreatedByInput[] | ActionItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutCreatedByInput | ActionItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutCreatedByInput | ActionItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ActionItemCreateManyCreatedByInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutCreatedByInput | ActionItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutCreatedByInput | ActionItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChangeEventUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput> | ChangeEventCreateWithoutCreatedByInput[] | ChangeEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutCreatedByInput | ChangeEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChangeEventUpsertWithWhereUniqueWithoutCreatedByInput | ChangeEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChangeEventCreateManyCreatedByInputEnvelope
    set?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    disconnect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    delete?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    update?: ChangeEventUpdateWithWhereUniqueWithoutCreatedByInput | ChangeEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChangeEventUpdateManyWithWhereWithoutCreatedByInput | ChangeEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
  }

  export type ComplianceReportUpdateManyWithoutAssessedByNestedInput = {
    create?: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput> | ComplianceReportCreateWithoutAssessedByInput[] | ComplianceReportUncheckedCreateWithoutAssessedByInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutAssessedByInput | ComplianceReportCreateOrConnectWithoutAssessedByInput[]
    upsert?: ComplianceReportUpsertWithWhereUniqueWithoutAssessedByInput | ComplianceReportUpsertWithWhereUniqueWithoutAssessedByInput[]
    createMany?: ComplianceReportCreateManyAssessedByInputEnvelope
    set?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    disconnect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    delete?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    update?: ComplianceReportUpdateWithWhereUniqueWithoutAssessedByInput | ComplianceReportUpdateWithWhereUniqueWithoutAssessedByInput[]
    updateMany?: ComplianceReportUpdateManyWithWhereWithoutAssessedByInput | ComplianceReportUpdateManyWithWhereWithoutAssessedByInput[]
    deleteMany?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
  }

  export type AuditTrailUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput> | AuditTrailCreateWithoutUserInput[] | AuditTrailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditTrailCreateOrConnectWithoutUserInput | AuditTrailCreateOrConnectWithoutUserInput[]
    upsert?: AuditTrailUpsertWithWhereUniqueWithoutUserInput | AuditTrailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditTrailCreateManyUserInputEnvelope
    set?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    disconnect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    delete?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    connect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    update?: AuditTrailUpdateWithWhereUniqueWithoutUserInput | AuditTrailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditTrailUpdateManyWithWhereWithoutUserInput | AuditTrailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditTrailScalarWhereInput | AuditTrailScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput> | ProjectCreateWithoutCreatedByInput[] | ProjectUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutCreatedByInput | ProjectCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutCreatedByInput | ProjectUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProjectCreateManyCreatedByInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutCreatedByInput | ProjectUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutCreatedByInput | ProjectUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput> | ProjectMemberCreateWithoutUserInput[] | ProjectMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutUserInput | ProjectMemberCreateOrConnectWithoutUserInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutUserInput | ProjectMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectMemberCreateManyUserInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutUserInput | ProjectMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutUserInput | ProjectMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type FmeaUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput> | FmeaCreateWithoutCreatedByInput[] | FmeaUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutCreatedByInput | FmeaCreateOrConnectWithoutCreatedByInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutCreatedByInput | FmeaUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: FmeaCreateManyCreatedByInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutCreatedByInput | FmeaUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutCreatedByInput | FmeaUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput> | ActionItemCreateWithoutAssigneeInput[] | ActionItemUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutAssigneeInput | ActionItemCreateOrConnectWithoutAssigneeInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutAssigneeInput | ActionItemUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: ActionItemCreateManyAssigneeInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutAssigneeInput | ActionItemUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutAssigneeInput | ActionItemUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput> | ActionItemCreateWithoutCreatedByInput[] | ActionItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutCreatedByInput | ActionItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutCreatedByInput | ActionItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ActionItemCreateManyCreatedByInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutCreatedByInput | ActionItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutCreatedByInput | ActionItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput> | ChangeEventCreateWithoutCreatedByInput[] | ChangeEventUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutCreatedByInput | ChangeEventCreateOrConnectWithoutCreatedByInput[]
    upsert?: ChangeEventUpsertWithWhereUniqueWithoutCreatedByInput | ChangeEventUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ChangeEventCreateManyCreatedByInputEnvelope
    set?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    disconnect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    delete?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    update?: ChangeEventUpdateWithWhereUniqueWithoutCreatedByInput | ChangeEventUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ChangeEventUpdateManyWithWhereWithoutCreatedByInput | ChangeEventUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
  }

  export type ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput = {
    create?: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput> | ComplianceReportCreateWithoutAssessedByInput[] | ComplianceReportUncheckedCreateWithoutAssessedByInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutAssessedByInput | ComplianceReportCreateOrConnectWithoutAssessedByInput[]
    upsert?: ComplianceReportUpsertWithWhereUniqueWithoutAssessedByInput | ComplianceReportUpsertWithWhereUniqueWithoutAssessedByInput[]
    createMany?: ComplianceReportCreateManyAssessedByInputEnvelope
    set?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    disconnect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    delete?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    update?: ComplianceReportUpdateWithWhereUniqueWithoutAssessedByInput | ComplianceReportUpdateWithWhereUniqueWithoutAssessedByInput[]
    updateMany?: ComplianceReportUpdateManyWithWhereWithoutAssessedByInput | ComplianceReportUpdateManyWithWhereWithoutAssessedByInput[]
    deleteMany?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
  }

  export type AuditTrailUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput> | AuditTrailCreateWithoutUserInput[] | AuditTrailUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditTrailCreateOrConnectWithoutUserInput | AuditTrailCreateOrConnectWithoutUserInput[]
    upsert?: AuditTrailUpsertWithWhereUniqueWithoutUserInput | AuditTrailUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditTrailCreateManyUserInputEnvelope
    set?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    disconnect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    delete?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    connect?: AuditTrailWhereUniqueInput | AuditTrailWhereUniqueInput[]
    update?: AuditTrailUpdateWithWhereUniqueWithoutUserInput | AuditTrailUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditTrailUpdateManyWithWhereWithoutUserInput | AuditTrailUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditTrailScalarWhereInput | AuditTrailScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedProjectsInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectMemberCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type ProcessFlowCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput> | ProcessFlowCreateWithoutProjectInput[] | ProcessFlowUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProjectInput | ProcessFlowCreateOrConnectWithoutProjectInput[]
    createMany?: ProcessFlowCreateManyProjectInputEnvelope
    connect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
  }

  export type FmeaCreateNestedManyWithoutProjectInput = {
    create?: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput> | FmeaCreateWithoutProjectInput[] | FmeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProjectInput | FmeaCreateOrConnectWithoutProjectInput[]
    createMany?: FmeaCreateManyProjectInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type ControlPlanCreateNestedManyWithoutProjectInput = {
    create?: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput> | ControlPlanCreateWithoutProjectInput[] | ControlPlanUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutProjectInput | ControlPlanCreateOrConnectWithoutProjectInput[]
    createMany?: ControlPlanCreateManyProjectInputEnvelope
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
  }

  export type ActionItemCreateNestedManyWithoutProjectInput = {
    create?: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput> | ActionItemCreateWithoutProjectInput[] | ActionItemUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutProjectInput | ActionItemCreateOrConnectWithoutProjectInput[]
    createMany?: ActionItemCreateManyProjectInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutProjectInput = {
    create?: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput> | NotificationCreateWithoutProjectInput[] | NotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutProjectInput | NotificationCreateOrConnectWithoutProjectInput[]
    createMany?: NotificationCreateManyProjectInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChangeEventCreateNestedManyWithoutProjectInput = {
    create?: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput> | ChangeEventCreateWithoutProjectInput[] | ChangeEventUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutProjectInput | ChangeEventCreateOrConnectWithoutProjectInput[]
    createMany?: ChangeEventCreateManyProjectInputEnvelope
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
  }

  export type ComplianceReportCreateNestedManyWithoutProjectInput = {
    create?: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput> | ComplianceReportCreateWithoutProjectInput[] | ComplianceReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutProjectInput | ComplianceReportCreateOrConnectWithoutProjectInput[]
    createMany?: ComplianceReportCreateManyProjectInputEnvelope
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
  }

  export type RiskAnalyticsCreateNestedManyWithoutProjectInput = {
    create?: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput> | RiskAnalyticsCreateWithoutProjectInput[] | RiskAnalyticsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutProjectInput | RiskAnalyticsCreateOrConnectWithoutProjectInput[]
    createMany?: RiskAnalyticsCreateManyProjectInputEnvelope
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
  }

  export type ProjectMemberUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
  }

  export type ProcessFlowUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput> | ProcessFlowCreateWithoutProjectInput[] | ProcessFlowUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProjectInput | ProcessFlowCreateOrConnectWithoutProjectInput[]
    createMany?: ProcessFlowCreateManyProjectInputEnvelope
    connect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
  }

  export type FmeaUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput> | FmeaCreateWithoutProjectInput[] | FmeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProjectInput | FmeaCreateOrConnectWithoutProjectInput[]
    createMany?: FmeaCreateManyProjectInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type ControlPlanUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput> | ControlPlanCreateWithoutProjectInput[] | ControlPlanUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutProjectInput | ControlPlanCreateOrConnectWithoutProjectInput[]
    createMany?: ControlPlanCreateManyProjectInputEnvelope
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
  }

  export type ActionItemUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput> | ActionItemCreateWithoutProjectInput[] | ActionItemUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutProjectInput | ActionItemCreateOrConnectWithoutProjectInput[]
    createMany?: ActionItemCreateManyProjectInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput> | NotificationCreateWithoutProjectInput[] | NotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutProjectInput | NotificationCreateOrConnectWithoutProjectInput[]
    createMany?: NotificationCreateManyProjectInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ChangeEventUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput> | ChangeEventCreateWithoutProjectInput[] | ChangeEventUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutProjectInput | ChangeEventCreateOrConnectWithoutProjectInput[]
    createMany?: ChangeEventCreateManyProjectInputEnvelope
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
  }

  export type ComplianceReportUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput> | ComplianceReportCreateWithoutProjectInput[] | ComplianceReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutProjectInput | ComplianceReportCreateOrConnectWithoutProjectInput[]
    createMany?: ComplianceReportCreateManyProjectInputEnvelope
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
  }

  export type RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput> | RiskAnalyticsCreateWithoutProjectInput[] | RiskAnalyticsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutProjectInput | RiskAnalyticsCreateOrConnectWithoutProjectInput[]
    createMany?: RiskAnalyticsCreateManyProjectInputEnvelope
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumIndustryFieldUpdateOperationsInput = {
    set?: $Enums.Industry
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type UserUpdateOneRequiredWithoutCreatedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProjectsInput
    upsert?: UserUpsertWithoutCreatedProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProjectsInput, UserUpdateWithoutCreatedProjectsInput>, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type ProjectMemberUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type ProcessFlowUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput> | ProcessFlowCreateWithoutProjectInput[] | ProcessFlowUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProjectInput | ProcessFlowCreateOrConnectWithoutProjectInput[]
    upsert?: ProcessFlowUpsertWithWhereUniqueWithoutProjectInput | ProcessFlowUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProcessFlowCreateManyProjectInputEnvelope
    set?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    disconnect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    delete?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    connect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    update?: ProcessFlowUpdateWithWhereUniqueWithoutProjectInput | ProcessFlowUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProcessFlowUpdateManyWithWhereWithoutProjectInput | ProcessFlowUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProcessFlowScalarWhereInput | ProcessFlowScalarWhereInput[]
  }

  export type FmeaUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput> | FmeaCreateWithoutProjectInput[] | FmeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProjectInput | FmeaCreateOrConnectWithoutProjectInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutProjectInput | FmeaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FmeaCreateManyProjectInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutProjectInput | FmeaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutProjectInput | FmeaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ControlPlanUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput> | ControlPlanCreateWithoutProjectInput[] | ControlPlanUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutProjectInput | ControlPlanCreateOrConnectWithoutProjectInput[]
    upsert?: ControlPlanUpsertWithWhereUniqueWithoutProjectInput | ControlPlanUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ControlPlanCreateManyProjectInputEnvelope
    set?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    disconnect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    delete?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    update?: ControlPlanUpdateWithWhereUniqueWithoutProjectInput | ControlPlanUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ControlPlanUpdateManyWithWhereWithoutProjectInput | ControlPlanUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
  }

  export type ActionItemUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput> | ActionItemCreateWithoutProjectInput[] | ActionItemUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutProjectInput | ActionItemCreateOrConnectWithoutProjectInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutProjectInput | ActionItemUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ActionItemCreateManyProjectInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutProjectInput | ActionItemUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutProjectInput | ActionItemUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutProjectNestedInput = {
    create?: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput> | NotificationCreateWithoutProjectInput[] | NotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutProjectInput | NotificationCreateOrConnectWithoutProjectInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutProjectInput | NotificationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: NotificationCreateManyProjectInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutProjectInput | NotificationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutProjectInput | NotificationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChangeEventUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput> | ChangeEventCreateWithoutProjectInput[] | ChangeEventUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutProjectInput | ChangeEventCreateOrConnectWithoutProjectInput[]
    upsert?: ChangeEventUpsertWithWhereUniqueWithoutProjectInput | ChangeEventUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ChangeEventCreateManyProjectInputEnvelope
    set?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    disconnect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    delete?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    update?: ChangeEventUpdateWithWhereUniqueWithoutProjectInput | ChangeEventUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ChangeEventUpdateManyWithWhereWithoutProjectInput | ChangeEventUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
  }

  export type ComplianceReportUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput> | ComplianceReportCreateWithoutProjectInput[] | ComplianceReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutProjectInput | ComplianceReportCreateOrConnectWithoutProjectInput[]
    upsert?: ComplianceReportUpsertWithWhereUniqueWithoutProjectInput | ComplianceReportUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ComplianceReportCreateManyProjectInputEnvelope
    set?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    disconnect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    delete?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    update?: ComplianceReportUpdateWithWhereUniqueWithoutProjectInput | ComplianceReportUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ComplianceReportUpdateManyWithWhereWithoutProjectInput | ComplianceReportUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
  }

  export type RiskAnalyticsUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput> | RiskAnalyticsCreateWithoutProjectInput[] | RiskAnalyticsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutProjectInput | RiskAnalyticsCreateOrConnectWithoutProjectInput[]
    upsert?: RiskAnalyticsUpsertWithWhereUniqueWithoutProjectInput | RiskAnalyticsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RiskAnalyticsCreateManyProjectInputEnvelope
    set?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    disconnect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    delete?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    update?: RiskAnalyticsUpdateWithWhereUniqueWithoutProjectInput | RiskAnalyticsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RiskAnalyticsUpdateManyWithWhereWithoutProjectInput | RiskAnalyticsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput> | ProjectMemberCreateWithoutProjectInput[] | ProjectMemberUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectMemberCreateOrConnectWithoutProjectInput | ProjectMemberCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectMemberUpsertWithWhereUniqueWithoutProjectInput | ProjectMemberUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectMemberCreateManyProjectInputEnvelope
    set?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    disconnect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    delete?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    connect?: ProjectMemberWhereUniqueInput | ProjectMemberWhereUniqueInput[]
    update?: ProjectMemberUpdateWithWhereUniqueWithoutProjectInput | ProjectMemberUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectMemberUpdateManyWithWhereWithoutProjectInput | ProjectMemberUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
  }

  export type ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput> | ProcessFlowCreateWithoutProjectInput[] | ProcessFlowUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProjectInput | ProcessFlowCreateOrConnectWithoutProjectInput[]
    upsert?: ProcessFlowUpsertWithWhereUniqueWithoutProjectInput | ProcessFlowUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProcessFlowCreateManyProjectInputEnvelope
    set?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    disconnect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    delete?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    connect?: ProcessFlowWhereUniqueInput | ProcessFlowWhereUniqueInput[]
    update?: ProcessFlowUpdateWithWhereUniqueWithoutProjectInput | ProcessFlowUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProcessFlowUpdateManyWithWhereWithoutProjectInput | ProcessFlowUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProcessFlowScalarWhereInput | ProcessFlowScalarWhereInput[]
  }

  export type FmeaUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput> | FmeaCreateWithoutProjectInput[] | FmeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProjectInput | FmeaCreateOrConnectWithoutProjectInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutProjectInput | FmeaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: FmeaCreateManyProjectInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutProjectInput | FmeaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutProjectInput | FmeaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ControlPlanUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput> | ControlPlanCreateWithoutProjectInput[] | ControlPlanUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutProjectInput | ControlPlanCreateOrConnectWithoutProjectInput[]
    upsert?: ControlPlanUpsertWithWhereUniqueWithoutProjectInput | ControlPlanUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ControlPlanCreateManyProjectInputEnvelope
    set?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    disconnect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    delete?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    update?: ControlPlanUpdateWithWhereUniqueWithoutProjectInput | ControlPlanUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ControlPlanUpdateManyWithWhereWithoutProjectInput | ControlPlanUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
  }

  export type ActionItemUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput> | ActionItemCreateWithoutProjectInput[] | ActionItemUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutProjectInput | ActionItemCreateOrConnectWithoutProjectInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutProjectInput | ActionItemUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ActionItemCreateManyProjectInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutProjectInput | ActionItemUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutProjectInput | ActionItemUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput> | NotificationCreateWithoutProjectInput[] | NotificationUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutProjectInput | NotificationCreateOrConnectWithoutProjectInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutProjectInput | NotificationUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: NotificationCreateManyProjectInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutProjectInput | NotificationUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutProjectInput | NotificationUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ChangeEventUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput> | ChangeEventCreateWithoutProjectInput[] | ChangeEventUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ChangeEventCreateOrConnectWithoutProjectInput | ChangeEventCreateOrConnectWithoutProjectInput[]
    upsert?: ChangeEventUpsertWithWhereUniqueWithoutProjectInput | ChangeEventUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ChangeEventCreateManyProjectInputEnvelope
    set?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    disconnect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    delete?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    connect?: ChangeEventWhereUniqueInput | ChangeEventWhereUniqueInput[]
    update?: ChangeEventUpdateWithWhereUniqueWithoutProjectInput | ChangeEventUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ChangeEventUpdateManyWithWhereWithoutProjectInput | ChangeEventUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
  }

  export type ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput> | ComplianceReportCreateWithoutProjectInput[] | ComplianceReportUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ComplianceReportCreateOrConnectWithoutProjectInput | ComplianceReportCreateOrConnectWithoutProjectInput[]
    upsert?: ComplianceReportUpsertWithWhereUniqueWithoutProjectInput | ComplianceReportUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ComplianceReportCreateManyProjectInputEnvelope
    set?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    disconnect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    delete?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    connect?: ComplianceReportWhereUniqueInput | ComplianceReportWhereUniqueInput[]
    update?: ComplianceReportUpdateWithWhereUniqueWithoutProjectInput | ComplianceReportUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ComplianceReportUpdateManyWithWhereWithoutProjectInput | ComplianceReportUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
  }

  export type RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput> | RiskAnalyticsCreateWithoutProjectInput[] | RiskAnalyticsUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutProjectInput | RiskAnalyticsCreateOrConnectWithoutProjectInput[]
    upsert?: RiskAnalyticsUpsertWithWhereUniqueWithoutProjectInput | RiskAnalyticsUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: RiskAnalyticsCreateManyProjectInputEnvelope
    set?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    disconnect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    delete?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    update?: RiskAnalyticsUpdateWithWhereUniqueWithoutProjectInput | RiskAnalyticsUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: RiskAnalyticsUpdateManyWithWhereWithoutProjectInput | RiskAnalyticsUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutProcessFlowsInput = {
    create?: XOR<ProjectCreateWithoutProcessFlowsInput, ProjectUncheckedCreateWithoutProcessFlowsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProcessFlowsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProcessCreateNestedManyWithoutProcessFlowInput = {
    create?: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput> | ProcessCreateWithoutProcessFlowInput[] | ProcessUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProcessFlowInput | ProcessCreateOrConnectWithoutProcessFlowInput[]
    createMany?: ProcessCreateManyProcessFlowInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type FmeaCreateNestedManyWithoutProcessFlowInput = {
    create?: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput> | FmeaCreateWithoutProcessFlowInput[] | FmeaUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProcessFlowInput | FmeaCreateOrConnectWithoutProcessFlowInput[]
    createMany?: FmeaCreateManyProcessFlowInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type ProcessUncheckedCreateNestedManyWithoutProcessFlowInput = {
    create?: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput> | ProcessCreateWithoutProcessFlowInput[] | ProcessUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProcessFlowInput | ProcessCreateOrConnectWithoutProcessFlowInput[]
    createMany?: ProcessCreateManyProcessFlowInputEnvelope
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
  }

  export type FmeaUncheckedCreateNestedManyWithoutProcessFlowInput = {
    create?: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput> | FmeaCreateWithoutProcessFlowInput[] | FmeaUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProcessFlowInput | FmeaCreateOrConnectWithoutProcessFlowInput[]
    createMany?: FmeaCreateManyProcessFlowInputEnvelope
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutProcessFlowsNestedInput = {
    create?: XOR<ProjectCreateWithoutProcessFlowsInput, ProjectUncheckedCreateWithoutProcessFlowsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutProcessFlowsInput
    upsert?: ProjectUpsertWithoutProcessFlowsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutProcessFlowsInput, ProjectUpdateWithoutProcessFlowsInput>, ProjectUncheckedUpdateWithoutProcessFlowsInput>
  }

  export type ProcessUpdateManyWithoutProcessFlowNestedInput = {
    create?: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput> | ProcessCreateWithoutProcessFlowInput[] | ProcessUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProcessFlowInput | ProcessCreateOrConnectWithoutProcessFlowInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutProcessFlowInput | ProcessUpsertWithWhereUniqueWithoutProcessFlowInput[]
    createMany?: ProcessCreateManyProcessFlowInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutProcessFlowInput | ProcessUpdateWithWhereUniqueWithoutProcessFlowInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutProcessFlowInput | ProcessUpdateManyWithWhereWithoutProcessFlowInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type FmeaUpdateManyWithoutProcessFlowNestedInput = {
    create?: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput> | FmeaCreateWithoutProcessFlowInput[] | FmeaUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProcessFlowInput | FmeaCreateOrConnectWithoutProcessFlowInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutProcessFlowInput | FmeaUpsertWithWhereUniqueWithoutProcessFlowInput[]
    createMany?: FmeaCreateManyProcessFlowInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutProcessFlowInput | FmeaUpdateWithWhereUniqueWithoutProcessFlowInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutProcessFlowInput | FmeaUpdateManyWithWhereWithoutProcessFlowInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ProcessUncheckedUpdateManyWithoutProcessFlowNestedInput = {
    create?: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput> | ProcessCreateWithoutProcessFlowInput[] | ProcessUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: ProcessCreateOrConnectWithoutProcessFlowInput | ProcessCreateOrConnectWithoutProcessFlowInput[]
    upsert?: ProcessUpsertWithWhereUniqueWithoutProcessFlowInput | ProcessUpsertWithWhereUniqueWithoutProcessFlowInput[]
    createMany?: ProcessCreateManyProcessFlowInputEnvelope
    set?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    disconnect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    delete?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    connect?: ProcessWhereUniqueInput | ProcessWhereUniqueInput[]
    update?: ProcessUpdateWithWhereUniqueWithoutProcessFlowInput | ProcessUpdateWithWhereUniqueWithoutProcessFlowInput[]
    updateMany?: ProcessUpdateManyWithWhereWithoutProcessFlowInput | ProcessUpdateManyWithWhereWithoutProcessFlowInput[]
    deleteMany?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
  }

  export type FmeaUncheckedUpdateManyWithoutProcessFlowNestedInput = {
    create?: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput> | FmeaCreateWithoutProcessFlowInput[] | FmeaUncheckedCreateWithoutProcessFlowInput[]
    connectOrCreate?: FmeaCreateOrConnectWithoutProcessFlowInput | FmeaCreateOrConnectWithoutProcessFlowInput[]
    upsert?: FmeaUpsertWithWhereUniqueWithoutProcessFlowInput | FmeaUpsertWithWhereUniqueWithoutProcessFlowInput[]
    createMany?: FmeaCreateManyProcessFlowInputEnvelope
    set?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    disconnect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    delete?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    connect?: FmeaWhereUniqueInput | FmeaWhereUniqueInput[]
    update?: FmeaUpdateWithWhereUniqueWithoutProcessFlowInput | FmeaUpdateWithWhereUniqueWithoutProcessFlowInput[]
    updateMany?: FmeaUpdateManyWithWhereWithoutProcessFlowInput | FmeaUpdateManyWithWhereWithoutProcessFlowInput[]
    deleteMany?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
  }

  export type ProcessFlowCreateNestedOneWithoutProcessesInput = {
    create?: XOR<ProcessFlowCreateWithoutProcessesInput, ProcessFlowUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProcessesInput
    connect?: ProcessFlowWhereUniqueInput
  }

  export type FailureModeCreateNestedManyWithoutProcessInput = {
    create?: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput> | FailureModeCreateWithoutProcessInput[] | FailureModeUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutProcessInput | FailureModeCreateOrConnectWithoutProcessInput[]
    createMany?: FailureModeCreateManyProcessInputEnvelope
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
  }

  export type FailureModeUncheckedCreateNestedManyWithoutProcessInput = {
    create?: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput> | FailureModeCreateWithoutProcessInput[] | FailureModeUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutProcessInput | FailureModeCreateOrConnectWithoutProcessInput[]
    createMany?: FailureModeCreateManyProcessInputEnvelope
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
  }

  export type ProcessFlowUpdateOneRequiredWithoutProcessesNestedInput = {
    create?: XOR<ProcessFlowCreateWithoutProcessesInput, ProcessFlowUncheckedCreateWithoutProcessesInput>
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutProcessesInput
    upsert?: ProcessFlowUpsertWithoutProcessesInput
    connect?: ProcessFlowWhereUniqueInput
    update?: XOR<XOR<ProcessFlowUpdateToOneWithWhereWithoutProcessesInput, ProcessFlowUpdateWithoutProcessesInput>, ProcessFlowUncheckedUpdateWithoutProcessesInput>
  }

  export type FailureModeUpdateManyWithoutProcessNestedInput = {
    create?: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput> | FailureModeCreateWithoutProcessInput[] | FailureModeUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutProcessInput | FailureModeCreateOrConnectWithoutProcessInput[]
    upsert?: FailureModeUpsertWithWhereUniqueWithoutProcessInput | FailureModeUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: FailureModeCreateManyProcessInputEnvelope
    set?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    disconnect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    delete?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    update?: FailureModeUpdateWithWhereUniqueWithoutProcessInput | FailureModeUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: FailureModeUpdateManyWithWhereWithoutProcessInput | FailureModeUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
  }

  export type FailureModeUncheckedUpdateManyWithoutProcessNestedInput = {
    create?: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput> | FailureModeCreateWithoutProcessInput[] | FailureModeUncheckedCreateWithoutProcessInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutProcessInput | FailureModeCreateOrConnectWithoutProcessInput[]
    upsert?: FailureModeUpsertWithWhereUniqueWithoutProcessInput | FailureModeUpsertWithWhereUniqueWithoutProcessInput[]
    createMany?: FailureModeCreateManyProcessInputEnvelope
    set?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    disconnect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    delete?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    update?: FailureModeUpdateWithWhereUniqueWithoutProcessInput | FailureModeUpdateWithWhereUniqueWithoutProcessInput[]
    updateMany?: FailureModeUpdateManyWithWhereWithoutProcessInput | FailureModeUpdateManyWithWhereWithoutProcessInput[]
    deleteMany?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutFmeasInput = {
    create?: XOR<ProjectCreateWithoutFmeasInput, ProjectUncheckedCreateWithoutFmeasInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFmeasInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProcessFlowCreateNestedOneWithoutFmeasInput = {
    create?: XOR<ProcessFlowCreateWithoutFmeasInput, ProcessFlowUncheckedCreateWithoutFmeasInput>
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutFmeasInput
    connect?: ProcessFlowWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedFmeasInput = {
    create?: XOR<UserCreateWithoutCreatedFmeasInput, UserUncheckedCreateWithoutCreatedFmeasInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFmeasInput
    connect?: UserWhereUniqueInput
  }

  export type FailureModeCreateNestedManyWithoutFmeaInput = {
    create?: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput> | FailureModeCreateWithoutFmeaInput[] | FailureModeUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutFmeaInput | FailureModeCreateOrConnectWithoutFmeaInput[]
    createMany?: FailureModeCreateManyFmeaInputEnvelope
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
  }

  export type ControlPlanCreateNestedManyWithoutFmeaInput = {
    create?: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput> | ControlPlanCreateWithoutFmeaInput[] | ControlPlanUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutFmeaInput | ControlPlanCreateOrConnectWithoutFmeaInput[]
    createMany?: ControlPlanCreateManyFmeaInputEnvelope
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutFmeaInput = {
    create?: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput> | CommentCreateWithoutFmeaInput[] | CommentUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFmeaInput | CommentCreateOrConnectWithoutFmeaInput[]
    createMany?: CommentCreateManyFmeaInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RiskAnalyticsCreateNestedManyWithoutFmeaInput = {
    create?: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput> | RiskAnalyticsCreateWithoutFmeaInput[] | RiskAnalyticsUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutFmeaInput | RiskAnalyticsCreateOrConnectWithoutFmeaInput[]
    createMany?: RiskAnalyticsCreateManyFmeaInputEnvelope
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
  }

  export type FailureModeUncheckedCreateNestedManyWithoutFmeaInput = {
    create?: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput> | FailureModeCreateWithoutFmeaInput[] | FailureModeUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutFmeaInput | FailureModeCreateOrConnectWithoutFmeaInput[]
    createMany?: FailureModeCreateManyFmeaInputEnvelope
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
  }

  export type ControlPlanUncheckedCreateNestedManyWithoutFmeaInput = {
    create?: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput> | ControlPlanCreateWithoutFmeaInput[] | ControlPlanUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutFmeaInput | ControlPlanCreateOrConnectWithoutFmeaInput[]
    createMany?: ControlPlanCreateManyFmeaInputEnvelope
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutFmeaInput = {
    create?: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput> | CommentCreateWithoutFmeaInput[] | CommentUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFmeaInput | CommentCreateOrConnectWithoutFmeaInput[]
    createMany?: CommentCreateManyFmeaInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput = {
    create?: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput> | RiskAnalyticsCreateWithoutFmeaInput[] | RiskAnalyticsUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutFmeaInput | RiskAnalyticsCreateOrConnectWithoutFmeaInput[]
    createMany?: RiskAnalyticsCreateManyFmeaInputEnvelope
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
  }

  export type EnumFmeaTypeFieldUpdateOperationsInput = {
    set?: $Enums.FmeaType
  }

  export type EnumFmeaStatusFieldUpdateOperationsInput = {
    set?: $Enums.FmeaStatus
  }

  export type ProjectUpdateOneRequiredWithoutFmeasNestedInput = {
    create?: XOR<ProjectCreateWithoutFmeasInput, ProjectUncheckedCreateWithoutFmeasInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutFmeasInput
    upsert?: ProjectUpsertWithoutFmeasInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutFmeasInput, ProjectUpdateWithoutFmeasInput>, ProjectUncheckedUpdateWithoutFmeasInput>
  }

  export type ProcessFlowUpdateOneWithoutFmeasNestedInput = {
    create?: XOR<ProcessFlowCreateWithoutFmeasInput, ProcessFlowUncheckedCreateWithoutFmeasInput>
    connectOrCreate?: ProcessFlowCreateOrConnectWithoutFmeasInput
    upsert?: ProcessFlowUpsertWithoutFmeasInput
    disconnect?: ProcessFlowWhereInput | boolean
    delete?: ProcessFlowWhereInput | boolean
    connect?: ProcessFlowWhereUniqueInput
    update?: XOR<XOR<ProcessFlowUpdateToOneWithWhereWithoutFmeasInput, ProcessFlowUpdateWithoutFmeasInput>, ProcessFlowUncheckedUpdateWithoutFmeasInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedFmeasNestedInput = {
    create?: XOR<UserCreateWithoutCreatedFmeasInput, UserUncheckedCreateWithoutCreatedFmeasInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFmeasInput
    upsert?: UserUpsertWithoutCreatedFmeasInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedFmeasInput, UserUpdateWithoutCreatedFmeasInput>, UserUncheckedUpdateWithoutCreatedFmeasInput>
  }

  export type FailureModeUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput> | FailureModeCreateWithoutFmeaInput[] | FailureModeUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutFmeaInput | FailureModeCreateOrConnectWithoutFmeaInput[]
    upsert?: FailureModeUpsertWithWhereUniqueWithoutFmeaInput | FailureModeUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: FailureModeCreateManyFmeaInputEnvelope
    set?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    disconnect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    delete?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    update?: FailureModeUpdateWithWhereUniqueWithoutFmeaInput | FailureModeUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: FailureModeUpdateManyWithWhereWithoutFmeaInput | FailureModeUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
  }

  export type ControlPlanUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput> | ControlPlanCreateWithoutFmeaInput[] | ControlPlanUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutFmeaInput | ControlPlanCreateOrConnectWithoutFmeaInput[]
    upsert?: ControlPlanUpsertWithWhereUniqueWithoutFmeaInput | ControlPlanUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: ControlPlanCreateManyFmeaInputEnvelope
    set?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    disconnect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    delete?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    update?: ControlPlanUpdateWithWhereUniqueWithoutFmeaInput | ControlPlanUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: ControlPlanUpdateManyWithWhereWithoutFmeaInput | ControlPlanUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput> | CommentCreateWithoutFmeaInput[] | CommentUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFmeaInput | CommentCreateOrConnectWithoutFmeaInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFmeaInput | CommentUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: CommentCreateManyFmeaInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFmeaInput | CommentUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFmeaInput | CommentUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RiskAnalyticsUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput> | RiskAnalyticsCreateWithoutFmeaInput[] | RiskAnalyticsUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutFmeaInput | RiskAnalyticsCreateOrConnectWithoutFmeaInput[]
    upsert?: RiskAnalyticsUpsertWithWhereUniqueWithoutFmeaInput | RiskAnalyticsUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: RiskAnalyticsCreateManyFmeaInputEnvelope
    set?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    disconnect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    delete?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    update?: RiskAnalyticsUpdateWithWhereUniqueWithoutFmeaInput | RiskAnalyticsUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: RiskAnalyticsUpdateManyWithWhereWithoutFmeaInput | RiskAnalyticsUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
  }

  export type FailureModeUncheckedUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput> | FailureModeCreateWithoutFmeaInput[] | FailureModeUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: FailureModeCreateOrConnectWithoutFmeaInput | FailureModeCreateOrConnectWithoutFmeaInput[]
    upsert?: FailureModeUpsertWithWhereUniqueWithoutFmeaInput | FailureModeUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: FailureModeCreateManyFmeaInputEnvelope
    set?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    disconnect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    delete?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    connect?: FailureModeWhereUniqueInput | FailureModeWhereUniqueInput[]
    update?: FailureModeUpdateWithWhereUniqueWithoutFmeaInput | FailureModeUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: FailureModeUpdateManyWithWhereWithoutFmeaInput | FailureModeUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
  }

  export type ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput> | ControlPlanCreateWithoutFmeaInput[] | ControlPlanUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: ControlPlanCreateOrConnectWithoutFmeaInput | ControlPlanCreateOrConnectWithoutFmeaInput[]
    upsert?: ControlPlanUpsertWithWhereUniqueWithoutFmeaInput | ControlPlanUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: ControlPlanCreateManyFmeaInputEnvelope
    set?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    disconnect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    delete?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    connect?: ControlPlanWhereUniqueInput | ControlPlanWhereUniqueInput[]
    update?: ControlPlanUpdateWithWhereUniqueWithoutFmeaInput | ControlPlanUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: ControlPlanUpdateManyWithWhereWithoutFmeaInput | ControlPlanUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput> | CommentCreateWithoutFmeaInput[] | CommentUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFmeaInput | CommentCreateOrConnectWithoutFmeaInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFmeaInput | CommentUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: CommentCreateManyFmeaInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFmeaInput | CommentUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFmeaInput | CommentUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput = {
    create?: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput> | RiskAnalyticsCreateWithoutFmeaInput[] | RiskAnalyticsUncheckedCreateWithoutFmeaInput[]
    connectOrCreate?: RiskAnalyticsCreateOrConnectWithoutFmeaInput | RiskAnalyticsCreateOrConnectWithoutFmeaInput[]
    upsert?: RiskAnalyticsUpsertWithWhereUniqueWithoutFmeaInput | RiskAnalyticsUpsertWithWhereUniqueWithoutFmeaInput[]
    createMany?: RiskAnalyticsCreateManyFmeaInputEnvelope
    set?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    disconnect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    delete?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    connect?: RiskAnalyticsWhereUniqueInput | RiskAnalyticsWhereUniqueInput[]
    update?: RiskAnalyticsUpdateWithWhereUniqueWithoutFmeaInput | RiskAnalyticsUpdateWithWhereUniqueWithoutFmeaInput[]
    updateMany?: RiskAnalyticsUpdateManyWithWhereWithoutFmeaInput | RiskAnalyticsUpdateManyWithWhereWithoutFmeaInput[]
    deleteMany?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
  }

  export type FmeaCreateNestedOneWithoutFailureModesInput = {
    create?: XOR<FmeaCreateWithoutFailureModesInput, FmeaUncheckedCreateWithoutFailureModesInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutFailureModesInput
    connect?: FmeaWhereUniqueInput
  }

  export type ProcessCreateNestedOneWithoutFailureModesInput = {
    create?: XOR<ProcessCreateWithoutFailureModesInput, ProcessUncheckedCreateWithoutFailureModesInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutFailureModesInput
    connect?: ProcessWhereUniqueInput
  }

  export type ActionItemCreateNestedManyWithoutFailureModeInput = {
    create?: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput> | ActionItemCreateWithoutFailureModeInput[] | ActionItemUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutFailureModeInput | ActionItemCreateOrConnectWithoutFailureModeInput[]
    createMany?: ActionItemCreateManyFailureModeInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutFailureModeInput = {
    create?: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput> | CommentCreateWithoutFailureModeInput[] | CommentUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFailureModeInput | CommentCreateOrConnectWithoutFailureModeInput[]
    createMany?: CommentCreateManyFailureModeInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ActionItemUncheckedCreateNestedManyWithoutFailureModeInput = {
    create?: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput> | ActionItemCreateWithoutFailureModeInput[] | ActionItemUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutFailureModeInput | ActionItemCreateOrConnectWithoutFailureModeInput[]
    createMany?: ActionItemCreateManyFailureModeInputEnvelope
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutFailureModeInput = {
    create?: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput> | CommentCreateWithoutFailureModeInput[] | CommentUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFailureModeInput | CommentCreateOrConnectWithoutFailureModeInput[]
    createMany?: CommentCreateManyFailureModeInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FmeaUpdateOneRequiredWithoutFailureModesNestedInput = {
    create?: XOR<FmeaCreateWithoutFailureModesInput, FmeaUncheckedCreateWithoutFailureModesInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutFailureModesInput
    upsert?: FmeaUpsertWithoutFailureModesInput
    connect?: FmeaWhereUniqueInput
    update?: XOR<XOR<FmeaUpdateToOneWithWhereWithoutFailureModesInput, FmeaUpdateWithoutFailureModesInput>, FmeaUncheckedUpdateWithoutFailureModesInput>
  }

  export type ProcessUpdateOneWithoutFailureModesNestedInput = {
    create?: XOR<ProcessCreateWithoutFailureModesInput, ProcessUncheckedCreateWithoutFailureModesInput>
    connectOrCreate?: ProcessCreateOrConnectWithoutFailureModesInput
    upsert?: ProcessUpsertWithoutFailureModesInput
    disconnect?: ProcessWhereInput | boolean
    delete?: ProcessWhereInput | boolean
    connect?: ProcessWhereUniqueInput
    update?: XOR<XOR<ProcessUpdateToOneWithWhereWithoutFailureModesInput, ProcessUpdateWithoutFailureModesInput>, ProcessUncheckedUpdateWithoutFailureModesInput>
  }

  export type ActionItemUpdateManyWithoutFailureModeNestedInput = {
    create?: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput> | ActionItemCreateWithoutFailureModeInput[] | ActionItemUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutFailureModeInput | ActionItemCreateOrConnectWithoutFailureModeInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutFailureModeInput | ActionItemUpsertWithWhereUniqueWithoutFailureModeInput[]
    createMany?: ActionItemCreateManyFailureModeInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutFailureModeInput | ActionItemUpdateWithWhereUniqueWithoutFailureModeInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutFailureModeInput | ActionItemUpdateManyWithWhereWithoutFailureModeInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutFailureModeNestedInput = {
    create?: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput> | CommentCreateWithoutFailureModeInput[] | CommentUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFailureModeInput | CommentCreateOrConnectWithoutFailureModeInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFailureModeInput | CommentUpsertWithWhereUniqueWithoutFailureModeInput[]
    createMany?: CommentCreateManyFailureModeInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFailureModeInput | CommentUpdateWithWhereUniqueWithoutFailureModeInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFailureModeInput | CommentUpdateManyWithWhereWithoutFailureModeInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActionItemUncheckedUpdateManyWithoutFailureModeNestedInput = {
    create?: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput> | ActionItemCreateWithoutFailureModeInput[] | ActionItemUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: ActionItemCreateOrConnectWithoutFailureModeInput | ActionItemCreateOrConnectWithoutFailureModeInput[]
    upsert?: ActionItemUpsertWithWhereUniqueWithoutFailureModeInput | ActionItemUpsertWithWhereUniqueWithoutFailureModeInput[]
    createMany?: ActionItemCreateManyFailureModeInputEnvelope
    set?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    disconnect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    delete?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    connect?: ActionItemWhereUniqueInput | ActionItemWhereUniqueInput[]
    update?: ActionItemUpdateWithWhereUniqueWithoutFailureModeInput | ActionItemUpdateWithWhereUniqueWithoutFailureModeInput[]
    updateMany?: ActionItemUpdateManyWithWhereWithoutFailureModeInput | ActionItemUpdateManyWithWhereWithoutFailureModeInput[]
    deleteMany?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutFailureModeNestedInput = {
    create?: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput> | CommentCreateWithoutFailureModeInput[] | CommentUncheckedCreateWithoutFailureModeInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutFailureModeInput | CommentCreateOrConnectWithoutFailureModeInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutFailureModeInput | CommentUpsertWithWhereUniqueWithoutFailureModeInput[]
    createMany?: CommentCreateManyFailureModeInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutFailureModeInput | CommentUpdateWithWhereUniqueWithoutFailureModeInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutFailureModeInput | CommentUpdateManyWithWhereWithoutFailureModeInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutControlPlansInput = {
    create?: XOR<ProjectCreateWithoutControlPlansInput, ProjectUncheckedCreateWithoutControlPlansInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutControlPlansInput
    connect?: ProjectWhereUniqueInput
  }

  export type FmeaCreateNestedOneWithoutControlPlansInput = {
    create?: XOR<FmeaCreateWithoutControlPlansInput, FmeaUncheckedCreateWithoutControlPlansInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutControlPlansInput
    connect?: FmeaWhereUniqueInput
  }

  export type EnumControlMethodTypeFieldUpdateOperationsInput = {
    set?: $Enums.ControlMethodType
  }

  export type ProjectUpdateOneRequiredWithoutControlPlansNestedInput = {
    create?: XOR<ProjectCreateWithoutControlPlansInput, ProjectUncheckedCreateWithoutControlPlansInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutControlPlansInput
    upsert?: ProjectUpsertWithoutControlPlansInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutControlPlansInput, ProjectUpdateWithoutControlPlansInput>, ProjectUncheckedUpdateWithoutControlPlansInput>
  }

  export type FmeaUpdateOneWithoutControlPlansNestedInput = {
    create?: XOR<FmeaCreateWithoutControlPlansInput, FmeaUncheckedCreateWithoutControlPlansInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutControlPlansInput
    upsert?: FmeaUpsertWithoutControlPlansInput
    disconnect?: FmeaWhereInput | boolean
    delete?: FmeaWhereInput | boolean
    connect?: FmeaWhereUniqueInput
    update?: XOR<XOR<FmeaUpdateToOneWithWhereWithoutControlPlansInput, FmeaUpdateWithoutControlPlansInput>, FmeaUncheckedUpdateWithoutControlPlansInput>
  }

  export type ProjectCreateNestedOneWithoutActionItemsInput = {
    create?: XOR<ProjectCreateWithoutActionItemsInput, ProjectUncheckedCreateWithoutActionItemsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActionItemsInput
    connect?: ProjectWhereUniqueInput
  }

  export type FailureModeCreateNestedOneWithoutActionItemsInput = {
    create?: XOR<FailureModeCreateWithoutActionItemsInput, FailureModeUncheckedCreateWithoutActionItemsInput>
    connectOrCreate?: FailureModeCreateOrConnectWithoutActionItemsInput
    connect?: FailureModeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedActionsInput = {
    create?: XOR<UserCreateWithoutAssignedActionsInput, UserUncheckedCreateWithoutAssignedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedActionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedActionsInput = {
    create?: XOR<UserCreateWithoutCreatedActionsInput, UserUncheckedCreateWithoutCreatedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedActionsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutActionItemInput = {
    create?: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput> | CommentCreateWithoutActionItemInput[] | CommentUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActionItemInput | CommentCreateOrConnectWithoutActionItemInput[]
    createMany?: CommentCreateManyActionItemInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutActionItemInput = {
    create?: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput> | NotificationCreateWithoutActionItemInput[] | NotificationUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActionItemInput | NotificationCreateOrConnectWithoutActionItemInput[]
    createMany?: NotificationCreateManyActionItemInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutActionItemInput = {
    create?: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput> | CommentCreateWithoutActionItemInput[] | CommentUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActionItemInput | CommentCreateOrConnectWithoutActionItemInput[]
    createMany?: CommentCreateManyActionItemInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutActionItemInput = {
    create?: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput> | NotificationCreateWithoutActionItemInput[] | NotificationUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActionItemInput | NotificationCreateOrConnectWithoutActionItemInput[]
    createMany?: NotificationCreateManyActionItemInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type EnumActionStatusFieldUpdateOperationsInput = {
    set?: $Enums.ActionStatus
  }

  export type ProjectUpdateOneRequiredWithoutActionItemsNestedInput = {
    create?: XOR<ProjectCreateWithoutActionItemsInput, ProjectUncheckedCreateWithoutActionItemsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutActionItemsInput
    upsert?: ProjectUpsertWithoutActionItemsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutActionItemsInput, ProjectUpdateWithoutActionItemsInput>, ProjectUncheckedUpdateWithoutActionItemsInput>
  }

  export type FailureModeUpdateOneWithoutActionItemsNestedInput = {
    create?: XOR<FailureModeCreateWithoutActionItemsInput, FailureModeUncheckedCreateWithoutActionItemsInput>
    connectOrCreate?: FailureModeCreateOrConnectWithoutActionItemsInput
    upsert?: FailureModeUpsertWithoutActionItemsInput
    disconnect?: FailureModeWhereInput | boolean
    delete?: FailureModeWhereInput | boolean
    connect?: FailureModeWhereUniqueInput
    update?: XOR<XOR<FailureModeUpdateToOneWithWhereWithoutActionItemsInput, FailureModeUpdateWithoutActionItemsInput>, FailureModeUncheckedUpdateWithoutActionItemsInput>
  }

  export type UserUpdateOneWithoutAssignedActionsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedActionsInput, UserUncheckedCreateWithoutAssignedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedActionsInput
    upsert?: UserUpsertWithoutAssignedActionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedActionsInput, UserUpdateWithoutAssignedActionsInput>, UserUncheckedUpdateWithoutAssignedActionsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedActionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedActionsInput, UserUncheckedCreateWithoutCreatedActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedActionsInput
    upsert?: UserUpsertWithoutCreatedActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedActionsInput, UserUpdateWithoutCreatedActionsInput>, UserUncheckedUpdateWithoutCreatedActionsInput>
  }

  export type CommentUpdateManyWithoutActionItemNestedInput = {
    create?: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput> | CommentCreateWithoutActionItemInput[] | CommentUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActionItemInput | CommentCreateOrConnectWithoutActionItemInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActionItemInput | CommentUpsertWithWhereUniqueWithoutActionItemInput[]
    createMany?: CommentCreateManyActionItemInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActionItemInput | CommentUpdateWithWhereUniqueWithoutActionItemInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActionItemInput | CommentUpdateManyWithWhereWithoutActionItemInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutActionItemNestedInput = {
    create?: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput> | NotificationCreateWithoutActionItemInput[] | NotificationUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActionItemInput | NotificationCreateOrConnectWithoutActionItemInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutActionItemInput | NotificationUpsertWithWhereUniqueWithoutActionItemInput[]
    createMany?: NotificationCreateManyActionItemInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutActionItemInput | NotificationUpdateWithWhereUniqueWithoutActionItemInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutActionItemInput | NotificationUpdateManyWithWhereWithoutActionItemInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutActionItemNestedInput = {
    create?: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput> | CommentCreateWithoutActionItemInput[] | CommentUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActionItemInput | CommentCreateOrConnectWithoutActionItemInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActionItemInput | CommentUpsertWithWhereUniqueWithoutActionItemInput[]
    createMany?: CommentCreateManyActionItemInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActionItemInput | CommentUpdateWithWhereUniqueWithoutActionItemInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActionItemInput | CommentUpdateManyWithWhereWithoutActionItemInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutActionItemNestedInput = {
    create?: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput> | NotificationCreateWithoutActionItemInput[] | NotificationUncheckedCreateWithoutActionItemInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutActionItemInput | NotificationCreateOrConnectWithoutActionItemInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutActionItemInput | NotificationUpsertWithWhereUniqueWithoutActionItemInput[]
    createMany?: NotificationCreateManyActionItemInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutActionItemInput | NotificationUpdateWithWhereUniqueWithoutActionItemInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutActionItemInput | NotificationUpdateManyWithWhereWithoutActionItemInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type FmeaCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FmeaCreateWithoutCommentsInput, FmeaUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutCommentsInput
    connect?: FmeaWhereUniqueInput
  }

  export type FailureModeCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FailureModeCreateWithoutCommentsInput, FailureModeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FailureModeCreateOrConnectWithoutCommentsInput
    connect?: FailureModeWhereUniqueInput
  }

  export type ActionItemCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ActionItemCreateWithoutCommentsInput, ActionItemUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActionItemCreateOrConnectWithoutCommentsInput
    connect?: ActionItemWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutRepliesInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    upsert?: ProjectUpsertWithoutCommentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCommentsInput, ProjectUpdateWithoutCommentsInput>, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type FmeaUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<FmeaCreateWithoutCommentsInput, FmeaUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutCommentsInput
    upsert?: FmeaUpsertWithoutCommentsInput
    disconnect?: FmeaWhereInput | boolean
    delete?: FmeaWhereInput | boolean
    connect?: FmeaWhereUniqueInput
    update?: XOR<XOR<FmeaUpdateToOneWithWhereWithoutCommentsInput, FmeaUpdateWithoutCommentsInput>, FmeaUncheckedUpdateWithoutCommentsInput>
  }

  export type FailureModeUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<FailureModeCreateWithoutCommentsInput, FailureModeUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FailureModeCreateOrConnectWithoutCommentsInput
    upsert?: FailureModeUpsertWithoutCommentsInput
    disconnect?: FailureModeWhereInput | boolean
    delete?: FailureModeWhereInput | boolean
    connect?: FailureModeWhereUniqueInput
    update?: XOR<XOR<FailureModeUpdateToOneWithWhereWithoutCommentsInput, FailureModeUpdateWithoutCommentsInput>, FailureModeUncheckedUpdateWithoutCommentsInput>
  }

  export type ActionItemUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ActionItemCreateWithoutCommentsInput, ActionItemUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActionItemCreateOrConnectWithoutCommentsInput
    upsert?: ActionItemUpsertWithoutCommentsInput
    disconnect?: ActionItemWhereInput | boolean
    delete?: ActionItemWhereInput | boolean
    connect?: ActionItemWhereUniqueInput
    update?: XOR<XOR<ActionItemUpdateToOneWithWhereWithoutCommentsInput, ActionItemUpdateWithoutCommentsInput>, ActionItemUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutRepliesInput
    upsert?: CommentUpsertWithoutRepliesInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutRepliesInput, CommentUpdateWithoutRepliesInput>, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ProjectCreateWithoutNotificationsInput, ProjectUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutNotificationsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ActionItemCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ActionItemCreateWithoutNotificationsInput, ActionItemUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ActionItemCreateOrConnectWithoutNotificationsInput
    connect?: ActionItemWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type ProjectUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ProjectCreateWithoutNotificationsInput, ProjectUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutNotificationsInput
    upsert?: ProjectUpsertWithoutNotificationsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutNotificationsInput, ProjectUpdateWithoutNotificationsInput>, ProjectUncheckedUpdateWithoutNotificationsInput>
  }

  export type ActionItemUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ActionItemCreateWithoutNotificationsInput, ActionItemUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ActionItemCreateOrConnectWithoutNotificationsInput
    upsert?: ActionItemUpsertWithoutNotificationsInput
    disconnect?: ActionItemWhereInput | boolean
    delete?: ActionItemWhereInput | boolean
    connect?: ActionItemWhereUniqueInput
    update?: XOR<XOR<ActionItemUpdateToOneWithWhereWithoutNotificationsInput, ActionItemUpdateWithoutNotificationsInput>, ActionItemUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutChangeEventsInput = {
    create?: XOR<UserCreateWithoutChangeEventsInput, UserUncheckedCreateWithoutChangeEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangeEventsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutChangeEventsInput = {
    create?: XOR<ProjectCreateWithoutChangeEventsInput, ProjectUncheckedCreateWithoutChangeEventsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutChangeEventsInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumChangeTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChangeType
  }

  export type UserUpdateOneRequiredWithoutChangeEventsNestedInput = {
    create?: XOR<UserCreateWithoutChangeEventsInput, UserUncheckedCreateWithoutChangeEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChangeEventsInput
    upsert?: UserUpsertWithoutChangeEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChangeEventsInput, UserUpdateWithoutChangeEventsInput>, UserUncheckedUpdateWithoutChangeEventsInput>
  }

  export type ProjectUpdateOneRequiredWithoutChangeEventsNestedInput = {
    create?: XOR<ProjectCreateWithoutChangeEventsInput, ProjectUncheckedCreateWithoutChangeEventsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutChangeEventsInput
    upsert?: ProjectUpsertWithoutChangeEventsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutChangeEventsInput, ProjectUpdateWithoutChangeEventsInput>, ProjectUncheckedUpdateWithoutChangeEventsInput>
  }

  export type ProjectCreateNestedOneWithoutComplianceReportsInput = {
    create?: XOR<ProjectCreateWithoutComplianceReportsInput, ProjectUncheckedCreateWithoutComplianceReportsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutComplianceReportsInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutComplianceReportsInput = {
    create?: XOR<UserCreateWithoutComplianceReportsInput, UserUncheckedCreateWithoutComplianceReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplianceReportsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumComplianceStandardFieldUpdateOperationsInput = {
    set?: $Enums.ComplianceStandard
  }

  export type EnumComplianceStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplianceStatus
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutComplianceReportsNestedInput = {
    create?: XOR<ProjectCreateWithoutComplianceReportsInput, ProjectUncheckedCreateWithoutComplianceReportsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutComplianceReportsInput
    upsert?: ProjectUpsertWithoutComplianceReportsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutComplianceReportsInput, ProjectUpdateWithoutComplianceReportsInput>, ProjectUncheckedUpdateWithoutComplianceReportsInput>
  }

  export type UserUpdateOneWithoutComplianceReportsNestedInput = {
    create?: XOR<UserCreateWithoutComplianceReportsInput, UserUncheckedCreateWithoutComplianceReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplianceReportsInput
    upsert?: UserUpsertWithoutComplianceReportsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComplianceReportsInput, UserUpdateWithoutComplianceReportsInput>, UserUncheckedUpdateWithoutComplianceReportsInput>
  }

  export type ProjectCreateNestedOneWithoutRiskAnalyticsInput = {
    create?: XOR<ProjectCreateWithoutRiskAnalyticsInput, ProjectUncheckedCreateWithoutRiskAnalyticsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutRiskAnalyticsInput
    connect?: ProjectWhereUniqueInput
  }

  export type FmeaCreateNestedOneWithoutRiskAnalyticsInput = {
    create?: XOR<FmeaCreateWithoutRiskAnalyticsInput, FmeaUncheckedCreateWithoutRiskAnalyticsInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutRiskAnalyticsInput
    connect?: FmeaWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProjectUpdateOneRequiredWithoutRiskAnalyticsNestedInput = {
    create?: XOR<ProjectCreateWithoutRiskAnalyticsInput, ProjectUncheckedCreateWithoutRiskAnalyticsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutRiskAnalyticsInput
    upsert?: ProjectUpsertWithoutRiskAnalyticsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutRiskAnalyticsInput, ProjectUpdateWithoutRiskAnalyticsInput>, ProjectUncheckedUpdateWithoutRiskAnalyticsInput>
  }

  export type FmeaUpdateOneWithoutRiskAnalyticsNestedInput = {
    create?: XOR<FmeaCreateWithoutRiskAnalyticsInput, FmeaUncheckedCreateWithoutRiskAnalyticsInput>
    connectOrCreate?: FmeaCreateOrConnectWithoutRiskAnalyticsInput
    upsert?: FmeaUpsertWithoutRiskAnalyticsInput
    disconnect?: FmeaWhereInput | boolean
    delete?: FmeaWhereInput | boolean
    connect?: FmeaWhereUniqueInput
    update?: XOR<XOR<FmeaUpdateToOneWithWhereWithoutRiskAnalyticsInput, FmeaUpdateWithoutRiskAnalyticsInput>, FmeaUncheckedUpdateWithoutRiskAnalyticsInput>
  }

  export type UserCreateNestedOneWithoutAuditTrailInput = {
    create?: XOR<UserCreateWithoutAuditTrailInput, UserUncheckedCreateWithoutAuditTrailInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditTrailInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAuditTrailNestedInput = {
    create?: XOR<UserCreateWithoutAuditTrailInput, UserUncheckedCreateWithoutAuditTrailInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditTrailInput
    upsert?: UserUpsertWithoutAuditTrailInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditTrailInput, UserUpdateWithoutAuditTrailInput>, UserUncheckedUpdateWithoutAuditTrailInput>
  }

  export type UserCreateNestedOneWithoutAssignedProjectsInput = {
    create?: XOR<UserCreateWithoutAssignedProjectsInput, UserUncheckedCreateWithoutAssignedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutMembersInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumProjectRoleFieldUpdateOperationsInput = {
    set?: $Enums.ProjectRole
  }

  export type UserUpdateOneRequiredWithoutAssignedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedProjectsInput, UserUncheckedCreateWithoutAssignedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedProjectsInput
    upsert?: UserUpsertWithoutAssignedProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedProjectsInput, UserUpdateWithoutAssignedProjectsInput>, UserUncheckedUpdateWithoutAssignedProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutMembersInput
    upsert?: ProjectUpsertWithoutMembersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutMembersInput, ProjectUpdateWithoutMembersInput>, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumIndustryFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryFilter<$PrismaModel> | $Enums.Industry
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumIndustryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Industry | EnumIndustryFieldRefInput<$PrismaModel>
    in?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    notIn?: $Enums.Industry[] | ListEnumIndustryFieldRefInput<$PrismaModel>
    not?: NestedEnumIndustryWithAggregatesFilter<$PrismaModel> | $Enums.Industry
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIndustryFilter<$PrismaModel>
    _max?: NestedEnumIndustryFilter<$PrismaModel>
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumFmeaTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaType | EnumFmeaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaTypeFilter<$PrismaModel> | $Enums.FmeaType
  }

  export type NestedEnumFmeaStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaStatus | EnumFmeaStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaStatusFilter<$PrismaModel> | $Enums.FmeaStatus
  }

  export type NestedEnumFmeaTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaType | EnumFmeaTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaType[] | ListEnumFmeaTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaTypeWithAggregatesFilter<$PrismaModel> | $Enums.FmeaType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFmeaTypeFilter<$PrismaModel>
    _max?: NestedEnumFmeaTypeFilter<$PrismaModel>
  }

  export type NestedEnumFmeaStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FmeaStatus | EnumFmeaStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FmeaStatus[] | ListEnumFmeaStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFmeaStatusWithAggregatesFilter<$PrismaModel> | $Enums.FmeaStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFmeaStatusFilter<$PrismaModel>
    _max?: NestedEnumFmeaStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumControlMethodTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ControlMethodType | EnumControlMethodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumControlMethodTypeFilter<$PrismaModel> | $Enums.ControlMethodType
  }

  export type NestedEnumControlMethodTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ControlMethodType | EnumControlMethodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ControlMethodType[] | ListEnumControlMethodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumControlMethodTypeWithAggregatesFilter<$PrismaModel> | $Enums.ControlMethodType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumControlMethodTypeFilter<$PrismaModel>
    _max?: NestedEnumControlMethodTypeFilter<$PrismaModel>
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedEnumActionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionStatus | EnumActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActionStatusFilter<$PrismaModel> | $Enums.ActionStatus
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedEnumActionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionStatus | EnumActionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionStatus[] | ListEnumActionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumActionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ActionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionStatusFilter<$PrismaModel>
    _max?: NestedEnumActionStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeFilter<$PrismaModel> | $Enums.ChangeType
  }

  export type NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumChangeTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumComplianceStandardFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStandard | EnumComplianceStandardFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStandardFilter<$PrismaModel> | $Enums.ComplianceStandard
  }

  export type NestedEnumComplianceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusFilter<$PrismaModel> | $Enums.ComplianceStatus
  }

  export type NestedEnumComplianceStandardWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStandard | EnumComplianceStandardFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStandard[] | ListEnumComplianceStandardFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStandardWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStandard
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStandardFilter<$PrismaModel>
    _max?: NestedEnumComplianceStandardFilter<$PrismaModel>
  }

  export type NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplianceStatus | EnumComplianceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplianceStatus[] | ListEnumComplianceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplianceStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplianceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplianceStatusFilter<$PrismaModel>
    _max?: NestedEnumComplianceStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumProjectRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleFilter<$PrismaModel> | $Enums.ProjectRole
  }

  export type NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectRole | EnumProjectRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectRole[] | ListEnumProjectRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectRoleWithAggregatesFilter<$PrismaModel> | $Enums.ProjectRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectRoleFilter<$PrismaModel>
    _max?: NestedEnumProjectRoleFilter<$PrismaModel>
  }

  export type ProjectCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput>
  }

  export type ProjectCreateManyCreatedByInputEnvelope = {
    data: ProjectCreateManyCreatedByInput | ProjectCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    project: ProjectCreateNestedOneWithoutMembersInput
  }

  export type ProjectMemberUncheckedCreateWithoutUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    projectId: string
  }

  export type ProjectMemberCreateOrConnectWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberCreateManyUserInputEnvelope = {
    data: ProjectMemberCreateManyUserInput | ProjectMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FmeaCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutCreatedByInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput>
  }

  export type FmeaCreateManyCreatedByInputEnvelope = {
    data: FmeaCreateManyCreatedByInput | FmeaCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ActionItemCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutAssigneeInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput>
  }

  export type ActionItemCreateManyAssigneeInputEnvelope = {
    data: ActionItemCreateManyAssigneeInput | ActionItemCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type ActionItemCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutCreatedByInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ActionItemCreateManyCreatedByInputEnvelope = {
    data: ActionItemCreateManyCreatedByInput | ActionItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutNotificationsInput
    actionItem?: ActionItemCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    projectId?: string | null
    actionItemId?: string | null
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChangeEventCreateWithoutCreatedByInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutChangeEventsInput
  }

  export type ChangeEventUncheckedCreateWithoutCreatedByInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    projectId: string
  }

  export type ChangeEventCreateOrConnectWithoutCreatedByInput = {
    where: ChangeEventWhereUniqueInput
    create: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput>
  }

  export type ChangeEventCreateManyCreatedByInputEnvelope = {
    data: ChangeEventCreateManyCreatedByInput | ChangeEventCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ComplianceReportCreateWithoutAssessedByInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutComplianceReportsInput
  }

  export type ComplianceReportUncheckedCreateWithoutAssessedByInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ComplianceReportCreateOrConnectWithoutAssessedByInput = {
    where: ComplianceReportWhereUniqueInput
    create: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput>
  }

  export type ComplianceReportCreateManyAssessedByInputEnvelope = {
    data: ComplianceReportCreateManyAssessedByInput | ComplianceReportCreateManyAssessedByInput[]
    skipDuplicates?: boolean
  }

  export type AuditTrailCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditTrailUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditTrailCreateOrConnectWithoutUserInput = {
    where: AuditTrailWhereUniqueInput
    create: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput>
  }

  export type AuditTrailCreateManyUserInputEnvelope = {
    data: AuditTrailCreateManyUserInput | AuditTrailCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutCreatedByInput, ProjectUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProjectCreateWithoutCreatedByInput, ProjectUncheckedCreateWithoutCreatedByInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutCreatedByInput, ProjectUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProjectUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    description?: StringNullableFilter<"Project"> | string | null
    department?: StringNullableFilter<"Project"> | string | null
    industry?: EnumIndustryFilter<"Project"> | $Enums.Industry
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    version?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    archivedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    createdById?: StringFilter<"Project"> | string
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectMemberCreateWithoutUserInput, ProjectMemberUncheckedCreateWithoutUserInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutUserInput, ProjectMemberUncheckedUpdateWithoutUserInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutUserInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectMemberScalarWhereInput = {
    AND?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    OR?: ProjectMemberScalarWhereInput[]
    NOT?: ProjectMemberScalarWhereInput | ProjectMemberScalarWhereInput[]
    id?: StringFilter<"ProjectMember"> | string
    role?: EnumProjectRoleFilter<"ProjectMember"> | $Enums.ProjectRole
    joinedAt?: DateTimeFilter<"ProjectMember"> | Date | string
    userId?: StringFilter<"ProjectMember"> | string
    projectId?: StringFilter<"ProjectMember"> | string
  }

  export type FmeaUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: FmeaWhereUniqueInput
    update: XOR<FmeaUpdateWithoutCreatedByInput, FmeaUncheckedUpdateWithoutCreatedByInput>
    create: XOR<FmeaCreateWithoutCreatedByInput, FmeaUncheckedCreateWithoutCreatedByInput>
  }

  export type FmeaUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: FmeaWhereUniqueInput
    data: XOR<FmeaUpdateWithoutCreatedByInput, FmeaUncheckedUpdateWithoutCreatedByInput>
  }

  export type FmeaUpdateManyWithWhereWithoutCreatedByInput = {
    where: FmeaScalarWhereInput
    data: XOR<FmeaUpdateManyMutationInput, FmeaUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type FmeaScalarWhereInput = {
    AND?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
    OR?: FmeaScalarWhereInput[]
    NOT?: FmeaScalarWhereInput | FmeaScalarWhereInput[]
    id?: StringFilter<"Fmea"> | string
    name?: StringFilter<"Fmea"> | string
    description?: StringNullableFilter<"Fmea"> | string | null
    fmeaType?: EnumFmeaTypeFilter<"Fmea"> | $Enums.FmeaType
    status?: EnumFmeaStatusFilter<"Fmea"> | $Enums.FmeaStatus
    version?: StringFilter<"Fmea"> | string
    approvalDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    nextReviewDate?: DateTimeNullableFilter<"Fmea"> | Date | string | null
    createdAt?: DateTimeFilter<"Fmea"> | Date | string
    updatedAt?: DateTimeFilter<"Fmea"> | Date | string
    projectId?: StringFilter<"Fmea"> | string
    processFlowId?: StringNullableFilter<"Fmea"> | string | null
    createdById?: StringFilter<"Fmea"> | string
  }

  export type ActionItemUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: ActionItemWhereUniqueInput
    update: XOR<ActionItemUpdateWithoutAssigneeInput, ActionItemUncheckedUpdateWithoutAssigneeInput>
    create: XOR<ActionItemCreateWithoutAssigneeInput, ActionItemUncheckedCreateWithoutAssigneeInput>
  }

  export type ActionItemUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: ActionItemWhereUniqueInput
    data: XOR<ActionItemUpdateWithoutAssigneeInput, ActionItemUncheckedUpdateWithoutAssigneeInput>
  }

  export type ActionItemUpdateManyWithWhereWithoutAssigneeInput = {
    where: ActionItemScalarWhereInput
    data: XOR<ActionItemUpdateManyMutationInput, ActionItemUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type ActionItemScalarWhereInput = {
    AND?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
    OR?: ActionItemScalarWhereInput[]
    NOT?: ActionItemScalarWhereInput | ActionItemScalarWhereInput[]
    id?: StringFilter<"ActionItem"> | string
    title?: StringFilter<"ActionItem"> | string
    description?: StringNullableFilter<"ActionItem"> | string | null
    priority?: EnumPriorityFilter<"ActionItem"> | $Enums.Priority
    status?: EnumActionStatusFilter<"ActionItem"> | $Enums.ActionStatus
    dueDate?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ActionItem"> | Date | string | null
    createdAt?: DateTimeFilter<"ActionItem"> | Date | string
    updatedAt?: DateTimeFilter<"ActionItem"> | Date | string
    projectId?: StringFilter<"ActionItem"> | string
    failureModeId?: StringNullableFilter<"ActionItem"> | string | null
    assigneeId?: StringNullableFilter<"ActionItem"> | string | null
    createdById?: StringFilter<"ActionItem"> | string
  }

  export type ActionItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ActionItemWhereUniqueInput
    update: XOR<ActionItemUpdateWithoutCreatedByInput, ActionItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ActionItemCreateWithoutCreatedByInput, ActionItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ActionItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ActionItemWhereUniqueInput
    data: XOR<ActionItemUpdateWithoutCreatedByInput, ActionItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type ActionItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: ActionItemScalarWhereInput
    data: XOR<ActionItemUpdateManyMutationInput, ActionItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    fmeaId?: StringNullableFilter<"Comment"> | string | null
    failureModeId?: StringNullableFilter<"Comment"> | string | null
    actionItemId?: StringNullableFilter<"Comment"> | string | null
    parentId?: StringNullableFilter<"Comment"> | string | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    read?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    userId?: StringFilter<"Notification"> | string
    projectId?: StringNullableFilter<"Notification"> | string | null
    actionItemId?: StringNullableFilter<"Notification"> | string | null
  }

  export type ChangeEventUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ChangeEventWhereUniqueInput
    update: XOR<ChangeEventUpdateWithoutCreatedByInput, ChangeEventUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ChangeEventCreateWithoutCreatedByInput, ChangeEventUncheckedCreateWithoutCreatedByInput>
  }

  export type ChangeEventUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ChangeEventWhereUniqueInput
    data: XOR<ChangeEventUpdateWithoutCreatedByInput, ChangeEventUncheckedUpdateWithoutCreatedByInput>
  }

  export type ChangeEventUpdateManyWithWhereWithoutCreatedByInput = {
    where: ChangeEventScalarWhereInput
    data: XOR<ChangeEventUpdateManyMutationInput, ChangeEventUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ChangeEventScalarWhereInput = {
    AND?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
    OR?: ChangeEventScalarWhereInput[]
    NOT?: ChangeEventScalarWhereInput | ChangeEventScalarWhereInput[]
    id?: StringFilter<"ChangeEvent"> | string
    entityType?: StringFilter<"ChangeEvent"> | string
    entityId?: StringFilter<"ChangeEvent"> | string
    changeType?: EnumChangeTypeFilter<"ChangeEvent"> | $Enums.ChangeType
    oldValues?: JsonNullableFilter<"ChangeEvent">
    newValues?: JsonNullableFilter<"ChangeEvent">
    description?: StringNullableFilter<"ChangeEvent"> | string | null
    reason?: StringNullableFilter<"ChangeEvent"> | string | null
    createdAt?: DateTimeFilter<"ChangeEvent"> | Date | string
    createdById?: StringFilter<"ChangeEvent"> | string
    projectId?: StringFilter<"ChangeEvent"> | string
  }

  export type ComplianceReportUpsertWithWhereUniqueWithoutAssessedByInput = {
    where: ComplianceReportWhereUniqueInput
    update: XOR<ComplianceReportUpdateWithoutAssessedByInput, ComplianceReportUncheckedUpdateWithoutAssessedByInput>
    create: XOR<ComplianceReportCreateWithoutAssessedByInput, ComplianceReportUncheckedCreateWithoutAssessedByInput>
  }

  export type ComplianceReportUpdateWithWhereUniqueWithoutAssessedByInput = {
    where: ComplianceReportWhereUniqueInput
    data: XOR<ComplianceReportUpdateWithoutAssessedByInput, ComplianceReportUncheckedUpdateWithoutAssessedByInput>
  }

  export type ComplianceReportUpdateManyWithWhereWithoutAssessedByInput = {
    where: ComplianceReportScalarWhereInput
    data: XOR<ComplianceReportUpdateManyMutationInput, ComplianceReportUncheckedUpdateManyWithoutAssessedByInput>
  }

  export type ComplianceReportScalarWhereInput = {
    AND?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
    OR?: ComplianceReportScalarWhereInput[]
    NOT?: ComplianceReportScalarWhereInput | ComplianceReportScalarWhereInput[]
    id?: StringFilter<"ComplianceReport"> | string
    standard?: EnumComplianceStandardFilter<"ComplianceReport"> | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFilter<"ComplianceReport"> | $Enums.ComplianceStatus
    score?: FloatNullableFilter<"ComplianceReport"> | number | null
    findings?: JsonNullableFilter<"ComplianceReport">
    recommendations?: JsonNullableFilter<"ComplianceReport">
    assessedAt?: DateTimeNullableFilter<"ComplianceReport"> | Date | string | null
    createdAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    updatedAt?: DateTimeFilter<"ComplianceReport"> | Date | string
    projectId?: StringFilter<"ComplianceReport"> | string
    assessedById?: StringNullableFilter<"ComplianceReport"> | string | null
  }

  export type AuditTrailUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditTrailWhereUniqueInput
    update: XOR<AuditTrailUpdateWithoutUserInput, AuditTrailUncheckedUpdateWithoutUserInput>
    create: XOR<AuditTrailCreateWithoutUserInput, AuditTrailUncheckedCreateWithoutUserInput>
  }

  export type AuditTrailUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditTrailWhereUniqueInput
    data: XOR<AuditTrailUpdateWithoutUserInput, AuditTrailUncheckedUpdateWithoutUserInput>
  }

  export type AuditTrailUpdateManyWithWhereWithoutUserInput = {
    where: AuditTrailScalarWhereInput
    data: XOR<AuditTrailUpdateManyMutationInput, AuditTrailUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditTrailScalarWhereInput = {
    AND?: AuditTrailScalarWhereInput | AuditTrailScalarWhereInput[]
    OR?: AuditTrailScalarWhereInput[]
    NOT?: AuditTrailScalarWhereInput | AuditTrailScalarWhereInput[]
    id?: StringFilter<"AuditTrail"> | string
    action?: StringFilter<"AuditTrail"> | string
    entityType?: StringFilter<"AuditTrail"> | string
    entityId?: StringFilter<"AuditTrail"> | string
    oldValues?: JsonNullableFilter<"AuditTrail">
    newValues?: JsonNullableFilter<"AuditTrail">
    ipAddress?: StringNullableFilter<"AuditTrail"> | string | null
    userAgent?: StringNullableFilter<"AuditTrail"> | string | null
    createdAt?: DateTimeFilter<"AuditTrail"> | Date | string
    userId?: StringFilter<"AuditTrail"> | string
  }

  export type UserCreateWithoutCreatedProjectsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProjectsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
  }

  export type ProjectMemberCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutAssignedProjectsInput
  }

  export type ProjectMemberUncheckedCreateWithoutProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    userId: string
  }

  export type ProjectMemberCreateOrConnectWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberCreateManyProjectInputEnvelope = {
    data: ProjectMemberCreateManyProjectInput | ProjectMemberCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProcessFlowCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessCreateNestedManyWithoutProcessFlowInput
    fmeas?: FmeaCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processes?: ProcessUncheckedCreateNestedManyWithoutProcessFlowInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowCreateOrConnectWithoutProjectInput = {
    where: ProcessFlowWhereUniqueInput
    create: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput>
  }

  export type ProcessFlowCreateManyProjectInputEnvelope = {
    data: ProcessFlowCreateManyProjectInput | ProcessFlowCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type FmeaCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlowId?: string | null
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutProjectInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput>
  }

  export type FmeaCreateManyProjectInputEnvelope = {
    data: FmeaCreateManyProjectInput | FmeaCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ControlPlanCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    fmea?: FmeaCreateNestedOneWithoutControlPlansInput
  }

  export type ControlPlanUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId?: string | null
  }

  export type ControlPlanCreateOrConnectWithoutProjectInput = {
    where: ControlPlanWhereUniqueInput
    create: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput>
  }

  export type ControlPlanCreateManyProjectInputEnvelope = {
    data: ControlPlanCreateManyProjectInput | ControlPlanCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ActionItemCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutProjectInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput>
  }

  export type ActionItemCreateManyProjectInputEnvelope = {
    data: ActionItemCreateManyProjectInput | ActionItemCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentCreateManyProjectInputEnvelope = {
    data: CommentCreateManyProjectInput | CommentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutProjectInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    actionItem?: ActionItemCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    actionItemId?: string | null
  }

  export type NotificationCreateOrConnectWithoutProjectInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput>
  }

  export type NotificationCreateManyProjectInputEnvelope = {
    data: NotificationCreateManyProjectInput | NotificationCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ChangeEventCreateWithoutProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutChangeEventsInput
  }

  export type ChangeEventUncheckedCreateWithoutProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdById: string
  }

  export type ChangeEventCreateOrConnectWithoutProjectInput = {
    where: ChangeEventWhereUniqueInput
    create: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput>
  }

  export type ChangeEventCreateManyProjectInputEnvelope = {
    data: ChangeEventCreateManyProjectInput | ChangeEventCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ComplianceReportCreateWithoutProjectInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assessedBy?: UserCreateNestedOneWithoutComplianceReportsInput
  }

  export type ComplianceReportUncheckedCreateWithoutProjectInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assessedById?: string | null
  }

  export type ComplianceReportCreateOrConnectWithoutProjectInput = {
    where: ComplianceReportWhereUniqueInput
    create: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput>
  }

  export type ComplianceReportCreateManyProjectInputEnvelope = {
    data: ComplianceReportCreateManyProjectInput | ComplianceReportCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type RiskAnalyticsCreateWithoutProjectInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    fmea?: FmeaCreateNestedOneWithoutRiskAnalyticsInput
  }

  export type RiskAnalyticsUncheckedCreateWithoutProjectInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    fmeaId?: string | null
  }

  export type RiskAnalyticsCreateOrConnectWithoutProjectInput = {
    where: RiskAnalyticsWhereUniqueInput
    create: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput>
  }

  export type RiskAnalyticsCreateManyProjectInputEnvelope = {
    data: RiskAnalyticsCreateManyProjectInput | RiskAnalyticsCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedProjectsInput = {
    update: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
    create: XOR<UserCreateWithoutCreatedProjectsInput, UserUncheckedCreateWithoutCreatedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProjectsInput, UserUncheckedUpdateWithoutCreatedProjectsInput>
  }

  export type UserUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectMemberUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    update: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectMemberCreateWithoutProjectInput, ProjectMemberUncheckedCreateWithoutProjectInput>
  }

  export type ProjectMemberUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectMemberWhereUniqueInput
    data: XOR<ProjectMemberUpdateWithoutProjectInput, ProjectMemberUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectMemberUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectMemberScalarWhereInput
    data: XOR<ProjectMemberUpdateManyMutationInput, ProjectMemberUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProcessFlowUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProcessFlowWhereUniqueInput
    update: XOR<ProcessFlowUpdateWithoutProjectInput, ProcessFlowUncheckedUpdateWithoutProjectInput>
    create: XOR<ProcessFlowCreateWithoutProjectInput, ProcessFlowUncheckedCreateWithoutProjectInput>
  }

  export type ProcessFlowUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProcessFlowWhereUniqueInput
    data: XOR<ProcessFlowUpdateWithoutProjectInput, ProcessFlowUncheckedUpdateWithoutProjectInput>
  }

  export type ProcessFlowUpdateManyWithWhereWithoutProjectInput = {
    where: ProcessFlowScalarWhereInput
    data: XOR<ProcessFlowUpdateManyMutationInput, ProcessFlowUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProcessFlowScalarWhereInput = {
    AND?: ProcessFlowScalarWhereInput | ProcessFlowScalarWhereInput[]
    OR?: ProcessFlowScalarWhereInput[]
    NOT?: ProcessFlowScalarWhereInput | ProcessFlowScalarWhereInput[]
    id?: StringFilter<"ProcessFlow"> | string
    name?: StringFilter<"ProcessFlow"> | string
    description?: StringNullableFilter<"ProcessFlow"> | string | null
    sequence?: IntFilter<"ProcessFlow"> | number
    input?: StringNullableFilter<"ProcessFlow"> | string | null
    output?: StringNullableFilter<"ProcessFlow"> | string | null
    resources?: StringNullableFilter<"ProcessFlow"> | string | null
    controls?: StringNullableFilter<"ProcessFlow"> | string | null
    createdAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    updatedAt?: DateTimeFilter<"ProcessFlow"> | Date | string
    projectId?: StringFilter<"ProcessFlow"> | string
  }

  export type FmeaUpsertWithWhereUniqueWithoutProjectInput = {
    where: FmeaWhereUniqueInput
    update: XOR<FmeaUpdateWithoutProjectInput, FmeaUncheckedUpdateWithoutProjectInput>
    create: XOR<FmeaCreateWithoutProjectInput, FmeaUncheckedCreateWithoutProjectInput>
  }

  export type FmeaUpdateWithWhereUniqueWithoutProjectInput = {
    where: FmeaWhereUniqueInput
    data: XOR<FmeaUpdateWithoutProjectInput, FmeaUncheckedUpdateWithoutProjectInput>
  }

  export type FmeaUpdateManyWithWhereWithoutProjectInput = {
    where: FmeaScalarWhereInput
    data: XOR<FmeaUpdateManyMutationInput, FmeaUncheckedUpdateManyWithoutProjectInput>
  }

  export type ControlPlanUpsertWithWhereUniqueWithoutProjectInput = {
    where: ControlPlanWhereUniqueInput
    update: XOR<ControlPlanUpdateWithoutProjectInput, ControlPlanUncheckedUpdateWithoutProjectInput>
    create: XOR<ControlPlanCreateWithoutProjectInput, ControlPlanUncheckedCreateWithoutProjectInput>
  }

  export type ControlPlanUpdateWithWhereUniqueWithoutProjectInput = {
    where: ControlPlanWhereUniqueInput
    data: XOR<ControlPlanUpdateWithoutProjectInput, ControlPlanUncheckedUpdateWithoutProjectInput>
  }

  export type ControlPlanUpdateManyWithWhereWithoutProjectInput = {
    where: ControlPlanScalarWhereInput
    data: XOR<ControlPlanUpdateManyMutationInput, ControlPlanUncheckedUpdateManyWithoutProjectInput>
  }

  export type ControlPlanScalarWhereInput = {
    AND?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
    OR?: ControlPlanScalarWhereInput[]
    NOT?: ControlPlanScalarWhereInput | ControlPlanScalarWhereInput[]
    id?: StringFilter<"ControlPlan"> | string
    name?: StringFilter<"ControlPlan"> | string
    description?: StringNullableFilter<"ControlPlan"> | string | null
    process_step?: StringFilter<"ControlPlan"> | string
    control_method?: StringFilter<"ControlPlan"> | string
    specification?: StringNullableFilter<"ControlPlan"> | string | null
    measurement_technique?: StringNullableFilter<"ControlPlan"> | string | null
    sample_size?: StringNullableFilter<"ControlPlan"> | string | null
    frequency?: StringNullableFilter<"ControlPlan"> | string | null
    control_method_type?: EnumControlMethodTypeFilter<"ControlPlan"> | $Enums.ControlMethodType
    createdAt?: DateTimeFilter<"ControlPlan"> | Date | string
    updatedAt?: DateTimeFilter<"ControlPlan"> | Date | string
    projectId?: StringFilter<"ControlPlan"> | string
    fmeaId?: StringNullableFilter<"ControlPlan"> | string | null
  }

  export type ActionItemUpsertWithWhereUniqueWithoutProjectInput = {
    where: ActionItemWhereUniqueInput
    update: XOR<ActionItemUpdateWithoutProjectInput, ActionItemUncheckedUpdateWithoutProjectInput>
    create: XOR<ActionItemCreateWithoutProjectInput, ActionItemUncheckedCreateWithoutProjectInput>
  }

  export type ActionItemUpdateWithWhereUniqueWithoutProjectInput = {
    where: ActionItemWhereUniqueInput
    data: XOR<ActionItemUpdateWithoutProjectInput, ActionItemUncheckedUpdateWithoutProjectInput>
  }

  export type ActionItemUpdateManyWithWhereWithoutProjectInput = {
    where: ActionItemScalarWhereInput
    data: XOR<ActionItemUpdateManyMutationInput, ActionItemUncheckedUpdateManyWithoutProjectInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutProjectInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutProjectInput, NotificationUncheckedUpdateWithoutProjectInput>
    create: XOR<NotificationCreateWithoutProjectInput, NotificationUncheckedCreateWithoutProjectInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutProjectInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutProjectInput, NotificationUncheckedUpdateWithoutProjectInput>
  }

  export type NotificationUpdateManyWithWhereWithoutProjectInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutProjectInput>
  }

  export type ChangeEventUpsertWithWhereUniqueWithoutProjectInput = {
    where: ChangeEventWhereUniqueInput
    update: XOR<ChangeEventUpdateWithoutProjectInput, ChangeEventUncheckedUpdateWithoutProjectInput>
    create: XOR<ChangeEventCreateWithoutProjectInput, ChangeEventUncheckedCreateWithoutProjectInput>
  }

  export type ChangeEventUpdateWithWhereUniqueWithoutProjectInput = {
    where: ChangeEventWhereUniqueInput
    data: XOR<ChangeEventUpdateWithoutProjectInput, ChangeEventUncheckedUpdateWithoutProjectInput>
  }

  export type ChangeEventUpdateManyWithWhereWithoutProjectInput = {
    where: ChangeEventScalarWhereInput
    data: XOR<ChangeEventUpdateManyMutationInput, ChangeEventUncheckedUpdateManyWithoutProjectInput>
  }

  export type ComplianceReportUpsertWithWhereUniqueWithoutProjectInput = {
    where: ComplianceReportWhereUniqueInput
    update: XOR<ComplianceReportUpdateWithoutProjectInput, ComplianceReportUncheckedUpdateWithoutProjectInput>
    create: XOR<ComplianceReportCreateWithoutProjectInput, ComplianceReportUncheckedCreateWithoutProjectInput>
  }

  export type ComplianceReportUpdateWithWhereUniqueWithoutProjectInput = {
    where: ComplianceReportWhereUniqueInput
    data: XOR<ComplianceReportUpdateWithoutProjectInput, ComplianceReportUncheckedUpdateWithoutProjectInput>
  }

  export type ComplianceReportUpdateManyWithWhereWithoutProjectInput = {
    where: ComplianceReportScalarWhereInput
    data: XOR<ComplianceReportUpdateManyMutationInput, ComplianceReportUncheckedUpdateManyWithoutProjectInput>
  }

  export type RiskAnalyticsUpsertWithWhereUniqueWithoutProjectInput = {
    where: RiskAnalyticsWhereUniqueInput
    update: XOR<RiskAnalyticsUpdateWithoutProjectInput, RiskAnalyticsUncheckedUpdateWithoutProjectInput>
    create: XOR<RiskAnalyticsCreateWithoutProjectInput, RiskAnalyticsUncheckedCreateWithoutProjectInput>
  }

  export type RiskAnalyticsUpdateWithWhereUniqueWithoutProjectInput = {
    where: RiskAnalyticsWhereUniqueInput
    data: XOR<RiskAnalyticsUpdateWithoutProjectInput, RiskAnalyticsUncheckedUpdateWithoutProjectInput>
  }

  export type RiskAnalyticsUpdateManyWithWhereWithoutProjectInput = {
    where: RiskAnalyticsScalarWhereInput
    data: XOR<RiskAnalyticsUpdateManyMutationInput, RiskAnalyticsUncheckedUpdateManyWithoutProjectInput>
  }

  export type RiskAnalyticsScalarWhereInput = {
    AND?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
    OR?: RiskAnalyticsScalarWhereInput[]
    NOT?: RiskAnalyticsScalarWhereInput | RiskAnalyticsScalarWhereInput[]
    id?: StringFilter<"RiskAnalytics"> | string
    period?: DateTimeFilter<"RiskAnalytics"> | Date | string
    totalRpn?: IntFilter<"RiskAnalytics"> | number
    avgSeverity?: FloatFilter<"RiskAnalytics"> | number
    avgOccurrence?: FloatFilter<"RiskAnalytics"> | number
    avgDetection?: FloatFilter<"RiskAnalytics"> | number
    highRiskCount?: IntFilter<"RiskAnalytics"> | number
    trendData?: JsonNullableFilter<"RiskAnalytics">
    createdAt?: DateTimeFilter<"RiskAnalytics"> | Date | string
    projectId?: StringFilter<"RiskAnalytics"> | string
    fmeaId?: StringNullableFilter<"RiskAnalytics"> | string | null
  }

  export type ProjectCreateWithoutProcessFlowsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProcessFlowsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProcessFlowsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProcessFlowsInput, ProjectUncheckedCreateWithoutProcessFlowsInput>
  }

  export type ProcessCreateWithoutProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    failureModes?: FailureModeCreateNestedManyWithoutProcessInput
  }

  export type ProcessUncheckedCreateWithoutProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutProcessInput
  }

  export type ProcessCreateOrConnectWithoutProcessFlowInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput>
  }

  export type ProcessCreateManyProcessFlowInputEnvelope = {
    data: ProcessCreateManyProcessFlowInput | ProcessCreateManyProcessFlowInput[]
    skipDuplicates?: boolean
  }

  export type FmeaCreateWithoutProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutProcessFlowInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput>
  }

  export type FmeaCreateManyProcessFlowInputEnvelope = {
    data: FmeaCreateManyProcessFlowInput | FmeaCreateManyProcessFlowInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutProcessFlowsInput = {
    update: XOR<ProjectUpdateWithoutProcessFlowsInput, ProjectUncheckedUpdateWithoutProcessFlowsInput>
    create: XOR<ProjectCreateWithoutProcessFlowsInput, ProjectUncheckedCreateWithoutProcessFlowsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutProcessFlowsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutProcessFlowsInput, ProjectUncheckedUpdateWithoutProcessFlowsInput>
  }

  export type ProjectUpdateWithoutProcessFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProcessFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProcessUpsertWithWhereUniqueWithoutProcessFlowInput = {
    where: ProcessWhereUniqueInput
    update: XOR<ProcessUpdateWithoutProcessFlowInput, ProcessUncheckedUpdateWithoutProcessFlowInput>
    create: XOR<ProcessCreateWithoutProcessFlowInput, ProcessUncheckedCreateWithoutProcessFlowInput>
  }

  export type ProcessUpdateWithWhereUniqueWithoutProcessFlowInput = {
    where: ProcessWhereUniqueInput
    data: XOR<ProcessUpdateWithoutProcessFlowInput, ProcessUncheckedUpdateWithoutProcessFlowInput>
  }

  export type ProcessUpdateManyWithWhereWithoutProcessFlowInput = {
    where: ProcessScalarWhereInput
    data: XOR<ProcessUpdateManyMutationInput, ProcessUncheckedUpdateManyWithoutProcessFlowInput>
  }

  export type ProcessScalarWhereInput = {
    AND?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    OR?: ProcessScalarWhereInput[]
    NOT?: ProcessScalarWhereInput | ProcessScalarWhereInput[]
    id?: StringFilter<"Process"> | string
    name?: StringFilter<"Process"> | string
    description?: StringNullableFilter<"Process"> | string | null
    sequence?: IntFilter<"Process"> | number
    processType?: StringNullableFilter<"Process"> | string | null
    input?: StringNullableFilter<"Process"> | string | null
    output?: StringNullableFilter<"Process"> | string | null
    resources?: StringNullableFilter<"Process"> | string | null
    controls?: StringNullableFilter<"Process"> | string | null
    createdAt?: DateTimeFilter<"Process"> | Date | string
    updatedAt?: DateTimeFilter<"Process"> | Date | string
    processFlowId?: StringFilter<"Process"> | string
  }

  export type FmeaUpsertWithWhereUniqueWithoutProcessFlowInput = {
    where: FmeaWhereUniqueInput
    update: XOR<FmeaUpdateWithoutProcessFlowInput, FmeaUncheckedUpdateWithoutProcessFlowInput>
    create: XOR<FmeaCreateWithoutProcessFlowInput, FmeaUncheckedCreateWithoutProcessFlowInput>
  }

  export type FmeaUpdateWithWhereUniqueWithoutProcessFlowInput = {
    where: FmeaWhereUniqueInput
    data: XOR<FmeaUpdateWithoutProcessFlowInput, FmeaUncheckedUpdateWithoutProcessFlowInput>
  }

  export type FmeaUpdateManyWithWhereWithoutProcessFlowInput = {
    where: FmeaScalarWhereInput
    data: XOR<FmeaUpdateManyMutationInput, FmeaUncheckedUpdateManyWithoutProcessFlowInput>
  }

  export type ProcessFlowCreateWithoutProcessesInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutProcessFlowsInput
    fmeas?: FmeaCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowUncheckedCreateWithoutProcessesInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowCreateOrConnectWithoutProcessesInput = {
    where: ProcessFlowWhereUniqueInput
    create: XOR<ProcessFlowCreateWithoutProcessesInput, ProcessFlowUncheckedCreateWithoutProcessesInput>
  }

  export type FailureModeCreateWithoutProcessInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmea: FmeaCreateNestedOneWithoutFailureModesInput
    actionItems?: ActionItemCreateNestedManyWithoutFailureModeInput
    comments?: CommentCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUncheckedCreateWithoutProcessInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutFailureModeInput
    comments?: CommentUncheckedCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeCreateOrConnectWithoutProcessInput = {
    where: FailureModeWhereUniqueInput
    create: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput>
  }

  export type FailureModeCreateManyProcessInputEnvelope = {
    data: FailureModeCreateManyProcessInput | FailureModeCreateManyProcessInput[]
    skipDuplicates?: boolean
  }

  export type ProcessFlowUpsertWithoutProcessesInput = {
    update: XOR<ProcessFlowUpdateWithoutProcessesInput, ProcessFlowUncheckedUpdateWithoutProcessesInput>
    create: XOR<ProcessFlowCreateWithoutProcessesInput, ProcessFlowUncheckedCreateWithoutProcessesInput>
    where?: ProcessFlowWhereInput
  }

  export type ProcessFlowUpdateToOneWithWhereWithoutProcessesInput = {
    where?: ProcessFlowWhereInput
    data: XOR<ProcessFlowUpdateWithoutProcessesInput, ProcessFlowUncheckedUpdateWithoutProcessesInput>
  }

  export type ProcessFlowUpdateWithoutProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutProcessFlowsNestedInput
    fmeas?: FmeaUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowUncheckedUpdateWithoutProcessesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    fmeas?: FmeaUncheckedUpdateManyWithoutProcessFlowNestedInput
  }

  export type FailureModeUpsertWithWhereUniqueWithoutProcessInput = {
    where: FailureModeWhereUniqueInput
    update: XOR<FailureModeUpdateWithoutProcessInput, FailureModeUncheckedUpdateWithoutProcessInput>
    create: XOR<FailureModeCreateWithoutProcessInput, FailureModeUncheckedCreateWithoutProcessInput>
  }

  export type FailureModeUpdateWithWhereUniqueWithoutProcessInput = {
    where: FailureModeWhereUniqueInput
    data: XOR<FailureModeUpdateWithoutProcessInput, FailureModeUncheckedUpdateWithoutProcessInput>
  }

  export type FailureModeUpdateManyWithWhereWithoutProcessInput = {
    where: FailureModeScalarWhereInput
    data: XOR<FailureModeUpdateManyMutationInput, FailureModeUncheckedUpdateManyWithoutProcessInput>
  }

  export type FailureModeScalarWhereInput = {
    AND?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
    OR?: FailureModeScalarWhereInput[]
    NOT?: FailureModeScalarWhereInput | FailureModeScalarWhereInput[]
    id?: StringFilter<"FailureMode"> | string
    name?: StringFilter<"FailureMode"> | string
    description?: StringNullableFilter<"FailureMode"> | string | null
    potential_failure?: StringFilter<"FailureMode"> | string
    potential_effects?: StringFilter<"FailureMode"> | string
    severity?: IntFilter<"FailureMode"> | number
    potential_causes?: StringFilter<"FailureMode"> | string
    occurrence?: IntFilter<"FailureMode"> | number
    current_controls?: StringNullableFilter<"FailureMode"> | string | null
    detection?: IntFilter<"FailureMode"> | number
    rpn?: IntFilter<"FailureMode"> | number
    recommended_actions?: StringNullableFilter<"FailureMode"> | string | null
    responsibility?: StringNullableFilter<"FailureMode"> | string | null
    target_date?: DateTimeNullableFilter<"FailureMode"> | Date | string | null
    actions_taken?: StringNullableFilter<"FailureMode"> | string | null
    revised_severity?: IntNullableFilter<"FailureMode"> | number | null
    revised_occurrence?: IntNullableFilter<"FailureMode"> | number | null
    revised_detection?: IntNullableFilter<"FailureMode"> | number | null
    revised_rpn?: IntNullableFilter<"FailureMode"> | number | null
    createdAt?: DateTimeFilter<"FailureMode"> | Date | string
    updatedAt?: DateTimeFilter<"FailureMode"> | Date | string
    fmeaId?: StringFilter<"FailureMode"> | string
    processId?: StringNullableFilter<"FailureMode"> | string | null
  }

  export type ProjectCreateWithoutFmeasInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutFmeasInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutFmeasInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutFmeasInput, ProjectUncheckedCreateWithoutFmeasInput>
  }

  export type ProcessFlowCreateWithoutFmeasInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutProcessFlowsInput
    processes?: ProcessCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowUncheckedCreateWithoutFmeasInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processes?: ProcessUncheckedCreateNestedManyWithoutProcessFlowInput
  }

  export type ProcessFlowCreateOrConnectWithoutFmeasInput = {
    where: ProcessFlowWhereUniqueInput
    create: XOR<ProcessFlowCreateWithoutFmeasInput, ProcessFlowUncheckedCreateWithoutFmeasInput>
  }

  export type UserCreateWithoutCreatedFmeasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedFmeasInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedFmeasInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedFmeasInput, UserUncheckedCreateWithoutCreatedFmeasInput>
  }

  export type FailureModeCreateWithoutFmeaInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    process?: ProcessCreateNestedOneWithoutFailureModesInput
    actionItems?: ActionItemCreateNestedManyWithoutFailureModeInput
    comments?: CommentCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUncheckedCreateWithoutFmeaInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processId?: string | null
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutFailureModeInput
    comments?: CommentUncheckedCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeCreateOrConnectWithoutFmeaInput = {
    where: FailureModeWhereUniqueInput
    create: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput>
  }

  export type FailureModeCreateManyFmeaInputEnvelope = {
    data: FailureModeCreateManyFmeaInput | FailureModeCreateManyFmeaInput[]
    skipDuplicates?: boolean
  }

  export type ControlPlanCreateWithoutFmeaInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutControlPlansInput
  }

  export type ControlPlanUncheckedCreateWithoutFmeaInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ControlPlanCreateOrConnectWithoutFmeaInput = {
    where: ControlPlanWhereUniqueInput
    create: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput>
  }

  export type ControlPlanCreateManyFmeaInputEnvelope = {
    data: ControlPlanCreateManyFmeaInput | ControlPlanCreateManyFmeaInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutFmeaInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutFmeaInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutFmeaInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput>
  }

  export type CommentCreateManyFmeaInputEnvelope = {
    data: CommentCreateManyFmeaInput | CommentCreateManyFmeaInput[]
    skipDuplicates?: boolean
  }

  export type RiskAnalyticsCreateWithoutFmeaInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutRiskAnalyticsInput
  }

  export type RiskAnalyticsUncheckedCreateWithoutFmeaInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    projectId: string
  }

  export type RiskAnalyticsCreateOrConnectWithoutFmeaInput = {
    where: RiskAnalyticsWhereUniqueInput
    create: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput>
  }

  export type RiskAnalyticsCreateManyFmeaInputEnvelope = {
    data: RiskAnalyticsCreateManyFmeaInput | RiskAnalyticsCreateManyFmeaInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutFmeasInput = {
    update: XOR<ProjectUpdateWithoutFmeasInput, ProjectUncheckedUpdateWithoutFmeasInput>
    create: XOR<ProjectCreateWithoutFmeasInput, ProjectUncheckedCreateWithoutFmeasInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutFmeasInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutFmeasInput, ProjectUncheckedUpdateWithoutFmeasInput>
  }

  export type ProjectUpdateWithoutFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProcessFlowUpsertWithoutFmeasInput = {
    update: XOR<ProcessFlowUpdateWithoutFmeasInput, ProcessFlowUncheckedUpdateWithoutFmeasInput>
    create: XOR<ProcessFlowCreateWithoutFmeasInput, ProcessFlowUncheckedCreateWithoutFmeasInput>
    where?: ProcessFlowWhereInput
  }

  export type ProcessFlowUpdateToOneWithWhereWithoutFmeasInput = {
    where?: ProcessFlowWhereInput
    data: XOR<ProcessFlowUpdateWithoutFmeasInput, ProcessFlowUncheckedUpdateWithoutFmeasInput>
  }

  export type ProcessFlowUpdateWithoutFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutProcessFlowsNestedInput
    processes?: ProcessUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowUncheckedUpdateWithoutFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processes?: ProcessUncheckedUpdateManyWithoutProcessFlowNestedInput
  }

  export type UserUpsertWithoutCreatedFmeasInput = {
    update: XOR<UserUpdateWithoutCreatedFmeasInput, UserUncheckedUpdateWithoutCreatedFmeasInput>
    create: XOR<UserCreateWithoutCreatedFmeasInput, UserUncheckedCreateWithoutCreatedFmeasInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedFmeasInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedFmeasInput, UserUncheckedUpdateWithoutCreatedFmeasInput>
  }

  export type UserUpdateWithoutCreatedFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedFmeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FailureModeUpsertWithWhereUniqueWithoutFmeaInput = {
    where: FailureModeWhereUniqueInput
    update: XOR<FailureModeUpdateWithoutFmeaInput, FailureModeUncheckedUpdateWithoutFmeaInput>
    create: XOR<FailureModeCreateWithoutFmeaInput, FailureModeUncheckedCreateWithoutFmeaInput>
  }

  export type FailureModeUpdateWithWhereUniqueWithoutFmeaInput = {
    where: FailureModeWhereUniqueInput
    data: XOR<FailureModeUpdateWithoutFmeaInput, FailureModeUncheckedUpdateWithoutFmeaInput>
  }

  export type FailureModeUpdateManyWithWhereWithoutFmeaInput = {
    where: FailureModeScalarWhereInput
    data: XOR<FailureModeUpdateManyMutationInput, FailureModeUncheckedUpdateManyWithoutFmeaInput>
  }

  export type ControlPlanUpsertWithWhereUniqueWithoutFmeaInput = {
    where: ControlPlanWhereUniqueInput
    update: XOR<ControlPlanUpdateWithoutFmeaInput, ControlPlanUncheckedUpdateWithoutFmeaInput>
    create: XOR<ControlPlanCreateWithoutFmeaInput, ControlPlanUncheckedCreateWithoutFmeaInput>
  }

  export type ControlPlanUpdateWithWhereUniqueWithoutFmeaInput = {
    where: ControlPlanWhereUniqueInput
    data: XOR<ControlPlanUpdateWithoutFmeaInput, ControlPlanUncheckedUpdateWithoutFmeaInput>
  }

  export type ControlPlanUpdateManyWithWhereWithoutFmeaInput = {
    where: ControlPlanScalarWhereInput
    data: XOR<ControlPlanUpdateManyMutationInput, ControlPlanUncheckedUpdateManyWithoutFmeaInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutFmeaInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFmeaInput, CommentUncheckedUpdateWithoutFmeaInput>
    create: XOR<CommentCreateWithoutFmeaInput, CommentUncheckedCreateWithoutFmeaInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFmeaInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFmeaInput, CommentUncheckedUpdateWithoutFmeaInput>
  }

  export type CommentUpdateManyWithWhereWithoutFmeaInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutFmeaInput>
  }

  export type RiskAnalyticsUpsertWithWhereUniqueWithoutFmeaInput = {
    where: RiskAnalyticsWhereUniqueInput
    update: XOR<RiskAnalyticsUpdateWithoutFmeaInput, RiskAnalyticsUncheckedUpdateWithoutFmeaInput>
    create: XOR<RiskAnalyticsCreateWithoutFmeaInput, RiskAnalyticsUncheckedCreateWithoutFmeaInput>
  }

  export type RiskAnalyticsUpdateWithWhereUniqueWithoutFmeaInput = {
    where: RiskAnalyticsWhereUniqueInput
    data: XOR<RiskAnalyticsUpdateWithoutFmeaInput, RiskAnalyticsUncheckedUpdateWithoutFmeaInput>
  }

  export type RiskAnalyticsUpdateManyWithWhereWithoutFmeaInput = {
    where: RiskAnalyticsScalarWhereInput
    data: XOR<RiskAnalyticsUpdateManyMutationInput, RiskAnalyticsUncheckedUpdateManyWithoutFmeaInput>
  }

  export type FmeaCreateWithoutFailureModesInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutFailureModesInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutFailureModesInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutFailureModesInput, FmeaUncheckedCreateWithoutFailureModesInput>
  }

  export type ProcessCreateWithoutFailureModesInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlow: ProcessFlowCreateNestedOneWithoutProcessesInput
  }

  export type ProcessUncheckedCreateWithoutFailureModesInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlowId: string
  }

  export type ProcessCreateOrConnectWithoutFailureModesInput = {
    where: ProcessWhereUniqueInput
    create: XOR<ProcessCreateWithoutFailureModesInput, ProcessUncheckedCreateWithoutFailureModesInput>
  }

  export type ActionItemCreateWithoutFailureModeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutFailureModeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutFailureModeInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput>
  }

  export type ActionItemCreateManyFailureModeInputEnvelope = {
    data: ActionItemCreateManyFailureModeInput | ActionItemCreateManyFailureModeInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutFailureModeInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutFailureModeInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    actionItemId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutFailureModeInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput>
  }

  export type CommentCreateManyFailureModeInputEnvelope = {
    data: CommentCreateManyFailureModeInput | CommentCreateManyFailureModeInput[]
    skipDuplicates?: boolean
  }

  export type FmeaUpsertWithoutFailureModesInput = {
    update: XOR<FmeaUpdateWithoutFailureModesInput, FmeaUncheckedUpdateWithoutFailureModesInput>
    create: XOR<FmeaCreateWithoutFailureModesInput, FmeaUncheckedCreateWithoutFailureModesInput>
    where?: FmeaWhereInput
  }

  export type FmeaUpdateToOneWithWhereWithoutFailureModesInput = {
    where?: FmeaWhereInput
    data: XOR<FmeaUpdateWithoutFailureModesInput, FmeaUncheckedUpdateWithoutFailureModesInput>
  }

  export type FmeaUpdateWithoutFailureModesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutFailureModesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type ProcessUpsertWithoutFailureModesInput = {
    update: XOR<ProcessUpdateWithoutFailureModesInput, ProcessUncheckedUpdateWithoutFailureModesInput>
    create: XOR<ProcessCreateWithoutFailureModesInput, ProcessUncheckedCreateWithoutFailureModesInput>
    where?: ProcessWhereInput
  }

  export type ProcessUpdateToOneWithWhereWithoutFailureModesInput = {
    where?: ProcessWhereInput
    data: XOR<ProcessUpdateWithoutFailureModesInput, ProcessUncheckedUpdateWithoutFailureModesInput>
  }

  export type ProcessUpdateWithoutFailureModesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlow?: ProcessFlowUpdateOneRequiredWithoutProcessesNestedInput
  }

  export type ProcessUncheckedUpdateWithoutFailureModesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlowId?: StringFieldUpdateOperationsInput | string
  }

  export type ActionItemUpsertWithWhereUniqueWithoutFailureModeInput = {
    where: ActionItemWhereUniqueInput
    update: XOR<ActionItemUpdateWithoutFailureModeInput, ActionItemUncheckedUpdateWithoutFailureModeInput>
    create: XOR<ActionItemCreateWithoutFailureModeInput, ActionItemUncheckedCreateWithoutFailureModeInput>
  }

  export type ActionItemUpdateWithWhereUniqueWithoutFailureModeInput = {
    where: ActionItemWhereUniqueInput
    data: XOR<ActionItemUpdateWithoutFailureModeInput, ActionItemUncheckedUpdateWithoutFailureModeInput>
  }

  export type ActionItemUpdateManyWithWhereWithoutFailureModeInput = {
    where: ActionItemScalarWhereInput
    data: XOR<ActionItemUpdateManyMutationInput, ActionItemUncheckedUpdateManyWithoutFailureModeInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutFailureModeInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFailureModeInput, CommentUncheckedUpdateWithoutFailureModeInput>
    create: XOR<CommentCreateWithoutFailureModeInput, CommentUncheckedCreateWithoutFailureModeInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFailureModeInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFailureModeInput, CommentUncheckedUpdateWithoutFailureModeInput>
  }

  export type CommentUpdateManyWithWhereWithoutFailureModeInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutFailureModeInput>
  }

  export type ProjectCreateWithoutControlPlansInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutControlPlansInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutControlPlansInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutControlPlansInput, ProjectUncheckedCreateWithoutControlPlansInput>
  }

  export type FmeaCreateWithoutControlPlansInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutControlPlansInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutControlPlansInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutControlPlansInput, FmeaUncheckedCreateWithoutControlPlansInput>
  }

  export type ProjectUpsertWithoutControlPlansInput = {
    update: XOR<ProjectUpdateWithoutControlPlansInput, ProjectUncheckedUpdateWithoutControlPlansInput>
    create: XOR<ProjectCreateWithoutControlPlansInput, ProjectUncheckedCreateWithoutControlPlansInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutControlPlansInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutControlPlansInput, ProjectUncheckedUpdateWithoutControlPlansInput>
  }

  export type ProjectUpdateWithoutControlPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutControlPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FmeaUpsertWithoutControlPlansInput = {
    update: XOR<FmeaUpdateWithoutControlPlansInput, FmeaUncheckedUpdateWithoutControlPlansInput>
    create: XOR<FmeaCreateWithoutControlPlansInput, FmeaUncheckedCreateWithoutControlPlansInput>
    where?: FmeaWhereInput
  }

  export type FmeaUpdateToOneWithWhereWithoutControlPlansInput = {
    where?: FmeaWhereInput
    data: XOR<FmeaUpdateWithoutControlPlansInput, FmeaUncheckedUpdateWithoutControlPlansInput>
  }

  export type FmeaUpdateWithoutControlPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutControlPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type ProjectCreateWithoutActionItemsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutActionItemsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutActionItemsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutActionItemsInput, ProjectUncheckedCreateWithoutActionItemsInput>
  }

  export type FailureModeCreateWithoutActionItemsInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmea: FmeaCreateNestedOneWithoutFailureModesInput
    process?: ProcessCreateNestedOneWithoutFailureModesInput
    comments?: CommentCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUncheckedCreateWithoutActionItemsInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
    processId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeCreateOrConnectWithoutActionItemsInput = {
    where: FailureModeWhereUniqueInput
    create: XOR<FailureModeCreateWithoutActionItemsInput, FailureModeUncheckedCreateWithoutActionItemsInput>
  }

  export type UserCreateWithoutAssignedActionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedActionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedActionsInput, UserUncheckedCreateWithoutAssignedActionsInput>
  }

  export type UserCreateWithoutCreatedActionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedActionsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedActionsInput, UserUncheckedCreateWithoutCreatedActionsInput>
  }

  export type CommentCreateWithoutActionItemInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutActionItemInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    parentId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutActionItemInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput>
  }

  export type CommentCreateManyActionItemInputEnvelope = {
    data: CommentCreateManyActionItemInput | CommentCreateManyActionItemInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutActionItemInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
    project?: ProjectCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutActionItemInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
  }

  export type NotificationCreateOrConnectWithoutActionItemInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput>
  }

  export type NotificationCreateManyActionItemInputEnvelope = {
    data: NotificationCreateManyActionItemInput | NotificationCreateManyActionItemInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutActionItemsInput = {
    update: XOR<ProjectUpdateWithoutActionItemsInput, ProjectUncheckedUpdateWithoutActionItemsInput>
    create: XOR<ProjectCreateWithoutActionItemsInput, ProjectUncheckedCreateWithoutActionItemsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutActionItemsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutActionItemsInput, ProjectUncheckedUpdateWithoutActionItemsInput>
  }

  export type ProjectUpdateWithoutActionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutActionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FailureModeUpsertWithoutActionItemsInput = {
    update: XOR<FailureModeUpdateWithoutActionItemsInput, FailureModeUncheckedUpdateWithoutActionItemsInput>
    create: XOR<FailureModeCreateWithoutActionItemsInput, FailureModeUncheckedCreateWithoutActionItemsInput>
    where?: FailureModeWhereInput
  }

  export type FailureModeUpdateToOneWithWhereWithoutActionItemsInput = {
    where?: FailureModeWhereInput
    data: XOR<FailureModeUpdateWithoutActionItemsInput, FailureModeUncheckedUpdateWithoutActionItemsInput>
  }

  export type FailureModeUpdateWithoutActionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneRequiredWithoutFailureModesNestedInput
    process?: ProcessUpdateOneWithoutFailureModesNestedInput
    comments?: CommentUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateWithoutActionItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutFailureModeNestedInput
  }

  export type UserUpsertWithoutAssignedActionsInput = {
    update: XOR<UserUpdateWithoutAssignedActionsInput, UserUncheckedUpdateWithoutAssignedActionsInput>
    create: XOR<UserCreateWithoutAssignedActionsInput, UserUncheckedCreateWithoutAssignedActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedActionsInput, UserUncheckedUpdateWithoutAssignedActionsInput>
  }

  export type UserUpdateWithoutAssignedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedActionsInput = {
    update: XOR<UserUpdateWithoutCreatedActionsInput, UserUncheckedUpdateWithoutCreatedActionsInput>
    create: XOR<UserCreateWithoutCreatedActionsInput, UserUncheckedCreateWithoutCreatedActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedActionsInput, UserUncheckedUpdateWithoutCreatedActionsInput>
  }

  export type UserUpdateWithoutCreatedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutActionItemInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutActionItemInput, CommentUncheckedUpdateWithoutActionItemInput>
    create: XOR<CommentCreateWithoutActionItemInput, CommentUncheckedCreateWithoutActionItemInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutActionItemInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutActionItemInput, CommentUncheckedUpdateWithoutActionItemInput>
  }

  export type CommentUpdateManyWithWhereWithoutActionItemInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutActionItemInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutActionItemInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutActionItemInput, NotificationUncheckedUpdateWithoutActionItemInput>
    create: XOR<NotificationCreateWithoutActionItemInput, NotificationUncheckedCreateWithoutActionItemInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutActionItemInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutActionItemInput, NotificationUncheckedUpdateWithoutActionItemInput>
  }

  export type NotificationUpdateManyWithWhereWithoutActionItemInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutActionItemInput>
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCommentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
  }

  export type FmeaCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutCommentsInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutCommentsInput, FmeaUncheckedCreateWithoutCommentsInput>
  }

  export type FailureModeCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmea: FmeaCreateNestedOneWithoutFailureModesInput
    process?: ProcessCreateNestedOneWithoutFailureModesInput
    actionItems?: ActionItemCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
    processId?: string | null
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutFailureModeInput
  }

  export type FailureModeCreateOrConnectWithoutCommentsInput = {
    where: FailureModeWhereUniqueInput
    create: XOR<FailureModeCreateWithoutCommentsInput, FailureModeUncheckedCreateWithoutCommentsInput>
  }

  export type ActionItemCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    notifications?: NotificationCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
    notifications?: NotificationUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutCommentsInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutCommentsInput, ActionItemUncheckedCreateWithoutCommentsInput>
  }

  export type CommentCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutRepliesInput
  }

  export type CommentUncheckedCreateWithoutRepliesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type CommentCreateOrConnectWithoutRepliesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
  }

  export type CommentCreateWithoutParentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    fmea?: FmeaCreateNestedOneWithoutCommentsInput
    failureMode?: FailureModeCreateNestedOneWithoutCommentsInput
    actionItem?: ActionItemCreateNestedOneWithoutCommentsInput
    replies?: CommentCreateNestedManyWithoutParentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    replies?: CommentUncheckedCreateNestedManyWithoutParentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentCreateManyParentInputEnvelope = {
    data: CommentCreateManyParentInput | CommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutCommentsInput = {
    update: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FmeaUpsertWithoutCommentsInput = {
    update: XOR<FmeaUpdateWithoutCommentsInput, FmeaUncheckedUpdateWithoutCommentsInput>
    create: XOR<FmeaCreateWithoutCommentsInput, FmeaUncheckedCreateWithoutCommentsInput>
    where?: FmeaWhereInput
  }

  export type FmeaUpdateToOneWithWhereWithoutCommentsInput = {
    where?: FmeaWhereInput
    data: XOR<FmeaUpdateWithoutCommentsInput, FmeaUncheckedUpdateWithoutCommentsInput>
  }

  export type FmeaUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type FailureModeUpsertWithoutCommentsInput = {
    update: XOR<FailureModeUpdateWithoutCommentsInput, FailureModeUncheckedUpdateWithoutCommentsInput>
    create: XOR<FailureModeCreateWithoutCommentsInput, FailureModeUncheckedCreateWithoutCommentsInput>
    where?: FailureModeWhereInput
  }

  export type FailureModeUpdateToOneWithWhereWithoutCommentsInput = {
    where?: FailureModeWhereInput
    data: XOR<FailureModeUpdateWithoutCommentsInput, FailureModeUncheckedUpdateWithoutCommentsInput>
  }

  export type FailureModeUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneRequiredWithoutFailureModesNestedInput
    process?: ProcessUpdateOneWithoutFailureModesNestedInput
    actionItems?: ActionItemUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: ActionItemUncheckedUpdateManyWithoutFailureModeNestedInput
  }

  export type ActionItemUpsertWithoutCommentsInput = {
    update: XOR<ActionItemUpdateWithoutCommentsInput, ActionItemUncheckedUpdateWithoutCommentsInput>
    create: XOR<ActionItemCreateWithoutCommentsInput, ActionItemUncheckedCreateWithoutCommentsInput>
    where?: ActionItemWhereInput
  }

  export type ActionItemUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ActionItemWhereInput
    data: XOR<ActionItemUpdateWithoutCommentsInput, ActionItemUncheckedUpdateWithoutCommentsInput>
  }

  export type ActionItemUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type CommentUpsertWithoutRepliesInput = {
    update: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
    create: XOR<CommentCreateWithoutRepliesInput, CommentUncheckedCreateWithoutRepliesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutRepliesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutRepliesInput, CommentUncheckedUpdateWithoutRepliesInput>
  }

  export type CommentUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
  }

  export type CommentUncheckedUpdateWithoutRepliesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type ProjectCreateWithoutNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutNotificationsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutNotificationsInput, ProjectUncheckedCreateWithoutNotificationsInput>
  }

  export type ActionItemCreateWithoutNotificationsInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutActionItemsInput
    failureMode?: FailureModeCreateNestedOneWithoutActionItemsInput
    assignee?: UserCreateNestedOneWithoutAssignedActionsInput
    createdBy: UserCreateNestedOneWithoutCreatedActionsInput
    comments?: CommentCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemUncheckedCreateWithoutNotificationsInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
    comments?: CommentUncheckedCreateNestedManyWithoutActionItemInput
  }

  export type ActionItemCreateOrConnectWithoutNotificationsInput = {
    where: ActionItemWhereUniqueInput
    create: XOR<ActionItemCreateWithoutNotificationsInput, ActionItemUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutNotificationsInput = {
    update: XOR<ProjectUpdateWithoutNotificationsInput, ProjectUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ProjectCreateWithoutNotificationsInput, ProjectUncheckedCreateWithoutNotificationsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutNotificationsInput, ProjectUncheckedUpdateWithoutNotificationsInput>
  }

  export type ProjectUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ActionItemUpsertWithoutNotificationsInput = {
    update: XOR<ActionItemUpdateWithoutNotificationsInput, ActionItemUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ActionItemCreateWithoutNotificationsInput, ActionItemUncheckedCreateWithoutNotificationsInput>
    where?: ActionItemWhereInput
  }

  export type ActionItemUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ActionItemWhereInput
    data: XOR<ActionItemUpdateWithoutNotificationsInput, ActionItemUncheckedUpdateWithoutNotificationsInput>
  }

  export type ActionItemUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type UserCreateWithoutChangeEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChangeEventsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChangeEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChangeEventsInput, UserUncheckedCreateWithoutChangeEventsInput>
  }

  export type ProjectCreateWithoutChangeEventsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutChangeEventsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutChangeEventsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutChangeEventsInput, ProjectUncheckedCreateWithoutChangeEventsInput>
  }

  export type UserUpsertWithoutChangeEventsInput = {
    update: XOR<UserUpdateWithoutChangeEventsInput, UserUncheckedUpdateWithoutChangeEventsInput>
    create: XOR<UserCreateWithoutChangeEventsInput, UserUncheckedCreateWithoutChangeEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChangeEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChangeEventsInput, UserUncheckedUpdateWithoutChangeEventsInput>
  }

  export type UserUpdateWithoutChangeEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChangeEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutChangeEventsInput = {
    update: XOR<ProjectUpdateWithoutChangeEventsInput, ProjectUncheckedUpdateWithoutChangeEventsInput>
    create: XOR<ProjectCreateWithoutChangeEventsInput, ProjectUncheckedCreateWithoutChangeEventsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutChangeEventsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutChangeEventsInput, ProjectUncheckedUpdateWithoutChangeEventsInput>
  }

  export type ProjectUpdateWithoutChangeEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutChangeEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutComplianceReportsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutComplianceReportsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutComplianceReportsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutComplianceReportsInput, ProjectUncheckedCreateWithoutComplianceReportsInput>
  }

  export type UserCreateWithoutComplianceReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutComplianceReportsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutComplianceReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComplianceReportsInput, UserUncheckedCreateWithoutComplianceReportsInput>
  }

  export type ProjectUpsertWithoutComplianceReportsInput = {
    update: XOR<ProjectUpdateWithoutComplianceReportsInput, ProjectUncheckedUpdateWithoutComplianceReportsInput>
    create: XOR<ProjectCreateWithoutComplianceReportsInput, ProjectUncheckedCreateWithoutComplianceReportsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutComplianceReportsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutComplianceReportsInput, ProjectUncheckedUpdateWithoutComplianceReportsInput>
  }

  export type ProjectUpdateWithoutComplianceReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutComplianceReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutComplianceReportsInput = {
    update: XOR<UserUpdateWithoutComplianceReportsInput, UserUncheckedUpdateWithoutComplianceReportsInput>
    create: XOR<UserCreateWithoutComplianceReportsInput, UserUncheckedCreateWithoutComplianceReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComplianceReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComplianceReportsInput, UserUncheckedUpdateWithoutComplianceReportsInput>
  }

  export type UserUpdateWithoutComplianceReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutComplianceReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectCreateWithoutRiskAnalyticsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    members?: ProjectMemberCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutRiskAnalyticsInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    members?: ProjectMemberUncheckedCreateNestedManyWithoutProjectInput
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutRiskAnalyticsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutRiskAnalyticsInput, ProjectUncheckedCreateWithoutRiskAnalyticsInput>
  }

  export type FmeaCreateWithoutRiskAnalyticsInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutFmeasInput
    processFlow?: ProcessFlowCreateNestedOneWithoutFmeasInput
    createdBy: UserCreateNestedOneWithoutCreatedFmeasInput
    failureModes?: FailureModeCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanCreateNestedManyWithoutFmeaInput
    comments?: CommentCreateNestedManyWithoutFmeaInput
  }

  export type FmeaUncheckedCreateWithoutRiskAnalyticsInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
    createdById: string
    failureModes?: FailureModeUncheckedCreateNestedManyWithoutFmeaInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutFmeaInput
    comments?: CommentUncheckedCreateNestedManyWithoutFmeaInput
  }

  export type FmeaCreateOrConnectWithoutRiskAnalyticsInput = {
    where: FmeaWhereUniqueInput
    create: XOR<FmeaCreateWithoutRiskAnalyticsInput, FmeaUncheckedCreateWithoutRiskAnalyticsInput>
  }

  export type ProjectUpsertWithoutRiskAnalyticsInput = {
    update: XOR<ProjectUpdateWithoutRiskAnalyticsInput, ProjectUncheckedUpdateWithoutRiskAnalyticsInput>
    create: XOR<ProjectCreateWithoutRiskAnalyticsInput, ProjectUncheckedCreateWithoutRiskAnalyticsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutRiskAnalyticsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutRiskAnalyticsInput, ProjectUncheckedUpdateWithoutRiskAnalyticsInput>
  }

  export type ProjectUpdateWithoutRiskAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutRiskAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type FmeaUpsertWithoutRiskAnalyticsInput = {
    update: XOR<FmeaUpdateWithoutRiskAnalyticsInput, FmeaUncheckedUpdateWithoutRiskAnalyticsInput>
    create: XOR<FmeaCreateWithoutRiskAnalyticsInput, FmeaUncheckedCreateWithoutRiskAnalyticsInput>
    where?: FmeaWhereInput
  }

  export type FmeaUpdateToOneWithWhereWithoutRiskAnalyticsInput = {
    where?: FmeaWhereInput
    data: XOR<FmeaUpdateWithoutRiskAnalyticsInput, FmeaUncheckedUpdateWithoutRiskAnalyticsInput>
  }

  export type FmeaUpdateWithoutRiskAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutRiskAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type UserCreateWithoutAuditTrailInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
  }

  export type UserUncheckedCreateWithoutAuditTrailInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    assignedProjects?: ProjectMemberUncheckedCreateNestedManyWithoutUserInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
  }

  export type UserCreateOrConnectWithoutAuditTrailInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditTrailInput, UserUncheckedCreateWithoutAuditTrailInput>
  }

  export type UserUpsertWithoutAuditTrailInput = {
    update: XOR<UserUpdateWithoutAuditTrailInput, UserUncheckedUpdateWithoutAuditTrailInput>
    create: XOR<UserCreateWithoutAuditTrailInput, UserUncheckedCreateWithoutAuditTrailInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditTrailInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditTrailInput, UserUncheckedUpdateWithoutAuditTrailInput>
  }

  export type UserUpdateWithoutAuditTrailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditTrailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedProjects?: ProjectMemberUncheckedUpdateManyWithoutUserNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
  }

  export type UserCreateWithoutAssignedProjectsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectCreateNestedManyWithoutCreatedByInput
    createdFmeas?: FmeaCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedProjectsInput = {
    id?: string
    name: string
    email: string
    password: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    createdProjects?: ProjectUncheckedCreateNestedManyWithoutCreatedByInput
    createdFmeas?: FmeaUncheckedCreateNestedManyWithoutCreatedByInput
    assignedActions?: ActionItemUncheckedCreateNestedManyWithoutAssigneeInput
    createdActions?: ActionItemUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutCreatedByInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutAssessedByInput
    auditTrail?: AuditTrailUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedProjectsInput, UserUncheckedCreateWithoutAssignedProjectsInput>
  }

  export type ProjectCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedProjectsInput
    processFlows?: ProcessFlowCreateNestedManyWithoutProjectInput
    fmeas?: FmeaCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemCreateNestedManyWithoutProjectInput
    comments?: CommentCreateNestedManyWithoutProjectInput
    notifications?: NotificationCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
    createdById: string
    processFlows?: ProcessFlowUncheckedCreateNestedManyWithoutProjectInput
    fmeas?: FmeaUncheckedCreateNestedManyWithoutProjectInput
    controlPlans?: ControlPlanUncheckedCreateNestedManyWithoutProjectInput
    actionItems?: ActionItemUncheckedCreateNestedManyWithoutProjectInput
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutProjectInput
    changeEvents?: ChangeEventUncheckedCreateNestedManyWithoutProjectInput
    complianceReports?: ComplianceReportUncheckedCreateNestedManyWithoutProjectInput
    riskAnalytics?: RiskAnalyticsUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutMembersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutAssignedProjectsInput = {
    update: XOR<UserUpdateWithoutAssignedProjectsInput, UserUncheckedUpdateWithoutAssignedProjectsInput>
    create: XOR<UserCreateWithoutAssignedProjectsInput, UserUncheckedCreateWithoutAssignedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedProjectsInput, UserUncheckedUpdateWithoutAssignedProjectsInput>
  }

  export type UserUpdateWithoutAssignedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUpdateManyWithoutCreatedByNestedInput
    createdFmeas?: FmeaUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdProjects?: ProjectUncheckedUpdateManyWithoutCreatedByNestedInput
    createdFmeas?: FmeaUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedActions?: ActionItemUncheckedUpdateManyWithoutAssigneeNestedInput
    createdActions?: ActionItemUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutCreatedByNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutAssessedByNestedInput
    auditTrail?: AuditTrailUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutMembersInput = {
    update: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
    create: XOR<ProjectCreateWithoutMembersInput, ProjectUncheckedCreateWithoutMembersInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutMembersInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutMembersInput, ProjectUncheckedUpdateWithoutMembersInput>
  }

  export type ProjectUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedProjectsNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    department?: string | null
    industry?: $Enums.Industry
    status?: $Enums.ProjectStatus
    version?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    archivedAt?: Date | string | null
  }

  export type ProjectMemberCreateManyUserInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    projectId: string
  }

  export type FmeaCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    processFlowId?: string | null
  }

  export type ActionItemCreateManyAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    createdById: string
  }

  export type ActionItemCreateManyCreatedByInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    failureModeId?: string | null
    assigneeId?: string | null
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    projectId?: string | null
    actionItemId?: string | null
  }

  export type ChangeEventCreateManyCreatedByInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    projectId: string
  }

  export type ComplianceReportCreateManyAssessedByInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type AuditTrailCreateManyUserInput = {
    id?: string
    action: string
    entityType: string
    entityId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type ProjectUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: ProjectMemberUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUpdateManyWithoutProjectNestedInput
    comments?: CommentUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    members?: ProjectMemberUncheckedUpdateManyWithoutProjectNestedInput
    processFlows?: ProcessFlowUncheckedUpdateManyWithoutProjectNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProjectNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutProjectNestedInput
    actionItems?: ActionItemUncheckedUpdateManyWithoutProjectNestedInput
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutProjectNestedInput
    changeEvents?: ChangeEventUncheckedUpdateManyWithoutProjectNestedInput
    complianceReports?: ComplianceReportUncheckedUpdateManyWithoutProjectNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: EnumIndustryFieldUpdateOperationsInput | $Enums.Industry
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    version?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutMembersNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type FmeaUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActionItemUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ActionItemUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutNotificationsNestedInput
    actionItem?: ActionItemUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChangeEventUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutChangeEventsNestedInput
  }

  export type ChangeEventUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ChangeEventUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ComplianceReportUpdateWithoutAssessedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutComplianceReportsNestedInput
  }

  export type ComplianceReportUncheckedUpdateWithoutAssessedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ComplianceReportUncheckedUpdateManyWithoutAssessedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditTrailUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditTrailUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditTrailUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectMemberCreateManyProjectInput = {
    id?: string
    role?: $Enums.ProjectRole
    joinedAt?: Date | string
    userId: string
  }

  export type ProcessFlowCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FmeaCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processFlowId?: string | null
    createdById: string
  }

  export type ControlPlanCreateManyProjectInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId?: string | null
  }

  export type ActionItemCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    failureModeId?: string | null
    assigneeId?: string | null
    createdById: string
  }

  export type CommentCreateManyProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type NotificationCreateManyProjectInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    actionItemId?: string | null
  }

  export type ChangeEventCreateManyProjectInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    reason?: string | null
    createdAt?: Date | string
    createdById: string
  }

  export type ComplianceReportCreateManyProjectInput = {
    id?: string
    standard: $Enums.ComplianceStandard
    status?: $Enums.ComplianceStatus
    score?: number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assessedById?: string | null
  }

  export type RiskAnalyticsCreateManyProjectInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    fmeaId?: string | null
  }

  export type ProjectMemberUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAssignedProjectsNestedInput
  }

  export type ProjectMemberUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectMemberUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumProjectRoleFieldUpdateOperationsInput | $Enums.ProjectRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProcessFlowUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUpdateManyWithoutProcessFlowNestedInput
    fmeas?: FmeaUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processes?: ProcessUncheckedUpdateManyWithoutProcessFlowNestedInput
    fmeas?: FmeaUncheckedUpdateManyWithoutProcessFlowNestedInput
  }

  export type ProcessFlowUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FmeaUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlow?: ProcessFlowUpdateOneWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processFlowId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ControlPlanUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneWithoutControlPlansNestedInput
  }

  export type ControlPlanUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ControlPlanUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActionItemUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    failureMode?: FailureModeUpdateOneWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    actionItem?: ActionItemUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChangeEventUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutChangeEventsNestedInput
  }

  export type ChangeEventUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ChangeEventUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ComplianceReportUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedBy?: UserUpdateOneWithoutComplianceReportsNestedInput
  }

  export type ComplianceReportUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComplianceReportUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    standard?: EnumComplianceStandardFieldUpdateOperationsInput | $Enums.ComplianceStandard
    status?: EnumComplianceStatusFieldUpdateOperationsInput | $Enums.ComplianceStatus
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    findings?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableJsonNullValueInput | InputJsonValue
    assessedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskAnalyticsUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneWithoutRiskAnalyticsNestedInput
  }

  export type RiskAnalyticsUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskAnalyticsUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProcessCreateManyProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    sequence: number
    processType?: string | null
    input?: string | null
    output?: string | null
    resources?: string | null
    controls?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FmeaCreateManyProcessFlowInput = {
    id?: string
    name: string
    description?: string | null
    fmeaType?: $Enums.FmeaType
    status?: $Enums.FmeaStatus
    version?: string
    approvalDate?: Date | string | null
    nextReviewDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    createdById: string
  }

  export type ProcessUpdateWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    failureModes?: FailureModeUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutProcessNestedInput
  }

  export type ProcessUncheckedUpdateManyWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sequence?: IntFieldUpdateOperationsInput | number
    processType?: NullableStringFieldUpdateOperationsInput | string | null
    input?: NullableStringFieldUpdateOperationsInput | string | null
    output?: NullableStringFieldUpdateOperationsInput | string | null
    resources?: NullableStringFieldUpdateOperationsInput | string | null
    controls?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FmeaUpdateWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutFmeasNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedFmeasNestedInput
    failureModes?: FailureModeUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUpdateManyWithoutFmeaNestedInput
    comments?: CommentUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    failureModes?: FailureModeUncheckedUpdateManyWithoutFmeaNestedInput
    controlPlans?: ControlPlanUncheckedUpdateManyWithoutFmeaNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFmeaNestedInput
    riskAnalytics?: RiskAnalyticsUncheckedUpdateManyWithoutFmeaNestedInput
  }

  export type FmeaUncheckedUpdateManyWithoutProcessFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaType?: EnumFmeaTypeFieldUpdateOperationsInput | $Enums.FmeaType
    status?: EnumFmeaStatusFieldUpdateOperationsInput | $Enums.FmeaStatus
    version?: StringFieldUpdateOperationsInput | string
    approvalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextReviewDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type FailureModeCreateManyProcessInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fmeaId: string
  }

  export type FailureModeUpdateWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmea?: FmeaUpdateOneRequiredWithoutFailureModesNestedInput
    actionItems?: ActionItemUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
    actionItems?: ActionItemUncheckedUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateManyWithoutProcessInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fmeaId?: StringFieldUpdateOperationsInput | string
  }

  export type FailureModeCreateManyFmeaInput = {
    id?: string
    name: string
    description?: string | null
    potential_failure: string
    potential_effects: string
    severity?: number
    potential_causes: string
    occurrence?: number
    current_controls?: string | null
    detection?: number
    rpn?: number
    recommended_actions?: string | null
    responsibility?: string | null
    target_date?: Date | string | null
    actions_taken?: string | null
    revised_severity?: number | null
    revised_occurrence?: number | null
    revised_detection?: number | null
    revised_rpn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    processId?: string | null
  }

  export type ControlPlanCreateManyFmeaInput = {
    id?: string
    name: string
    description?: string | null
    process_step: string
    control_method: string
    specification?: string | null
    measurement_technique?: string | null
    sample_size?: string | null
    frequency?: string | null
    control_method_type?: $Enums.ControlMethodType
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type CommentCreateManyFmeaInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type RiskAnalyticsCreateManyFmeaInput = {
    id?: string
    period: Date | string
    totalRpn: number
    avgSeverity: number
    avgOccurrence: number
    avgDetection: number
    highRiskCount: number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    projectId: string
  }

  export type FailureModeUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    process?: ProcessUpdateOneWithoutFailureModesNestedInput
    actionItems?: ActionItemUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: ActionItemUncheckedUpdateManyWithoutFailureModeNestedInput
    comments?: CommentUncheckedUpdateManyWithoutFailureModeNestedInput
  }

  export type FailureModeUncheckedUpdateManyWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    potential_failure?: StringFieldUpdateOperationsInput | string
    potential_effects?: StringFieldUpdateOperationsInput | string
    severity?: IntFieldUpdateOperationsInput | number
    potential_causes?: StringFieldUpdateOperationsInput | string
    occurrence?: IntFieldUpdateOperationsInput | number
    current_controls?: NullableStringFieldUpdateOperationsInput | string | null
    detection?: IntFieldUpdateOperationsInput | number
    rpn?: IntFieldUpdateOperationsInput | number
    recommended_actions?: NullableStringFieldUpdateOperationsInput | string | null
    responsibility?: NullableStringFieldUpdateOperationsInput | string | null
    target_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actions_taken?: NullableStringFieldUpdateOperationsInput | string | null
    revised_severity?: NullableIntFieldUpdateOperationsInput | number | null
    revised_occurrence?: NullableIntFieldUpdateOperationsInput | number | null
    revised_detection?: NullableIntFieldUpdateOperationsInput | number | null
    revised_rpn?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ControlPlanUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutControlPlansNestedInput
  }

  export type ControlPlanUncheckedUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ControlPlanUncheckedUpdateManyWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    process_step?: StringFieldUpdateOperationsInput | string
    control_method?: StringFieldUpdateOperationsInput | string
    specification?: NullableStringFieldUpdateOperationsInput | string | null
    measurement_technique?: NullableStringFieldUpdateOperationsInput | string | null
    sample_size?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableStringFieldUpdateOperationsInput | string | null
    control_method_type?: EnumControlMethodTypeFieldUpdateOperationsInput | $Enums.ControlMethodType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RiskAnalyticsUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutRiskAnalyticsNestedInput
  }

  export type RiskAnalyticsUncheckedUpdateWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type RiskAnalyticsUncheckedUpdateManyWithoutFmeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    totalRpn?: IntFieldUpdateOperationsInput | number
    avgSeverity?: FloatFieldUpdateOperationsInput | number
    avgOccurrence?: FloatFieldUpdateOperationsInput | number
    avgDetection?: FloatFieldUpdateOperationsInput | number
    highRiskCount?: IntFieldUpdateOperationsInput | number
    trendData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ActionItemCreateManyFailureModeInput = {
    id?: string
    title: string
    description?: string | null
    priority?: $Enums.Priority
    status?: $Enums.ActionStatus
    dueDate?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    assigneeId?: string | null
    createdById: string
  }

  export type CommentCreateManyFailureModeInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    actionItemId?: string | null
    parentId?: string | null
  }

  export type ActionItemUpdateWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutActionItemsNestedInput
    assignee?: UserUpdateOneWithoutAssignedActionsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedActionsNestedInput
    comments?: CommentUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutActionItemNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutActionItemNestedInput
  }

  export type ActionItemUncheckedUpdateManyWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    status?: EnumActionStatusFieldUpdateOperationsInput | $Enums.ActionStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutFailureModeInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyActionItemInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    parentId?: string | null
  }

  export type NotificationCreateManyActionItemInput = {
    id?: string
    title: string
    message: string
    type?: $Enums.NotificationType
    read?: boolean
    createdAt?: Date | string
    userId: string
    projectId?: string | null
  }

  export type CommentUpdateWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutRepliesNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    project?: ProjectUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutActionItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyParentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    authorId: string
    projectId?: string | null
    fmeaId?: string | null
    failureModeId?: string | null
    actionItemId?: string | null
  }

  export type CommentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    fmea?: FmeaUpdateOneWithoutCommentsNestedInput
    failureMode?: FailureModeUpdateOneWithoutCommentsNestedInput
    actionItem?: ActionItemUpdateOneWithoutCommentsNestedInput
    replies?: CommentUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
    replies?: CommentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    fmeaId?: NullableStringFieldUpdateOperationsInput | string | null
    failureModeId?: NullableStringFieldUpdateOperationsInput | string | null
    actionItemId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessFlowCountOutputTypeDefaultArgs instead
     */
    export type ProcessFlowCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessFlowCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessCountOutputTypeDefaultArgs instead
     */
    export type ProcessCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FmeaCountOutputTypeDefaultArgs instead
     */
    export type FmeaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FmeaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FailureModeCountOutputTypeDefaultArgs instead
     */
    export type FailureModeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FailureModeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActionItemCountOutputTypeDefaultArgs instead
     */
    export type ActionItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActionItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessFlowDefaultArgs instead
     */
    export type ProcessFlowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessFlowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcessDefaultArgs instead
     */
    export type ProcessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FmeaDefaultArgs instead
     */
    export type FmeaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FmeaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FailureModeDefaultArgs instead
     */
    export type FailureModeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FailureModeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ControlPlanDefaultArgs instead
     */
    export type ControlPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ControlPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActionItemDefaultArgs instead
     */
    export type ActionItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActionItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChangeEventDefaultArgs instead
     */
    export type ChangeEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChangeEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ComplianceReportDefaultArgs instead
     */
    export type ComplianceReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ComplianceReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RiskAnalyticsDefaultArgs instead
     */
    export type RiskAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RiskAnalyticsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditTrailDefaultArgs instead
     */
    export type AuditTrailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditTrailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectMemberDefaultArgs instead
     */
    export type ProjectMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectMemberDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}